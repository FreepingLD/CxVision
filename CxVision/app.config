<?xml version="1.0" encoding="utf-8"?>
<configuration>
	
	<configSections>
		<section name="log4net" type="log4net.Config.Log4NetConfigurationSectionHandler, log4net" />
	</configSections>
	
	<startup>
		<supportedRuntime version="v4.0" sku=".NETFramework,Version=v4.7.2" />
	</startup>
	
	<log4net>

		<root>
			<!-- 默认日志对象级别 -->
			<!--(高) OFF > FATAL > ERROR > WARN > INFO > DEBUG > ALL (低) -->
			<level value="DEBUG" />
			<!-- 该日志对象的记录方式（可将多个记录方式设置在一起，同时记录到多种媒介上，默认日志记录方式 ref为<appender>节点的name属性） -->
			<!--<appender-ref ref="ColoredConsoleAppender"/>-->
			<!-- root是根logger，其他loggr都继承于他， 默认只是存储文件的方式 -->
			<appender-ref ref="RollingFileAppender" />
		</root>

		<!-- 注意！！！ <root>节点和<logger>节点，如果同时出现，会先执行root的内容，再执行logger的内容，有可能会出现重复插入记录的情况，解决方案：默认节点不设置默认记录方式 -->
		<!-- 指定类别日志设置节点 name为LogManager.GetLogger("logger.db.debug")中的name参数 -->
		<logger name="loggerColoredConsole">
			<!-- 该日志对象的级别（可多个级别设置在一起，公用同一个记录方式 ， 派生类定义的相同参数会赋盖根类Root）-->
			<level value="DEBUG" />
			<!-- 该日志对象的记录方式（可多个记录方式设置在一起，同时记录到多种媒介上，这个logger继承自root,因此该logger继承root中的记录方式，
			如果同一个logger对象中包含多个同样的appender，将重复记录多次，子logger中没有定义的属性，将继承父logger的， 所以使用这个logger应该可以同时输出到控制台和文件中） -->
			<appender-ref ref="ColoredConsoleAppender" />
		</logger>


		<!-- 将日志输出到文件中 -->
		<appender name="RollingFileAppender" type="log4net.Appender.RollingFileAppender,log4net">
			<param name="File" value="App_Data/Log/" />
			<param name="AppendToFile" value="true" />
			<param name="RollingStyle" value="Composite" />
			<param name="MaxSizeRollBackups" value="10" />
			<param name="MaximumFileSize" value="10MB" />
			<param name="DatePattern" value="&quot;Logs_&quot;yyyyMMdd&quot;.txt&quot;" />
			<param name="StaticLogFileName" value="false" />
			<layout type="log4net.Layout.PatternLayout,log4net">
				<param name="ConversionPattern" value="%d [%t] %-5p %c - %m%n" />
			</layout>
		</appender>

		<!-- 文件形式记录日志-Debug -->
		<appender name="RollingFileAppender_Debug" type="log4net.Appender.RollingFileAppender">
			<!--日志文件路径,按文件大小方式输出时在这里指定文件名，并且前面的日志按天在文件名后自动添加当天日期形成文件-->
			<param name="File" value="D:\App_Log\Debug\" />
			<!--是否是向文件中追加日志-->
			<param name="AppendToFile" value="true" />
			<!--记录日志写入文件时，不锁定文本文件-->
			<!--<lockingModel type="log4net.Appender.FileAppender+MinimalLock" />-->
			<!--Unicode编码-->
			<!--<Encoding value="UTF-8" />-->
			<!--最多产生的日志文件数，value="－1"为不限文件数-->
			<!--<param name="MaxSizeRollBackups" value="10" />-->
			<!--log保留天数-->
			<param name="MaxSizeRollBackups" value="10" />
			<!--日志文件名是否是固定不变的（是否只写到一个文件中）-->
			<param name="StaticLogFileName" value="false" />
			<!--按日期产生文件夹，文件名［在日期方式与混合方式下使用］日志文件名格式为:2008-08-31.log -->
			<param name="DatePattern" value="yyyy-MM-dd&quot;.log&quot;" />
			<!--<param name="DatePattern" value="yyyy-MM-dd/"-ReflectionLayout.log=""""  />
      <param name="DatePattern" value="yyyyMMdd/yyyyMMdd"-TimerServer.log""  />
      <param name="DatePattern" value="yyyyMMdd/"TimerServer/TimerServer.log""  />-->

			<!--按照何种方式产生多个日志文件(日期[Date],文件大小[Size],混合[Composite])-->
			<param name="RollingStyle" value="Date" />
			<!--每个文件的大小。只在混合方式与文件大小方式下使用，超出大小的在文件名后自动增加1重新命名-->
			<param name="maximumFileSize" value="10MB" />
			<!--记录的格式。-->
			<layout type="log4net.Layout.PatternLayout">
				<!-- 
				%d, %date     ：表示当然的时间 
				%p, %level    ：表示日志的级别
　　            %c, %logger   ：表示日志产生的主题或名称，通常是所在的类名，便于定位问题
　　            %m, %message  ：表示日志的具体内容
　　            %n, %newline  ：换行
                %exception    ：表示异常信息
				 %logger      : 表示线程ID　-->
				<param name="ConversionPattern" value="%d [%t] %-5p %c - %m %logger %n" />
			</layout>
		</appender>

		<!-- 配置控制台颜色输出，将日志输出到控制台上 -->
		<appender name="ColoredConsoleAppender" type="log4net.Appender.ColoredConsoleAppender">
			<!-- 设置不同级别控制台显示的不同颜色 -->
			<mapping>
				<level value="DEBUG" />
				<foreColor value="White, HighIntensity" />
			</mapping>

			<mapping>
				<level value="INFO" />
				<foreColor value="Green" />
			</mapping>

			<mapping>
				<level value="WARN" />
				<foreColor value="Yellow, HighIntensity" />
			</mapping>

			<mapping>
				<level value="ERROR" />
				<foreColor value="Red, HighIntensity" />
			</mapping>

			<mapping>
				<level value="FATAL" />
				<foreColor value="Red, HighIntensity" />
			</mapping>

			<!--<Green Red  White Yellow Purple Cyan HighIntensity />-->
			<!-- 记录的格式。布局类型有： -->
			<layout type="log4net.Layout.PatternLayout">
				<conversionPattern value="%date{HH:mm:ss,fff} [%-5level] %m %n" />
			</layout>
			<!-- 过滤器type有如下几种类型
              log4net.Filter.DenyAllFilter        丢弃所有日志事件。
              log4net.Filter.LevelMatchFilter      准确匹配事件等级  在日志对象的输出级别上，过滤日志的输出级别范围，日志对象定义了最小的输出级别。
              log4net.Filter.LevelRangeFilter      匹配一个范围的等级。
              log4net.Filter.LoggerMatchFilter    匹配一个日志器名字的开始。
              log4net.Filter.PropertyFilter        匹配指定属性名称的子字符串。
              log4net.Filter.StringMatchFilter    匹配事件消息的子字符串。-->
			<filter type="log4net.Filter.LevelRangeFilter">
				<!-- 控制输出日志的级别范围 --> 
				<param name="LevelMin" value="DEBUG" />
				<param name="LevelMax" value="FATAL" />
			</filter>
		</appender>



	</log4net>

  <runtime>

    <assemblyBinding xmlns="urn:schemas-microsoft-com:asm.v1">

      <dependentAssembly>

        <assemblyIdentity name="System.Memory" publicKeyToken="cc7b13ffcd2ddd51" culture="neutral" />

        <bindingRedirect oldVersion="0.0.0.0-4.0.1.2" newVersion="4.0.1.2" />

      </dependentAssembly>

      <dependentAssembly>

        <assemblyIdentity name="System.Runtime.CompilerServices.Unsafe" publicKeyToken="b03f5f7f11d50a3a" culture="neutral" />

        <bindingRedirect oldVersion="0.0.0.0-6.0.0.0" newVersion="6.0.0.0" />

      </dependentAssembly>

      <dependentAssembly>

        <assemblyIdentity name="Newtonsoft.Json" publicKeyToken="30ad4fe6b2a6aeed" culture="neutral" />

        <bindingRedirect oldVersion="0.0.0.0-6.0.0.0" newVersion="6.0.0.0" />

      </dependentAssembly>

      <dependentAssembly>

        <assemblyIdentity name="System.Buffers" publicKeyToken="cc7b13ffcd2ddd51" culture="neutral" />

        <bindingRedirect oldVersion="0.0.0.0-4.0.3.0" newVersion="4.0.3.0" />

      </dependentAssembly>

    </assemblyBinding>

  </runtime>
</configuration>
