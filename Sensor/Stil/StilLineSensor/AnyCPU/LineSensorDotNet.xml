<?xml version="1.0"?>
<doc>
    <assembly>
        <name>LineSensorDotNet</name>
    </assembly>
    <members>
        <member name="T:STIL.LineSensor.AcquiredData">
            <summary>
            Encapsulates data retrieved from the line sensor device.
            The data is stored in arrays, whose size is a multiple of 180
            (the number of measured points in one capture).
            </summary>
        </member>
        <member name="F:STIL.LineSensor.AcquiredData._Altitudes">
            <summary>
            The altitudes of the measured points.
            </summary>
        </member>
        <member name="F:STIL.LineSensor.AcquiredData._Xpositions">
            <summary>
            The x positions of the measured points.
            </summary>
        </member>
        <member name="F:STIL.LineSensor.AcquiredData._Ypositions">
            <summary>
            The y positions of the measured points (for field sensor).
            </summary>
        </member>
        <member name="F:STIL.LineSensor.AcquiredData._Intensities">
            <summary>
            The light intensities of the measured points.
            </summary>
        </member>
        <member name="F:STIL.LineSensor.AcquiredData._Counter">
            <summary>
            The acquisition counter number of the measured points.
            </summary>
        </member>
        <member name="M:STIL.LineSensor.AcquiredData.#ctor(System.Double[],System.Double[],System.Double[],System.Double[],System.UInt16)">
            <summary>
            Constructor function. Initializes all the properties with the given arrays.
            </summary>
            <param name="altitudes">The altitudes of the measured points.</param>
            <param name="xPositions">The x positions of the measured points.</param>
            <param name="yPositions">The y positions of the measured points.</param>
            <param name="intensities">The light intensities of the measured points.</param>
            <param name="counter">The counter acquisition of the measured points</param>
        </member>
        <member name="M:STIL.LineSensor.AcquiredData.Dispose(System.Boolean)">
            <summary>
            Dispose
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:STIL.LineSensor.AcquiredData.Dispose">
            <summary>
            Dispose
            </summary>
        </member>
        <member name="P:STIL.LineSensor.AcquiredData.Altitudes">
            <summary>
            The altitudes of the measured points.
            </summary>
        </member>
        <member name="P:STIL.LineSensor.AcquiredData.Xpositions">
            <summary>
            The x positions of the measured points.
            </summary>
        </member>
        <member name="P:STIL.LineSensor.AcquiredData.Ypositions">
            <summary>
            The y positions of the measured points (for field sensor).
            </summary>
        </member>
        <member name="P:STIL.LineSensor.AcquiredData.Intensities">
            <summary>
            The light intensities of the measured points.
            </summary>
        </member>
        <member name="P:STIL.LineSensor.AcquiredData.Counter">
            <summary>
            The acquisition counter number of the measured points.
            </summary>
        </member>
        <member name="T:STIL.LineSensor.AcquiredDataEx">
            <summary>
            Encapsulates data retrieved from the line sensor device.
            The data is stored in arrays, whose size is a multiple of 180
            (the number of measured points in one capture).
            This extention adds RealtimeCounter and EncoderPosition datas
            </summary>
        </member>
        <member name="F:STIL.LineSensor.AcquiredDataEx._RealTimeCounter">
            <summary>
            The acquisition real time counter of the measured points.
            </summary>
        </member>
        <member name="F:STIL.LineSensor.AcquiredDataEx._EncoderPosition">
            <summary>
            The acquisition encoder of the measured points.
            </summary>
        </member>
        <member name="M:STIL.LineSensor.AcquiredDataEx.#ctor(System.Double[],System.Double[],System.Double[],System.Double[],System.UInt16,System.UInt32,System.UInt32)">
            <summary>
            Constructor function. Initializes all the properties with the given arrays.
            </summary>
            <param name="altitudes">The altitudes of the measured points.</param>
            <param name="xPositions">The x positions of the measured points.</param>
            <param name="yPositions">The y positions of the measured points.</param>
            <param name="intensities">The light intensities of the measured points.</param>
            <param name="counter">The counter acquisition of the measured points</param>
            <param name="realTimeCounter">The Realtime counter acquisition of the measured points</param>
            <param name="encoderPosition">The encoder position  of the measured points</param>
        </member>
        <member name="M:STIL.LineSensor.AcquiredDataEx.Dispose(System.Boolean)">
            <summary>
            Dispose
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:STIL.LineSensor.AcquiredDataEx.Dispose">
            <summary>
            Dispose
            </summary>
        </member>
        <member name="P:STIL.LineSensor.AcquiredDataEx.RealtimeCounter">
            <summary>
            The acquisition real time counter of the measured points.
            </summary>
        </member>
        <member name="P:STIL.LineSensor.AcquiredDataEx.EncoderPosition">
            <summary>
            The acquisition encoder of the measured points.
            </summary>
        </member>
        <member name="T:STIL.LineSensor.AcquiredThicknessData">
            <summary>
            Encapsulates data retrieved from the line sensor device.
            The data is stored in arrays, whose size is a multiple of 180
            (the number of measured points in one capture).
            This extention adds RealtimeCounter and EncoderPosition datas
            </summary>
        </member>
        <member name="F:STIL.LineSensor.AcquiredThicknessData._Thicknesses">
            <summary>
            The Thickness of the measured points.
            </summary>
        </member>
        <member name="F:STIL.LineSensor.AcquiredThicknessData._Altitudes2">
            <summary>
            The second altitudes  of the measured points.
            </summary>
        </member>
        <member name="F:STIL.LineSensor.AcquiredThicknessData._Intensities2">
            <summary>
            The second light intensities of the measured points.
            </summary>
        </member>
        <member name="M:STIL.LineSensor.AcquiredThicknessData.#ctor(System.Double[],System.Double[],System.Double[],System.Double[],System.Double[],System.Double[],System.Double[],System.UInt16,System.UInt32,System.UInt32)">
            <summary>
            Constructor function. Initializes all the properties with the given arrays.
            </summary>
            <param name="thickness">The thicknesses of the measured points.</param>
            <param name="altitudes1">The altitudes 1 of the measured points.</param>
            <param name="altitudes2">The altitudes 2 of the measured points.</param>
            <param name="xPositions">The x positions of the measured points.</param>
            <param name="yPositions">The y positions of the measured points.</param>
            <param name="intensities1">The light intensities 1 of the measured points.</param>
            <param name="intensities2">The light intensities 2 of the measured points.</param>
            <param name="counter">The counter acquisition of the measured points</param>
            <param name="realTimeCounter">The Realtime counter acquisition of the measured points</param>
            <param name="encoderPosition">The encoder position  of the measured points</param>
        </member>
        <member name="M:STIL.LineSensor.AcquiredThicknessData.Dispose(System.Boolean)">
            <summary>
            Dispose
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:STIL.LineSensor.AcquiredThicknessData.Dispose">
            <summary>
            Dispose
            </summary>
        </member>
        <member name="P:STIL.LineSensor.AcquiredThicknessData.Thicknesses">
            <summary>
            The Thickness of the measured points.
            </summary>
        </member>
        <member name="P:STIL.LineSensor.AcquiredThicknessData.Altitudes2">
            <summary>
            The second altitudes  of the measured points.
            </summary>
        </member>
        <member name="P:STIL.LineSensor.AcquiredThicknessData.Intensities2">
            <summary>
            The second light intensities of the measured points.
            </summary>
        </member>
        <member name="T:STIL.LineSensor.StringEnum">
            <summary>
            Helper class for working with 'extended' enums using "StringValue" attributes.
            </summary>
        </member>
        <member name="F:STIL.LineSensor.StringEnum.m_tEnumType">
            <summary>
            Type of enumeration
            </summary>
        </member>
        <member name="F:STIL.LineSensor.StringEnum.m_sStringValues">
            <summary>
            String value hash table
            </summary>
        </member>
        <member name="M:STIL.LineSensor.StringEnum.GetStringValue(System.String)">
            <summary>
            Gets the string value associated with the given enum value.
            </summary>
            <param name="valueName">Name of the enum value.</param>
            <returns>String Value</returns>
        </member>
        <member name="M:STIL.LineSensor.StringEnum.GetStringValues">
            <summary>
            Gets the string values associated with the enum.
            </summary>
            <returns>String value array</returns>
        </member>
        <member name="M:STIL.LineSensor.StringEnum.GetListValues">
            <summary>
            Gets the values as a 'bindable' list datasource.
            </summary>
            <returns>IList for data binding</returns>
        </member>
        <member name="M:STIL.LineSensor.StringEnum.IsStringDefined(System.String)">
            <summary>
            Return the existence of the given string value within the enum.
            </summary>
            <param name="stringValue">String value.</param>
            <returns>Existence of the string value</returns>
        </member>
        <member name="M:STIL.LineSensor.StringEnum.IsStringDefined(System.String,System.Boolean)">
            <summary>
            Return the existence of the given string value within the enum.
            </summary>
            <param name="stringValue">String value.</param>
            <param name="ignoreCase">Denotes whether to conduct a case-insensitive match on the supplied string value</param>
            <returns>Existence of the string value</returns>
        </member>
        <member name="M:STIL.LineSensor.StringEnum.GetStringValue(System.Enum)">
            <summary>
            Gets a string value for a particular enum value.
            </summary>
            <param name="value">Value.</param>
            <returns>String Value associated via a <see cref="T:STIL.LineSensor.StringValueAttribute"/> attribute, or null if not found.</returns>
        </member>
        <member name="M:STIL.LineSensor.StringEnum.Parse(System.Type,System.String)">
            <summary>
            Parses the supplied enum and string value to find an associated enum value (case sensitive).
            </summary>
            <param name="type">Type.</param>
            <param name="stringValue">String value.</param>
            <returns>Enum value associated with the string value, or null if not found.</returns>
        </member>
        <member name="M:STIL.LineSensor.StringEnum.TryParse(System.Type,System.String)">
            <summary>
            try to  Parses the supplied enum and string value to find an associated enum value (case sensitive).
            </summary>
            <param name="type">Type.</param>
            <param name="stringValue">String value.</param>
            <returns>Enum value associated with the string value, or null if not found.</returns>
        </member>
        <member name="M:STIL.LineSensor.StringEnum.TryParse(System.Type,System.String,System.Boolean)">
            <summary>
            try to  Parses the supplied enum and string value to find an associated enum value (case sensitive).
            </summary>
            <param name="type">Type.</param>
            <param name="stringValue">String value.</param>
            <param name="ignoreCase">Denotes whether to conduct a case-insensitive match on the supplied string value</param>
            <returns>Enum value associated with the string value, or null if not found.</returns>
        </member>
        <member name="M:STIL.LineSensor.StringEnum.Parse(System.Type,System.String,System.Boolean)">
            <summary>
            Parses the supplied enum and string value to find an associated enum value.
            </summary>
            <param name="type">Type.</param>
            <param name="stringValue">String value.</param>
            <param name="ignoreCase">Denotes whether to conduct a case-insensitive match on the supplied string value</param>
            <returns>Enum value associated with the string value, or null if not found.</returns>
        </member>
        <member name="M:STIL.LineSensor.StringEnum.IsStringDefined(System.Type,System.String)">
            <summary>
            Return the existence of the given string value within the enum.
            </summary>
            <param name="stringValue">String value.</param>
            <param name="enumType">Type of enum</param>
            <returns>Existence of the string value</returns>
        </member>
        <member name="M:STIL.LineSensor.StringEnum.IsStringDefined(System.Type,System.String,System.Boolean)">
            <summary>
            Return the existence of the given string value within the enum.
            </summary>
            <param name="stringValue">String value.</param>
            <param name="enumType">Type of enum</param>
            <param name="ignoreCase">Denotes whether to conduct a case-insensitive match on the supplied string value</param>
            <returns>Existence of the string value</returns>
        </member>
        <member name="M:STIL.LineSensor.StringEnum.#ctor(System.Type)">
            <summary>
            Constructor
            </summary>
            <param name="enumType">Enum type.</param>
        </member>
        <member name="P:STIL.LineSensor.StringEnum.EnumType">
            <summary>
            Gets the underlying enum type for this instance.
            </summary>
            <value></value>
        </member>
        <member name="T:STIL.LineSensor.StringValueAttribute">
            <summary>
            Simple attribute class for storing String Values
            </summary>
        </member>
        <member name="F:STIL.LineSensor.StringValueAttribute.m_sValue">
            <summary>
            String vlaue
            </summary>
        </member>
        <member name="M:STIL.LineSensor.StringValueAttribute.#ctor(System.String)">
            <summary>
            Creates a new "StringValue" instance.
            </summary>
            <param name="value">String value</param>
        </member>
        <member name="P:STIL.LineSensor.StringValueAttribute.Value">
            <summary>
            Gets the value.
            </summary>
            <value></value>
        </member>
        <member name="T:STIL.LineSensor.cCommon">
            <summary>function used inside more class.</summary>
        </member>
        <member name="M:STIL.LineSensor.cCommon.#ctor">
            <summary>Constructor</summary>
        </member>
        <member name="M:STIL.LineSensor.cCommon.CreateFloatArrayToIntPtr(System.Int32,System.Int32)">
            <summary>create double array to pointer</summary>
            <param name="number">number of buffer</param>
            <param name="length">length of each buffer</param>
            <returns>pointer</returns>
        </member>
        <member name="M:STIL.LineSensor.cCommon.ReleaseFloatArrayOfIntPtr(System.IntPtr@,System.Int32,System.Int32)">
            <summary>release double array to pointer</summary>
            <param name="ptrArray">pointer of double array</param>
            <param name="number">number of buffer</param>
            <param name="length">length of each buffer</param>
        </member>
        <member name="M:STIL.LineSensor.cCommon.GetFloatData(System.IntPtr,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>Get double data array to pointer</summary>
            <param name="ptrArray">pointer of double array</param>
            <param name="number">number of buffer</param>
            <param name="length">length of each buffer</param>
            <param name="bufferIndex">Index in 'C' array</param>
            <param name="bitsRate">Reference to bitsRate </param>
        </member>
        <member name="M:STIL.LineSensor.cCommon.IntPtrToFloatArray(System.IntPtr,System.Int32)">
            <summary>pointer array to double array</summary>
            <param name="ptrArray">pointer array</param>
            <param name="arraySize">size of array</param>
            <returns>double array</returns>
        </member>
        <member name="M:STIL.LineSensor.cCommon.FloatArrayToIntPtr(System.Double[]@,System.Int32)">
            <summary>double array to pointer array</summary>
            <param name="arrayFloat">double array</param>
            <param name="arraySize">size of array</param>
            <returns>pointer array</returns>
        </member>
        <member name="M:STIL.LineSensor.cCommon.StringArrayToIntPtr(System.Int32)">
            <summary>string array to pointer array</summary>
            <param name="iSize">size of array</param>
            <returns>pointer array</returns>
        </member>
        <member name="M:STIL.LineSensor.cCommon.IntPtrToStringArray(System.IntPtr,System.Int32)">
            <summary>pointer array to string array</summary>
            <param name="size">size of array</param>
            <param name="ptr">pointer of array</param>
            <returns>string array</returns>
        </member>
        <member name="M:STIL.LineSensor.cCommon.FloatArrayToIntPtr(System.Double[]@,System.Int32,System.Int32)">
            <summary>double array to pointer array</summary>
            <param name="arrayFloat">double array</param>
            <param name="number">number of buffer</param>
            <param name="length">length of each buffer</param>
            <returns>pointer array</returns>
        </member>
        <member name="M:STIL.LineSensor.cCommon.CreateShortArrayToIntPtr(System.Int32,System.Int32)">
            <summary>create short array to pointer</summary>
            <param name="number">number of buffer</param>
            <param name="length">length of each buffer</param>
            <returns>pointer</returns>
        </member>
        <member name="M:STIL.LineSensor.cCommon.ShortArrayToIntPtr(System.Int16[]@,System.Int32,System.Int32)">
            <summary>short array to pointer array</summary>
            <param name="arrayShort">short array</param>
            <param name="number">number of buffer</param>
            <param name="length">length of each buffer</param>
            <returns>pointer array</returns>
        </member>
        <member name="M:STIL.LineSensor.cCommon.ShortArrayToIntPtr(System.Int16[]@,System.Int32)">
            <summary>short array to pointer array</summary>
            <param name="arrayShort">short array</param>
            <param name="arraySize">size of array</param>
            <returns>pointer array</returns>
        </member>
        <member name="M:STIL.LineSensor.cCommon.ReleaseShortArrayOfIntPtr(System.IntPtr@,System.Int32,System.Int32)">
            <summary>release short array to pointer</summary>
            <param name="ptrArray">unmanaged pointer of short data </param>
            <param name="number">number of buffer</param>
            <param name="length">length of each buffer</param>
        </member>
        <member name="M:STIL.LineSensor.cCommon.GetShortData(System.IntPtr,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>Get short data array to pointer</summary>
            <param name="ptrArray">pointer of double array</param>
            <param name="number">number of buffer</param>
            <param name="length">length of each buffer</param>
            <param name="bufferIndex">Index in 'C' array</param>
            <param name="bitsRate">Reference to bitsRate </param>
        </member>
        <member name="M:STIL.LineSensor.cCommon.IntPtrToShortArray(System.IntPtr,System.Int32)">
            <summary>pointer array to double array</summary>
            <param name="ptrArray">pointer array</param>
            <param name="arraySize">size of array</param>
            <returns>double array</returns>
        </member>
        <member name="T:LineSensorDotNet.Peak">
            <summary>
            the position of peak to detect.
            </summary>
        </member>
        <member name="F:LineSensorDotNet.Peak.PEAK1">
            <summary>Peak 1</summary>
        </member>
        <member name="F:LineSensorDotNet.Peak.PEAK2">
            <summary>Peak 2</summary>
        </member>
        <member name="F:LineSensorDotNet.Peak.MAX_PEAK_NUMBER">
            <summary>MAX peak number</summary>
        </member>
        <member name="T:LineSensorDotNet.CSensorConstantsEnumDefinition">
            <summary>
            Constantes et ENUM génériques
            </summary>
        </member>
        <member name="F:LineSensorDotNet.CSensorConstantsEnumDefinition.SENSOR_CONFIG_DIRECTORY">
            <summary>
            Localization (directory) of config file
            </summary>
        </member>
        <member name="F:LineSensorDotNet.CSensorConstantsEnumDefinition.SENSOR_CONFIG_FILE_NAME">
            <summary>
            Config file name
            </summary>
        </member>
        <member name="F:LineSensorDotNet.CSensorConstantsEnumDefinition.SENSOR_DATA_FIFO_MAX_SIZE">
            <summary>
            Sensor data acquisition FIFO max size
            </summary>
        </member>
        <member name="F:LineSensorDotNet.CSensorConstantsEnumDefinition.SENSOR_LIVE_DISPLAY_DEFAULT_REFRESH_RATE">
            <summary>
            Default refresh rate for sensor data acquisition Live Display
            </summary>
        </member>
        <member name="F:LineSensorDotNet.CSensorConstantsEnumDefinition.SENSOR_MAX_NUMBER_OF_PEAK">
            <summary>
            Sensor max number of peak
            </summary>
        </member>
        <member name="T:LineSensorDotNet.CSensorConstantsEnumDefinition.E_SENSOR_CONTROLLER">
            <summary>
            Sensor Controller used on the current application
            </summary>
        </member>
        <member name="F:LineSensorDotNet.CSensorConstantsEnumDefinition.E_SENSOR_CONTROLLER.Undefined">
            <summary>non specified controller</summary>
        </member>
        <member name="F:LineSensorDotNet.CSensorConstantsEnumDefinition.E_SENSOR_CONTROLLER.MPLS_180">
            <summary>MPLS-180 controller</summary>
        </member>
        <member name="F:LineSensorDotNet.CSensorConstantsEnumDefinition.E_SENSOR_CONTROLLER.MPLS_DM">
            <summary>MPLS-DM controller</summary>
        </member>
        <member name="T:LineSensorDotNet.CSensorConstantsEnumDefinition.E_SENSOR_TRIGGER_MODE">
            <summary>
            Enumerator for Trigger Modes (Start_On_Rising_Edge, Start_On_Soft_Trig, Burst_On_Rising_Edge...)
            </summary>
        </member>
        <member name="F:LineSensorDotNet.CSensorConstantsEnumDefinition.E_SENSOR_TRIGGER_MODE.No_Trigger">
            <summary>
            no trig
            </summary>
        </member>
        <member name="F:LineSensorDotNet.CSensorConstantsEnumDefinition.E_SENSOR_TRIGGER_MODE.Start_On_Rising_Edge">
            <summary>
            start trig on rising edge
            </summary>
        </member>
        <member name="F:LineSensorDotNet.CSensorConstantsEnumDefinition.E_SENSOR_TRIGGER_MODE.Start_On_Falling_Edge">
            <summary>
            start trig on falling edge
            </summary>
        </member>
        <member name="F:LineSensorDotNet.CSensorConstantsEnumDefinition.E_SENSOR_TRIGGER_MODE.Start_On_Soft_Trig">
            <summary>
            software trig
            </summary>
        </member>
        <member name="F:LineSensorDotNet.CSensorConstantsEnumDefinition.E_SENSOR_TRIGGER_MODE.Burst_On_Rising_Edge">
            <summary>
            burst trig on rising edge
            </summary>
        </member>
        <member name="F:LineSensorDotNet.CSensorConstantsEnumDefinition.E_SENSOR_TRIGGER_MODE.Burst_On_Falling_Edge">
            <summary>
            burst trig on falling edge
            </summary>
        </member>
        <member name="F:LineSensorDotNet.CSensorConstantsEnumDefinition.E_SENSOR_TRIGGER_MODE.Burst_On_Soft_Trig">
            <summary>
            software burst trig
            </summary>
        </member>
        <member name="F:LineSensorDotNet.CSensorConstantsEnumDefinition.E_SENSOR_TRIGGER_MODE.Stopped">
            <summary>
            stop trig
            </summary>
        </member>
        <member name="T:LineSensorDotNet.CSensorConstantsEnumDefinition.E_SENSOR_CONNECTION_TYPE">
            <summary>
            Enumerator for Sensor Connection type (USB, simulation)
            </summary>
        </member>
        <member name="F:LineSensorDotNet.CSensorConstantsEnumDefinition.E_SENSOR_CONNECTION_TYPE.Undefined">
            <summary>
            undefined connection 
            </summary>
        </member>
        <member name="F:LineSensorDotNet.CSensorConstantsEnumDefinition.E_SENSOR_CONNECTION_TYPE.USB">
            <summary>
            USB connection (MPLS-180)
            </summary>
        </member>
        <member name="F:LineSensorDotNet.CSensorConstantsEnumDefinition.E_SENSOR_CONNECTION_TYPE.GigE">
            <summary>
            GigaBit Ethernet (MPLS-DM)
            </summary>
        </member>
        <member name="F:LineSensorDotNet.CSensorConstantsEnumDefinition.E_SENSOR_CONNECTION_TYPE.Simulation">
            <summary>
            simulation
            </summary>
        </member>
        <member name="T:LineSensorDotNet.CSensorConstantsEnumDefinition.E_SENSOR_STATE">
            <summary>
            Sensor status (initialized, started, stoppped...)
            </summary>
        </member>
        <member name="F:LineSensorDotNet.CSensorConstantsEnumDefinition.E_SENSOR_STATE.Disconnected">
            <summary>undefined state (not connected)</summary>
        </member>
        <member name="F:LineSensorDotNet.CSensorConstantsEnumDefinition.E_SENSOR_STATE.Initialized">
            <summary>sensor is initialized</summary>
        </member>
        <member name="F:LineSensorDotNet.CSensorConstantsEnumDefinition.E_SENSOR_STATE.Ready">
            <summary>sensor is ready (to start acquisition)</summary>
        </member>
        <member name="F:LineSensorDotNet.CSensorConstantsEnumDefinition.E_SENSOR_STATE.AcquisitionInProcess">
            <summary>acquisition started</summary>
        </member>
        <member name="T:LineSensorDotNet.CSensorParameters">
            <summary>
            Sensor parameters - mapping of parameters saved in .INI file
            </summary>
        </member>
        <member name="F:LineSensorDotNet.CSensorParameters._bFirstPeak">
            <summary>enable/disable "FirstPeak" mode</summary>
        </member>
        <member name="F:LineSensorDotNet.CSensorParameters._bRawIntensity">
            <summary>enable/disable "raw intensity" mode</summary>
        </member>
        <member name="F:LineSensorDotNet.CSensorParameters._bWhiteRefFirmware">
            <summary>enable/disable "White-Ref firmware" mode</summary>
        </member>
        <member name="F:LineSensorDotNet.CSensorParameters._bWhiteRefNormalization">
            <summary>enable/disable "White-Ref normalization" mode</summary>
        </member>
        <member name="F:LineSensorDotNet.CSensorParameters._bThermalCorrection">
            <summary>enable/disable "Thermal correction" mode</summary>
        </member>
        <member name="F:LineSensorDotNet.CSensorParameters._bIntensityNormalization">
            <summary>enable/disable "Intensity normalization" mode</summary>
        </member>
        <member name="F:LineSensorDotNet.CSensorParameters._dblExposureTime">
            <summary>exposure time (in µs)</summary>
        </member>
        <member name="F:LineSensorDotNet.CSensorParameters._iLED_Brightness">
            <summary>LED brightness (%)</summary>
        </member>
        <member name="F:LineSensorDotNet.CSensorParameters._iNumberPeak">
            <summary>Number of Peak</summary>
        </member>
        <member name="F:LineSensorDotNet.CSensorParameters._enTypePeak">
            <summary>Type of Peaks</summary>
        </member>
        <member name="F:LineSensorDotNet.CSensorParameters._enMeasurementType">
            <summary>Number of Peak</summary>
        </member>
        <member name="F:LineSensorDotNet.CSensorParameters._dblDetectionThreshold">
            <summary>detection threshold (.01 %)</summary>
        </member>
        <member name="F:LineSensorDotNet.CSensorParameters._dblValleyToPeakRatio">
            <summary>Valley-to-Peak ratio (from 0.8% to 0.95%)</summary>
        </member>
        <member name="F:LineSensorDotNet.CSensorParameters._iNbTriggerPoints">
            <summary>nb points per trigger pulse</summary>
        </member>
        <member name="F:LineSensorDotNet.CSensorParameters._eTriggerMode">
            <summary>Trigger mode</summary>
        </member>
        <member name="M:LineSensorDotNet.CSensorParameters.#ctor">
            <summary>
            default constructor
            </summary>
        </member>
        <member name="P:LineSensorDotNet.CSensorParameters.bFirstPeak">
            <summary>enable/disable "FirstPeak" mode</summary>
        </member>
        <member name="P:LineSensorDotNet.CSensorParameters.bRawIntensity">
            <summary>enable/disable "raw intensity" mode</summary>
        </member>
        <member name="P:LineSensorDotNet.CSensorParameters.bWhiteRefFirmware">
            <summary>enable/disable "White-Ref firmware" mode</summary>
        </member>
        <member name="P:LineSensorDotNet.CSensorParameters.bWhiteRefNormalization">
            <summary>enable/disable "White-Ref normalization" mode</summary>
        </member>
        <member name="P:LineSensorDotNet.CSensorParameters.bThermalCorrection">
            <summary>enable/disable "Thermal correction" mode</summary>
        </member>
        <member name="P:LineSensorDotNet.CSensorParameters.bIntensityNormalization">
            <summary>enable/disable "Intensity normalization" mode</summary>
        </member>
        <member name="P:LineSensorDotNet.CSensorParameters.dblExposureTime">
            <summary>exposure time (in µs)</summary>
        </member>
        <member name="P:LineSensorDotNet.CSensorParameters.iLED_Brightness">
            <summary>LED brightness (%)</summary>
        </member>
        <member name="P:LineSensorDotNet.CSensorParameters.iNumberPeak">
            <summary>Number of Peak</summary>
        </member>
        <member name="P:LineSensorDotNet.CSensorParameters.enTypePeaks">
            <summary>Type of Peaks</summary>
        </member>
        <member name="P:LineSensorDotNet.CSensorParameters.enTypePeak1">
            <summary>Type of Peak1</summary>
        </member>
        <member name="P:LineSensorDotNet.CSensorParameters.enTypePeak2">
            <summary>Type of Peak2</summary>
        </member>
        <member name="P:LineSensorDotNet.CSensorParameters.enMeasurementType">
            <summary>Number of Peak</summary>
        </member>
        <member name="P:LineSensorDotNet.CSensorParameters.enSensorVersion">
            <summary>Number of Peak</summary>
        </member>
        <member name="P:LineSensorDotNet.CSensorParameters.dblDetectionThreshold">
            <summary>detection threshold (from 0 to 4095)</summary>
        </member>
        <member name="P:LineSensorDotNet.CSensorParameters.dblValleyToPeakRatio">
            <summary>Valley-to-Peak ratio (from 0.8% to 0.95%)</summary>
        </member>
        <member name="P:LineSensorDotNet.CSensorParameters.iNbTriggerPoints">
            <summary>nb points per trigger pulse</summary>
        </member>
        <member name="P:LineSensorDotNet.CSensorParameters.eTriggerMode">
            <summary>Trigger mode</summary>
        </member>
        <member name="P:LineSensorDotNet.CSensorParameters.iNbFiber">
            <summary>Number of fiber</summary>
        </member>
        <member name="T:LineSensorDotNet.CSensorDefinition">
            <summary>
            Global sensor application definition
            </summary>
        </member>
        <member name="F:LineSensorDotNet.CSensorDefinition._eConnectionType">
            <summary>connection type (USB, simulation)</summary>
        </member>
        <member name="F:LineSensorDotNet.CSensorDefinition._strConnectionParam">
            <summary>connection parameter</summary>
        </member>
        <member name="F:LineSensorDotNet.CSensorDefinition._strConfigurationFilePath">
            <summary>configuration file path</summary>
        </member>
        <member name="F:LineSensorDotNet.CSensorDefinition._strConfigurationFileName">
            <summary>configuration file name</summary>
        </member>
        <member name="F:LineSensorDotNet.CSensorDefinition.m_LastError">
            <summary>Last error occured on class</summary>
        </member>
        <member name="M:LineSensorDotNet.CSensorDefinition.#ctor">
            <summary>
            default constructor
            </summary>
        </member>
        <member name="M:LineSensorDotNet.CSensorDefinition.Save(System.String)">
            <summary>
            serialization - save class in xml file
            </summary>
            <param name="sAppPath">save file location (root directory)</param>
            <returns>true if save is ok, false if failed</returns>
        </member>
        <member name="M:LineSensorDotNet.CSensorDefinition.Load(System.String,LineSensorDotNet.CSensorDefinition@)">
            <summary>
            serialization - load class from xml file
            </summary>
            <param name="strAppPath">file location (root directory)</param>
            <param name="_cSensor">class container</param>
            <returns>true if load ok, false if failed</returns>
        </member>
        <member name="P:LineSensorDotNet.CSensorDefinition.eConnectionType">
            <summary>connection type (USB, simulation)</summary>
        </member>
        <member name="P:LineSensorDotNet.CSensorDefinition.strConnectionParam">
            <summary>connection parameter</summary>
        </member>
        <member name="P:LineSensorDotNet.CSensorDefinition.strConfigurationFilePath">
            <summary>sensor configuration file path</summary>
        </member>
        <member name="P:LineSensorDotNet.CSensorDefinition.strConfigurationFileName">
            <summary>sensor configuration file name (.INI)</summary>
        </member>
        <member name="T:LineSensorDotNet.SensorDataAcquisition">
            <summary>
            Sensor Data acquisition class
            </summary>
        </member>
        <member name="M:LineSensorDotNet.SensorDataAcquisition.Dispose(System.Boolean)">
            <summary>
            Dispose
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:LineSensorDotNet.SensorDataAcquisition.Dispose">
            <summary>
            Dispose
            </summary>
        </member>
        <member name="M:LineSensorDotNet.SensorDataAcquisition.#ctor(System.Int32,System.UInt32)">
            <summary>
            Constructor
            </summary>
            <param name="sizeFIFO">number of data records stored on the FIFO</param>
            <param name="iFiberNbr">data record size</param>
        </member>
        <member name="M:LineSensorDotNet.SensorDataAcquisition.ResetData(System.UInt32)">
            <summary>
            FIFO cleanup
            </summary>
            <param name="iFiberNbr">data record size</param>
        </member>
        <member name="M:LineSensorDotNet.SensorDataAcquisition.Add(STIL.LineSensor.AcquiredData,System.Int32)">
            <summary>
            Add new record in FIFO
            </summary>
            <param name="_acquiredData">data record to store</param>
            <param name="iBuffSize">buffer size of data record to store</param>
        </member>
        <member name="T:LineSensorDotNet.cTimeMeasurement">
            <summary>
            Class that can measure time in seconds, milliseconds or micro seconds.
            </summary>
        </member>
        <member name="M:LineSensorDotNet.cTimeMeasurement.QueryPerformanceFrequency(System.Int64@)">
            <summary>
            request the frequency performance counter.
            </summary>
            <param name="lpFrequency">Frequency performance counter.</param>
            <returns>Frequency performance counter value</returns>
        </member>
        <member name="M:LineSensorDotNet.cTimeMeasurement.QueryPerformanceCounter(System.Int64@)">
            <summary>
            request the performance counter.
            </summary>
            <param name="lpPerformanceCount">Performance counter.</param>
            <returns>Performance counter value</returns>       
        </member>
        <member name="M:LineSensorDotNet.cTimeMeasurement.#ctor">
            <summary>
            constructor
            </summary>
        </member>
        <member name="M:LineSensorDotNet.cTimeMeasurement.#ctor(LineSensorDotNet.cTimeMeasurement.enTimeStepType)">
            <summary>
            constructor
            </summary>
            <param name="value">Type of step time value</param>
        </member>
        <member name="M:LineSensorDotNet.cTimeMeasurement.Clear">
            <summary>
            Clear current value (Reset time measurement)
            </summary>
        </member>
        <member name="M:LineSensorDotNet.cTimeMeasurement.Start">
            <summary>Function to make a start measurement</summary>
        </member>
        <member name="M:LineSensorDotNet.cTimeMeasurement.Pause">
            <summary>Function to make a pause measurement</summary>
        </member>
        <member name="M:LineSensorDotNet.cTimeMeasurement.Restart">
            <summary>Function to make a restart measurement</summary>
        </member>
        <member name="M:LineSensorDotNet.cTimeMeasurement.Stop">
            <summary>Function to make a stop measurement</summary>
        </member>
        <member name="P:LineSensorDotNet.cTimeMeasurement.TimeStepType">
            <summary>Property to select time step type.</summary>
        </member>
        <member name="P:LineSensorDotNet.cTimeMeasurement.CurrentTiming">
            <summary>Function that returns the current value of time.</summary>
        </member>
        <member name="P:LineSensorDotNet.cTimeMeasurement.FlashTiming">
            <summary>Function that returns the flash value of time.</summary>
        </member>
        <member name="T:LineSensorDotNet.cTimeMeasurement.enTimeStepType">
            <summary>time type</summary>
        </member>
        <member name="F:LineSensorDotNet.cTimeMeasurement.enTimeStepType.SECONDE">
            <summary>time step second</summary>
        </member>
        <member name="F:LineSensorDotNet.cTimeMeasurement.enTimeStepType.MILLISECOND">
            <summary>time step millisecond</summary>
        </member>
        <member name="F:LineSensorDotNet.cTimeMeasurement.enTimeStepType.MICROSECOND">
            <summary>time step microsecond</summary>
        </member>
        <member name="T:LineSensorDotNet.SensorStatusChangeEventArgs">
            <summary>
            Sensor status event parameters defintion
            </summary>
        </member>
        <member name="F:LineSensorDotNet.SensorStatusChangeEventArgs.eState">
            <summary>new sensor status</summary>
        </member>
        <member name="T:LineSensorDotNet.SensorStatusChangeEventHandler">
            <summary>
            delegate for sensor state event message notification
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:LineSensorDotNet.SensorMeasureModeChangeEventArgs">
            <summary>
            Sensor status event parameters defintion
            </summary>
        </member>
        <member name="F:LineSensorDotNet.SensorMeasureModeChangeEventArgs.eTypeMeasurement">
            <summary>new sensor status</summary>
        </member>
        <member name="T:LineSensorDotNet.SensorMeasureModeChangeEventHandler">
            <summary>
            delegate for sensor state event message notification
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:LineSensorDotNet.SensorGetMeasureEventArgs">
            <summary>
            Sensor get measure event parameters definition
            </summary>
        </member>
        <member name="F:LineSensorDotNet.SensorGetMeasureEventArgs.dblDistance">
            <summary>distance (altitude) values</summary>
        </member>
        <member name="F:LineSensorDotNet.SensorGetMeasureEventArgs.dblIntensity">
            <summary>intensity values</summary>
        </member>
        <member name="F:LineSensorDotNet.SensorGetMeasureEventArgs.iCounter">
            <summary>measures counter</summary>
        </member>
        <member name="F:LineSensorDotNet.SensorGetMeasureEventArgs.dblDelay">
            <summary>delay (in ms) elapsed since the previous measure</summary>
        </member>
        <member name="F:LineSensorDotNet.SensorGetMeasureEventArgs.iFiberNumber">
            <summary>
            sensor fibers number (size of 1 measure line)
            </summary>
        </member>
        <member name="F:LineSensorDotNet.SensorGetMeasureEventArgs.iInternalCounter">
            <summary>
            internal counter
            </summary>
        </member>
        <member name="F:LineSensorDotNet.SensorGetMeasureEventArgs.listAcquireData">
            <summary>
            all data 
            </summary>
        </member>
        <member name="T:LineSensorDotNet.SensorGetMeasureExEventArgs">
            <summary>
            Sensor get measure extended event parameters definition
            </summary>
        </member>
        <member name="F:LineSensorDotNet.SensorGetMeasureExEventArgs.dblDistance">
            <summary>distance (altitude) values</summary>
        </member>
        <member name="F:LineSensorDotNet.SensorGetMeasureExEventArgs.dblIntensity">
            <summary>intensity values</summary>
        </member>
        <member name="F:LineSensorDotNet.SensorGetMeasureExEventArgs.iCounter">
            <summary>measures counter</summary>
        </member>
        <member name="F:LineSensorDotNet.SensorGetMeasureExEventArgs.iRtCounter">
            <summary>measures real time counter</summary>
        </member>
        <member name="F:LineSensorDotNet.SensorGetMeasureExEventArgs.iEncoder">
            <summary>measures encoder</summary>
        </member>
        <member name="F:LineSensorDotNet.SensorGetMeasureExEventArgs.dblDelay">
            <summary>delay (in ms) elapsed since the previous measure</summary>
        </member>
        <member name="F:LineSensorDotNet.SensorGetMeasureExEventArgs.iFiberNumber">
            <summary>
            sensor fibers number (size of 1 measure line)
            </summary>
        </member>
        <member name="F:LineSensorDotNet.SensorGetMeasureExEventArgs.iInternalCounter">
            <summary>
            internal counter
            </summary>
        </member>
        <member name="F:LineSensorDotNet.SensorGetMeasureExEventArgs.listAcquireDataEx">
            <summary>
            all data 
            </summary>
        </member>
        <member name="T:LineSensorDotNet.SensorGetThicknessMeasureEventArgs">
            <summary>
            Sensor get thickness measure event parameters definition
            </summary>
        </member>
        <member name="F:LineSensorDotNet.SensorGetThicknessMeasureEventArgs.dblThickness">
            <summary>thickness values</summary>
        </member>
        <member name="F:LineSensorDotNet.SensorGetThicknessMeasureEventArgs.dblDistance1">
            <summary>distance1 (altitude1) values</summary>
        </member>
        <member name="F:LineSensorDotNet.SensorGetThicknessMeasureEventArgs.dblDistance2">
            <summary>distance2 (altitude2) values</summary>
        </member>
        <member name="F:LineSensorDotNet.SensorGetThicknessMeasureEventArgs.dblIntensity1">
            <summary>intensity1 values</summary>
        </member>
        <member name="F:LineSensorDotNet.SensorGetThicknessMeasureEventArgs.dblIntensity2">
            <summary>intensity2 values</summary>
        </member>
        <member name="F:LineSensorDotNet.SensorGetThicknessMeasureEventArgs.iCounter">
            <summary>measures counter</summary>
        </member>
        <member name="F:LineSensorDotNet.SensorGetThicknessMeasureEventArgs.iRtCounter">
            <summary>measures real time counter</summary>
        </member>
        <member name="F:LineSensorDotNet.SensorGetThicknessMeasureEventArgs.iEncoder">
            <summary>measures encoder</summary>
        </member>
        <member name="F:LineSensorDotNet.SensorGetThicknessMeasureEventArgs.dblDelay">
            <summary>delay (in ms) elapsed since the previous measure</summary>
        </member>
        <member name="F:LineSensorDotNet.SensorGetThicknessMeasureEventArgs.iFiberNumber">
            <summary>
            sensor fibers number (size of 1 measure line)
            </summary>
        </member>
        <member name="F:LineSensorDotNet.SensorGetThicknessMeasureEventArgs.iInternalCounter">
            <summary>
            internal counter
            </summary>
        </member>
        <member name="F:LineSensorDotNet.SensorGetThicknessMeasureEventArgs.listAcquireThicknessData">
            <summary>
            all data 
            </summary>
        </member>
        <member name="T:LineSensorDotNet.SensorGetMeasureEventHandler">
            <summary>
            delegate for sensor get measure event notification
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:LineSensorDotNet.SensorGetEndMeasureEventHandler">
            <summary>
            delegate for sensor get end measure event notification
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:LineSensorDotNet.SensorGetMeasureExEventHandler">
            <summary>
            delegate for sensor get measure event notification
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:LineSensorDotNet.SensorGetEndMeasureExEventHandler">
            <summary>
            delegate for sensor get end measure event notification
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:LineSensorDotNet.SensorGetThicknessMeasureEventHandler">
            <summary>
            delegate for sensor get measure event notification
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:LineSensorDotNet.SensorGetEndThicknessMeasureEventHandler">
            <summary>
            delegate for sensor get end measure event notification
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:LineSensorDotNet.SensorMessageEventArgs">
            <summary>
            Sensor message event parameters definition
            </summary>
        </member>
        <member name="F:LineSensorDotNet.SensorMessageEventArgs.strMessage">
            <summary>message content</summary>
        </member>
        <member name="T:LineSensorDotNet.SensorMessageEventHandler">
            <summary>
            delegate for sensor message event notification
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:LineSensorDotNet.SensorFrequencyChangeEventHandler">
            <summary>
            delegate for sensor frequency change event notification
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:LineSensorDotNet.SensorFrequencyChangeEventArgs">
            <summary>
            Sensor frequency change event parameters definition
            </summary>
        </member>
        <member name="F:LineSensorDotNet.SensorFrequencyChangeEventArgs.Frame">
            <summary>Sensor frequency change content</summary>
        </member>
        <member name="T:LineSensorDotNet.CSensorInterface">
            <summary>
            class SensorInterface 
            <para>- Sensor Interface class</para>
            <para>- Allows communication between SensorManager and different sensors type available on a system (MPLS-180, MPLS-DM)</para>
            <para>- communication with MPLS-180 / MPLS-DM controllers</para>
            <para>- connected with UserControls:</para>
            <para>    - CommonSensorSetup (application/sensor setting)</para> 
            <para>    - CommonSensorQuickSetup (sensor connexion)</para>
            <para>    - Role: Gateway between UserControl and SensorManager</para>
            </summary>
        </member>
        <member name="M:LineSensorDotNet.ISensorInterfaceInterface.connectInterface(LineSensorDotNet.CSensorManager,LineSensorDotNet.CSensorConstantsEnumDefinition.E_SENSOR_CONTROLLER,System.Boolean)">
            <summary>
            creates communication channel with specified sensor type controller
            </summary>
            <param name="_sensorMgr">parent SensorManager (callback)</param>
            <param name="_sensorCtrl">sensor type controller</param>
            <param name="_bConnect">true: initialize sensor - false: just open connection, no sensor initialization</param>
            <returns>true if connection ok, false if failed</returns>
        </member>
        <member name="M:LineSensorDotNet.ISensorInterfaceInterface.registerCommonSensorSetupUserControl(LineSensorDotNet.CommonSensorSetupUserControl)">
            <summary>
            Connecte le CommonSensorSetupUserControl au SensorInterface 
            </summary>
            <param name="_setupUserControl">CommonSensorSetup UserControl</param>
        </member>
        <member name="F:LineSensorDotNet.CSensorInterface.m_SensorManager">
            <summary>
            callback connection with parent Manager
            </summary>
        </member>
        <member name="F:LineSensorDotNet.CSensorInterface.m_eCurrentCulture">
            <summary>
            Current language used on application
            </summary>
        </member>
        <member name="F:LineSensorDotNet.CSensorInterface.m_ucQuickSetup">
            <summary>
            Connection with QuickSetup UserControl
            </summary>
        </member>
        <member name="F:LineSensorDotNet.CSensorInterface.m_ucSetup">
            <summary>
            Connection with Setup UserControl
            </summary>
        </member>
        <member name="F:LineSensorDotNet.CSensorInterface.m_eConnectionType">
            <summary>
            Current connection type (USB, simulation)
            </summary>
        </member>
        <member name="F:LineSensorDotNet.CSensorInterface.m_LineSensorDevice">
            <summary>
            Device identifier
            </summary>
        </member>
        <member name="F:LineSensorDotNet.CSensorInterface.m_CurrentSensorDefinition">
            <summary>
            Current sensor definition
            </summary>
        </member>
        <member name="F:LineSensorDotNet.CSensorInterface.m_CurrentSensorParameters">
            <summary>
            Current sensor parameters
            </summary>
        </member>
        <member name="F:LineSensorDotNet.CSensorInterface.m_CurrentLineSensorParams">
            <summary>
            Current LineSensor configuration
            </summary>
        </member>
        <member name="F:LineSensorDotNet.CSensorInterface.m_acqLogData">
            <summary>
            Acquired data
            </summary>
        </member>
        <member name="F:LineSensorDotNet.CSensorInterface.m_acqLogDataEx">
            <summary>
            Acquired data
            </summary>
        </member>
        <member name="F:LineSensorDotNet.CSensorInterface.m_acqLogThicknessData">
            <summary>
            Acquired thickness data
            </summary>
        </member>
        <member name="F:LineSensorDotNet.CSensorInterface.m_iLogDataCounter">
            <summary>
            Data counter
            </summary>
        </member>
        <member name="F:LineSensorDotNet.CSensorInterface.m_bSensorConnected">
            <summary>
            Is sensor connected
            </summary>
        </member>
        <member name="F:LineSensorDotNet.CSensorInterface.m_bLogAcquisitionData">
            <summary>
            true: save acquisition data in file
            </summary>
        </member>
        <member name="F:LineSensorDotNet.CSensorInterface.m_bFullLogAcquisitionData">
            <summary>
            IS full data log required
            </summary>
        </member>
        <member name="F:LineSensorDotNet.CSensorInterface.m_iNbRejectedMeasures">
            <summary>
            Number of measures rejected
            </summary>
        </member>
        <member name="F:LineSensorDotNet.CSensorInterface.m_iNbMeasuresToProcess">
            <summary>
            Number of measures to do
            </summary>
        </member>
        <member name="F:LineSensorDotNet.CSensorInterface.m_iMeasuresCounter">
            <summary>
            Measure counter
            </summary>
        </member>
        <member name="F:LineSensorDotNet.CSensorInterface.m_LastError">
            <summary>
            Last error
            </summary>
        </member>
        <member name="F:LineSensorDotNet.CSensorInterface.m_iDurationMeasuresCounter">
            <summary>
            Measure duration
            </summary>
        </member>
        <member name="F:LineSensorDotNet.CSensorInterface.m_iDuration">
            <summary>
            Counter
            </summary>
        </member>
        <member name="F:LineSensorDotNet.CSensorInterface.m_iTimeInterval">
            <summary>
            Interval between mesures
            </summary>
        </member>
        <member name="F:LineSensorDotNet.CSensorInterface.m_fsThk">
            <summary>
            Stream writer altitude
            </summary>
        </member>
        <member name="F:LineSensorDotNet.CSensorInterface.m_fsAlt2">
            <summary>
            Stream writer altitude
            </summary>
        </member>
        <member name="F:LineSensorDotNet.CSensorInterface.m_fsInt2">
            <summary>
            Stream writer intensity
            </summary>
        </member>
        <member name="F:LineSensorDotNet.CSensorInterface.m_fsAlt">
            <summary>
            Stream writer altitude
            </summary>
        </member>
        <member name="F:LineSensorDotNet.CSensorInterface.m_fsInt">
            <summary>
            Stream writer intensity
            </summary>
        </member>
        <member name="F:LineSensorDotNet.CSensorInterface.m_fsY">
            <summary>
            Stream writer position
            </summary>
        </member>
        <member name="F:LineSensorDotNet.CSensorInterface.m_fsX">
            <summary>
            Stream writer position
            </summary>
        </member>
        <member name="F:LineSensorDotNet.CSensorInterface.m_fsCnt">
            <summary>
            Stream writer altitude
            </summary>
        </member>
        <member name="F:LineSensorDotNet.CSensorInterface.m_fsRTC">
            <summary>
            Stream writer intensity
            </summary>
        </member>
        <member name="F:LineSensorDotNet.CSensorInterface.m_fsEnc">
            <summary>
            Stream writer position
            </summary>
        </member>
        <member name="F:LineSensorDotNet.CSensorInterface.m_AcquisitionThread">
            <summary>
            Acquisition thread
            </summary>
        </member>
        <member name="F:LineSensorDotNet.CSensorInterface.m_AcquisitionThreadRunning">
            <summary>
            Is acquisition thread running
            </summary>
        </member>
        <member name="F:LineSensorDotNet.CSensorInterface.m_evtSensorAcquisitionExitThread">
            <summary>
            Events sensor acquisition thread
            </summary>
        </member>
        <member name="M:LineSensorDotNet.CSensorInterface.AquisitionRepetitiveLineThread">
            <summary>
            Acquisition in repetitive line mode
            </summary>
        </member>
        <member name="M:LineSensorDotNet.CSensorInterface.AquisitionRealTimeThread">
            <summary>
            Acquisition in real time line mode
            </summary>
        </member>
        <member name="M:LineSensorDotNet.CSensorInterface.AcquisitionMeasureThread">
            <summary>
            Acquisition in measure mode
            </summary>
        </member>
        <member name="M:LineSensorDotNet.CSensorInterface.OnSensorDefinitionChange(LineSensorDotNet.CSensorDefinition,LineSensorDotNet.CSensorParameters)">
            <summary>
            Sensor definition change event notification 
                => send notification to QuickSetup user control
            </summary>
            <param name="_cDefinition">new sensor definition</param>
            <param name="_cParameters">new sensor parameters</param>
        </member>
        <member name="M:LineSensorDotNet.CSensorInterface.OnLanguageChange(STIL_LanguageControl.CLanguageDefinition.E_CULTURE_INFO)">
            <summary>
            Change language notification
            </summary>
            <param name="eNewCulture">new language</param>
        </member>
        <member name="M:LineSensorDotNet.CSensorInterface.OnUserLevelChange(STIL_UserLevelControl.CUserLevelDefinition.E_USER_LEVEL)">
            <summary>
            User level change (notification envoyée par SensorManager)
            </summary>
            <param name="eNewUser">Nouveau niveau utilisateur</param>
        </member>
        <member name="M:LineSensorDotNet.CSensorInterface.ConnectSensor(System.Boolean@)">
            <summary>
            open connection with sensor
            </summary>
            <param name="bConnect">output: true if sensor connected, false if not connected (no config file selected)</param>
            <returns>true if success, false if failed (call getLastError() to get the error detail)</returns>
        </member>
        <member name="M:LineSensorDotNet.CSensorInterface.DisconnectSensor">
            <summary>
            Close current sensor connection
            </summary>
            <returns>true if disconnection ok, false if failed (call getLastError() to get the error detail)</returns>
        </member>
        <member name="M:LineSensorDotNet.CSensorInterface.IsSimulation">
            <summary>
            Is simulated sensor
            </summary>
            <returns></returns>
        </member>
        <member name="M:LineSensorDotNet.CSensorInterface.connectInterface">
            <summary>
            Open connection with interface, without callback connexion with Manager
            </summary>
            <returns>true if success, false if failed (call getLastError() to get the error detail)</returns>
        </member>
        <member name="M:LineSensorDotNet.CSensorInterface.connectInterface(LineSensorDotNet.CSensorManager)">
            <summary>
            open connection with interface and register Manager (callback)
            </summary>
            <param name="_sensorMgr">callback (Manager connection)</param>
            <returns>true if success, false if failed (call getLastError() to get the error detail)</returns>
        </member>
        <member name="M:LineSensorDotNet.CSensorInterface.connectInterface(LineSensorDotNet.CSensorManager,LineSensorDotNet.CSensorConstantsEnumDefinition.E_SENSOR_CONTROLLER,System.Boolean)">
            <summary>
            creates communication channel with specified sensor type controller
            </summary>
            <param name="_sensorMgr">parent SensorManager (callback)</param>
            <param name="_sensorCtrl">sensor type controller</param>
            <param name="_bConnect">true: initialize sensor - false: just open connection, no sensor initialization</param>
            <returns>true if success, false if failed (call getLastError() to get the error detail)</returns>
        </member>
        <member name="M:LineSensorDotNet.CSensorInterface.disconnectInterface">
            <summary>
            Disconnect interface at application closing => disconnect all current connected controllers
            </summary>
            <returns>true if success, false if failed (call getLastError() to get the error detail)</returns>
        </member>
        <member name="M:LineSensorDotNet.CSensorInterface.SetConnectionType(LineSensorDotNet.CSensorConstantsEnumDefinition.E_SENSOR_CONNECTION_TYPE)">
            <summary>
            set selected connection type (USB, simulation)
            </summary>
            <param name="_type">Connection type</param>
        </member>
        <member name="M:LineSensorDotNet.CSensorInterface.IsSensorConnected">
            <summary>
            Get sensor connection status
            </summary>
            <returns>true if sensor is connected, false if disconnected</returns>
        </member>
        <member name="M:LineSensorDotNet.CSensorInterface.GetExposureTime(System.Double@)">
            <summary>
            Get current sensor exposure time (in µs)
            </summary>
            <param name="dblExposureTime">Exposure time</param>
            <returns>true if succeeded, false if failed (call getLastError() to get the error detail)</returns>
        </member>
        <member name="M:LineSensorDotNet.CSensorInterface.GetNumberPeak(System.Int32@)">
            <summary>Get current sensor number of peak</summary>
            <param name="iNumberPeak">Exposure time</param>
            <returns>true if succeeded, false if failed (call getLastError() to get the error detail)</returns>
        </member>
        <member name="M:LineSensorDotNet.CSensorInterface.GetTypePeak(LineSensorDotNet.Peak,STIL.LineSensor.MultiPeakType@)">
            <summary>Get current sensor type of peak</summary>
            <param name="peak">detected peak</param>
            <param name="enTypePeak">position of detected peak</param>
            <returns>true if succeeded, false if failed (call getLastError() to get the error detail)</returns>
        </member>
        <member name="M:LineSensorDotNet.CSensorInterface.SetTypePeak(LineSensorDotNet.Peak,STIL.LineSensor.MultiPeakType)">
            <summary>Set current sensor type of peak</summary>
            <param name="peak">detected peak</param>
            <param name="enTypePeak">position of detected peak</param>
            <returns>true if succeeded, false if failed (call getLastError() to get the error detail)</returns>
        </member>
        <member name="M:LineSensorDotNet.CSensorInterface.SetMeasurementType(LineSensorDotNet.CSensorParameters)">
            <summary>
            Set measurement type
            </summary>
            <param name="_sensorParameters">mapping of parameters saved in .INI file</param>
            <returns>true if succeeded, false if failed (call getLastError() to get the error description)</returns>
        </member>
        <member name="M:LineSensorDotNet.CSensorInterface.SetMeasurementType(STIL.LineSensor.MeasurementType)">
            <summary>
            Set measurement type
            </summary>
            <param name="enMeasurementType">Measurement type</param>
            <returns>true if succeeded, false if failed (call getLastError() to get the error description)</returns>
        </member>
        <member name="M:LineSensorDotNet.CSensorInterface.GetMeasurementType(STIL.LineSensor.MeasurementType@)">
            <summary>
            Get current sensor measurement type
            </summary>
            <param name="typeMeasurement">Measurement type</param>
            <returns>true if succeeded, false if failed (call getLastError() to get the error detail)</returns>
        </member>
        <member name="M:LineSensorDotNet.CSensorInterface.GetSensorVersion(STIL.LineSensor.enSensorVersion@)">
            <summary>
            Get current sensor version
            </summary>
            <param name="SensorVersion">sensor version</param>
            <returns>true if succeeded, false if failed (call getLastError() to get the error detail)</returns>
        </member>
        <member name="M:LineSensorDotNet.CSensorInterface.SetExposureTime(System.Double)">
            <summary>
            Set exposure time
            </summary>
            <param name="dblExposureTime">Exposure time</param>
            <returns>true if succeeded, false if failed (call getLastError() to get the error description)</returns>
        </member>
        <member name="M:LineSensorDotNet.CSensorInterface.SetLED_Brightness(System.Double)">
            <summary>
            Set LED brightness
            </summary>
            <param name="dblLED_Brightness">LED level</param>
            <returns>true if succeeded, false if failed (call getLastError() to get the error description)</returns>
        </member>
        <member name="M:LineSensorDotNet.CSensorInterface.SetIntensityNormalization(LineSensorDotNet.CSensorParameters)">
            <summary>
            Enable intensity normalization
            </summary>
            <param name="_sensorParameters">mapping of parameters saved in .INI file</param>
            <returns>true if succeeded, false if failed (call getLastError() to get the error description)</returns>
        </member>
        <member name="M:LineSensorDotNet.CSensorInterface.SetIntensityNormalization(System.Boolean)">
            <summary>
            Enable intensity normalization
            </summary>
            <param name="bIntensityNormalization">bool to enable or not intensity normalization</param>
            <returns>true if succeeded, false if failed (call getLastError() to get the error description)</returns>
        </member>
        <member name="M:LineSensorDotNet.CSensorInterface.SetFirstPeakCorrection(LineSensorDotNet.CSensorParameters)">
            <summary>
            Enable current sensor first peak correction
            </summary>
            <param name="_sensorParameters">mapping of parameters saved in .INI file</param>
            <returns>true if succeeded, false if failed (call getLastError() to get the error description)</returns>
        </member>
        <member name="M:LineSensorDotNet.CSensorInterface.SetFirstPeakCorrection(System.Boolean)">
            <summary>
            Enable current sensor first peak correction
            </summary>
            <param name="bFirstPeak">bool to enable or not correction</param>
            <returns>true if succeeded, false if failed (call getLastError() to get the error description)</returns>
        </member>
        <member name="M:LineSensorDotNet.CSensorInterface.SetRawIntensity(LineSensorDotNet.CSensorParameters)">
            <summary>
            Set current sensor raw intensity
            </summary>
            <param name="_sensorParameters">mapping of parameters saved in .INI file</param>
            <returns>true if succeeded, false if failed (call getLastError() to get the error description)</returns>
        </member>
        <member name="M:LineSensorDotNet.CSensorInterface.SetRawIntensity(System.Boolean)">
            <summary>
            Set current sensor raw intensity
            </summary>
            <param name="bRawIntensity">bool to enable or not raw intensity</param>
            <returns>true if succeeded, false if failed (call getLastError() to get the error description)</returns>
        </member>
        <member name="M:LineSensorDotNet.CSensorInterface.SetWhiteRefInFirmware(LineSensorDotNet.CSensorParameters)">
            <summary>
            Set white reference in firmware
            </summary>
            <param name="_sensorParameters">mapping of parameters saved in .INI file</param>
            <returns>true if succeeded, false if failed (call getLastError() to get the error description)</returns>
        </member>
        <member name="M:LineSensorDotNet.CSensorInterface.SetWhiteRefInFirmware(System.Boolean)">
            <summary>
            Set white reference in firmware
            </summary>
            <param name="bWhiteRefFirmware">bool to enable or not white reference</param>
            <returns>true if succeeded, false if failed (call getLastError() to get the error description)</returns>
        </member>
        <member name="M:LineSensorDotNet.CSensorInterface.SetThermalCorrection(LineSensorDotNet.CSensorParameters)">
            <summary>
            Set thermal correction
            </summary>
            <param name="_sensorParameters">mapping of parameters saved in .INI file</param>
            <returns>true if succeeded, false if failed (call getLastError() to get the error description)</returns>
        </member>
        <member name="M:LineSensorDotNet.CSensorInterface.SetThermalCorrection(System.Boolean)">
            <summary>
            Set thermal correction
            </summary>
            <param name="bThermalCorrection">bool enable or not thermal correction</param>
            <returns>true if succeeded, false if failed (call getLastError() to get the error description)</returns>
        </member>
        <member name="M:LineSensorDotNet.CSensorInterface.SetMaxValleyToPeakRatio(LineSensorDotNet.CSensorParameters)">
            <summary>
            Set max valley to peak ratio
            </summary>
            <param name="_sensorParameters">mapping of parameters saved in .INI file</param>
            <returns>true if succeeded, false if failed (call getLastError() to get the error description)</returns>
        </member>
        <member name="M:LineSensorDotNet.CSensorInterface.SetMaxValleyToPeakRatio(System.Double)">
            <summary>
            Set max valley to peak ratio
            </summary>
            <param name="dblValleyToPeakRatio">valley to peak ratio</param>
            <returns>true if succeeded, false if failed (call getLastError() to get the error description)</returns>
        </member>
        <member name="M:LineSensorDotNet.CSensorInterface.SetDetectionThreshold(LineSensorDotNet.CSensorParameters)">
            <summary>
            Set current sensor detection threshold
            </summary>
            <param name="_sensorParameters">mapping of parameters saved in .INI file</param>
            <returns>true if succeeded, false if failed (call getLastError() to get the error description)</returns>
        </member>
        <member name="M:LineSensorDotNet.CSensorInterface.SetDetectionThreshold(System.Double)">
            <summary>
            Set current sensor LED brightness
            </summary>
            <param name="dblDetectionThreshold">detection threshold</param>
            <returns>true if succeeded, false if failed (call getLastError() to get the error description)</returns>
        </member>
        <member name="M:LineSensorDotNet.CSensorInterface.getTriggerType(LineSensorDotNet.CSensorConstantsEnumDefinition.E_SENSOR_TRIGGER_MODE)">
            <summary>
            Convert E_SENSOR_TRIGGER_MODE value to corresponding TriggerType (defined in LineSensor wrapper component)
            before sending it to sensor
            </summary>
            <param name="_trigMode">E_SENSOR_TRIGGER_MODE trigger mode</param>
            <returns>TriggerType value</returns>
        </member>
        <member name="M:LineSensorDotNet.CSensorInterface.SetTriggerMode(LineSensorDotNet.CSensorConstantsEnumDefinition.E_SENSOR_TRIGGER_MODE)">
            <summary>
            set sensor trigger mode
            </summary>
            <param name="_triggerMode">trigger mode (Start_on_rising_edge, start_on_soft_trig...)</param>
            <returns>true if success, false if failed (call getLastError() to get the error detail)</returns>
        </member>
        <member name="M:LineSensorDotNet.CSensorInterface.SendMessageEvent(System.String)">
            <summary>
            Sensor message event => send notification to Sensor manager (call getLastError() to get the error description)
            </summary>
            <param name="strMess">message</param>
        </member>
        <member name="M:LineSensorDotNet.CSensorInterface.sendSensorFrequencyChange(System.Double)">
            <summary>
            Send event frequency change
            </summary>
            <param name="frame">modified frame</param>
        </member>
        <member name="M:LineSensorDotNet.CSensorInterface.getLastError">
            <summary>
            Return last error occured on interface
            </summary>
            <returns>object containing error number and associated text</returns>
        </member>
        <member name="M:LineSensorDotNet.CSensorInterface.registerCommonSensorSetupUserControl(LineSensorDotNet.CommonSensorSetupUserControl)">
            <summary>
            Connecte le CommonSensorSetup UserControl au SensorInterface 
            </summary>
            <param name="_setupUserControl">CommonSensorSetup UserControl</param>
        </member>
        <member name="M:LineSensorDotNet.CSensorInterface.registerCommonSensorQuickSetupUserControl(LineSensorDotNet.CommonSensorQuickSetupControl)">
            <summary>
            Connecte le CommonSensorQuickSetup UserControl au SensorInterface 
            </summary>
            <param name="_setupUserControl">CommonSensorQuickSetup UserControl</param>
            <returns>true if success, false if failed (call getLastError() to get the error detail)</returns>
        </member>
        <member name="M:LineSensorDotNet.CSensorInterface.registerCommonSensorUserControl(LineSensorDotNet.CommonSensorUserControl)">
            <summary>
            Connecte le CommonSensor UserControl au SensorInterface 
            </summary>
            <param name="_setupUserControl">CommonSensorQuickSetup UserControl</param>
            <returns>true if success, false if failed (call getLastError() to get the error detail)</returns>
        </member>
        <member name="M:LineSensorDotNet.CSensorInterface.StartAcquisition">
            <summary>
            Start sensor acquisition
            </summary>
            <returns>true if acquisition correctly started, false if failed (call getLastError() to get the error detail)</returns>
        </member>
        <member name="M:LineSensorDotNet.CSensorInterface.StartAcquisition(System.Boolean)">
            <summary>
            Start sensor acquisition
            </summary>
            <param name="bLogMeasures">true if acquisition measures saved in log file</param>
            <returns>true if acquisition correctly started, false if failed (call getLastError() to get the error detail)</returns>
        </member>
        <member name="M:LineSensorDotNet.CSensorInterface.StartAcquisition(System.Boolean,System.UInt16)">
            <summary>
            Start sensor acquisition
            </summary>
            <param name="bLogMeasures">true if acquisition measures saved in log file</param>
            <param name="iNbRejectedMeasures">Nb rejected sensor measures, at startup (during acceleration ramp)</param>
            <returns>true if acquisition correctly started, false if failed (call getLastError() to get the error detail)</returns>
        </member>
        <member name="M:LineSensorDotNet.CSensorInterface.StartAcquisition(System.Boolean,System.UInt16,System.Boolean)">
            <summary>
            Start sensor acquisition
            </summary>
            <param name="bLogMeasures">true if acquisition measures saved in log file</param>
            <param name="iNbRejectedMeasures">Nb rejected sensor measures, at startup (during acceleration ramp)</param>
            <param name="bFullLog">true: acquisition measures + rejected measures saved in log file - false: rejected measures not saved</param>
            <returns>true if acquisition correctly started, false if failed (call getLastError() to get the error detail)</returns>
        </member>
        <member name="M:LineSensorDotNet.CSensorInterface.StartAcquisition(System.Boolean,System.UInt16,System.Int32,System.Boolean)">
            <summary>
            Start sensor acquisition
            </summary>
            <param name="bLogMeasures">true if acquisition measures saved in log file</param>
            <param name="iNbRejectedMeasures">Nb rejected sensor measures, at startup (during acceleration ramp)</param>
            <param name="iNbMeasures">Nb sensor measures to log &amp; store</param>
            <param name="bFullLog">true: acquisition measures + rejected measures saved in log file - false: rejected measures not saved</param>
            <returns>true if acquisition correctly started, false if failed (call getLastError() to get the error detail)</returns>
        </member>
        <member name="M:LineSensorDotNet.CSensorInterface.StartInternalAcquisition(System.Boolean,System.UInt16,System.Int32,System.Boolean)">
            <summary>
            Start sensor acquisition
            </summary>
            <param name="bLogMeasures">true if acquisition measures saved in log file</param>
            <param name="iNbRejectedMeasures">Nb rejected sensor measures, at startup (during acceleration ramp)</param>
            <param name="iNbMeasures">Nb sensor measures to log &amp; store</param>
            <param name="bFullLog">true: acquisition measures + rejected measures saved in log file - false: rejected measures not saved</param>
            <returns>true if acquisition correctly started, false if failed (call getLastError() to get the error detail)</returns>
        </member>
        <member name="M:LineSensorDotNet.CSensorInterface.StartAcquisitionRepetiveLine(System.Double,System.Double)">
            <summary>
            Start an acquisition of repetitive lines
            </summary>
            <param name="iDuration">Total duration</param>
            <param name="iTimeInterval">Interval between acquisition</param>
            <returns>true if succeeded, false if failed</returns>
        </member>
        <member name="M:LineSensorDotNet.CSensorInterface.StartAquisitionRealTime">
            <summary>
            Start acquisition in real time
            </summary>
            <returns>true if succeeded, false if failed</returns>
        </member>
        <member name="M:LineSensorDotNet.CSensorInterface.StartAcquisitionThread(System.Threading.ThreadStart)">
            <summary>
            Start acquisition thread for measure mode
            </summary>
        </member>
        <member name="M:LineSensorDotNet.CSensorInterface.StopAcquisition">
            <summary>
            Stop sensor acquisition
            </summary>
            <returns>true if acquisition correctly stopped, false if failed (call getLastError() to get the error detail)</returns>
        </member>
        <member name="M:LineSensorDotNet.CSensorInterface.WaitEndedAcquisitionThread(System.Int32)">
            <summary>
            Wait ended acquisition Thread
            </summary>
            <param name="tm">time</param>
            <returns>true if acquisition thread stopped, false if always running (call getLastError() to get the error description)</returns>
        </member>
        <member name="M:LineSensorDotNet.CSensorInterface.LogData(STIL.LineSensor.AcquiredData)">
            <summary>
            Log data
            </summary>
            <param name="_acquiredData">Acquired data to log</param>
        </member>
        <member name="M:LineSensorDotNet.CSensorInterface.LogData(STIL.LineSensor.AcquiredDataEx)">
            <summary>
            Log data
            </summary>
            <param name="_acquiredData">Acquired data to log</param>
        </member>
        <member name="M:LineSensorDotNet.CSensorInterface.LogData(STIL.LineSensor.AcquiredThicknessData)">
            <summary>
            Log data
            </summary>
            <param name="_acquiredData">Acquired data to log</param>
        </member>
        <member name="M:LineSensorDotNet.CSensorInterface.StartLogData">
            <summary>
            Start to log
            </summary>
        </member>
        <member name="M:LineSensorDotNet.CSensorInterface.StartLogDataEx">
            <summary>
            Start to log
            </summary>
        </member>
        <member name="M:LineSensorDotNet.CSensorInterface.StartLogThicknessData">
            <summary>
            Start to log
            </summary>
        </member>
        <member name="M:LineSensorDotNet.CSensorInterface.StopLogData">
            <summary>
            Stop to log
            </summary>
        </member>
        <member name="M:LineSensorDotNet.CSensorInterface.StopLogDataEx">
            <summary>
            Stop to log
            </summary>
        </member>
        <member name="M:LineSensorDotNet.CSensorInterface.StopLogThicknessData">
            <summary>
            Stop to log
            </summary>
        </member>
        <member name="M:LineSensorDotNet.CSensorInterface.OpenLogData">
            <summary>
            Open a data log
            </summary>
        </member>
        <member name="M:LineSensorDotNet.CSensorInterface.ResetLogData">
            <summary>
            Reset data log
            </summary>
        </member>
        <member name="M:LineSensorDotNet.CSensorInterface.SaveLogData">
            <summary>
            Save data logged
            </summary>
        </member>
        <member name="M:LineSensorDotNet.CSensorInterface.SaveLogDataEx">
            <summary>
            Save data logged
            </summary>
        </member>
        <member name="M:LineSensorDotNet.CSensorInterface.SaveLogThicknessData">
            <summary>
            Save data logged
            </summary>
        </member>
        <member name="M:LineSensorDotNet.CSensorInterface.CloseLogData">
            <summary>
            Close data log
            </summary>
        </member>
        <member name="M:LineSensorDotNet.CSensorInterface.SendTrigger">
            <summary>
            Send trigger to current sensor
            </summary>
            <returns>true if success, false if failed (call getLastError() to get the error detail)</returns>
        </member>
        <member name="M:LineSensorDotNet.CSensorInterface.ExecuteDark(System.Boolean@,System.String@)">
            <summary>
            Execute Dark process
            </summary>
            <param name="bDarkMeasureOK">true if DarkSignal ok, false if DarkSignal is bad</param>
            <param name="sMeasureFeedback">DarkSignal measure result description</param>
            <returns>true if DarkMeasure correctly done (measure result = bDarkMeasureOK), false if failed (call getLastError() to get the error detail)</returns>
        </member>
        <member name="M:LineSensorDotNet.CSensorInterface.SaveDarkSignalResult(System.String)">
            <summary>
            Save last dark signal measure results in the specified output file
            </summary>
            <param name="strPath">output file full path and name</param>
            <returns>true if dark signal results correctly saved, false if failed (call getLastError() to get the error description)</returns>
        </member>
        <member name="M:LineSensorDotNet.CSensorInterface.ExecuteThermalCorrection(System.Boolean@)">
            <summary>
            Execute Thermal correction process
            </summary>
            <param name="bThermalResult">true if Thermal correction coef. calculation ok, false if failed</param>
            <returns>true if Thermal correction coef. calculation correctly done (calculation result = bThermalResult), false if failed (call getLastError() to get the error detail)</returns>
        </member>
        <member name="M:LineSensorDotNet.CSensorInterface.SaveThermalCorrectionResult(System.String)">
            <summary>
            Save last thermal correction results in the specified output file
            </summary>
            <param name="strPath">output file full path and name</param>
            <returns>true if results correctly saved, false if failed (call getLastError() to get the error description)</returns>
        </member>
        <member name="M:LineSensorDotNet.CSensorInterface.ExecuteIntensityNormalization(System.Boolean@)">
            <summary>
            Execute Intensity normalization process
            </summary>
            <param name="bIntensityResult">true if intensity normalization ok, false if failed</param>
            <returns>true if intensity normalization process correctly done (calculation result = bIntensityResult), false if failed (call getLastError() to get the error detail)</returns>
        </member>
        <member name="M:LineSensorDotNet.CSensorInterface.SaveIntensityNormalizationResult(System.String)">
            <summary>
            Save last intensity normalization results in the specified output file
            </summary>
            <param name="strPath">output file full path and name</param>
            <returns>true if results correctly saved, false if failed (call getLastError() to get the error description)</returns>
        </member>
        <member name="M:LineSensorDotNet.CSensorInterface.GetFilledLineSensorParamsStruct(STIL.LineSensor.SensorType,STIL.LineSensor.LineSensorParams@)">
            <summary>
            Initialize parameters
            </summary>
            <param name="SelectSensorType">Parameters</param>
            <param name="lsParams">Parameters</param>
        </member>
        <member name="M:LineSensorDotNet.CSensorInterface.FilledLineSensorParamsStructFromFile(System.String,STIL.LineSensor.LineSensorParams@)">
            <summary>
            Initialize parameters
            </summary>
            <param name="strFileName">Parameters</param>
            <param name="lsParams">Parameters</param>
        </member>
        <member name="M:LineSensorDotNet.CSensorInterface.LoadLastSavedSensorDefinition">
            <summary>
            Load last sensor definition
            </summary>
        </member>
        <member name="M:LineSensorDotNet.CSensorInterface.LoadSensorParameters(LineSensorDotNet.CSensorParameters@)">
            <summary>
            Load parameters directly from the sensor
            </summary>
            <param name="_sensorParameters">output: mapping of sensor parameters saved in .INI file</param>
            <returns>true if loading is ok, false if failed (call getLastError() to get the error detail)</returns>
        </member>
        <member name="M:LineSensorDotNet.CSensorInterface.SaveSensorConfiguration(LineSensorDotNet.CSensorDefinition)">
            <summary>
            Save current sensor definition (.XML file)
            </summary>
            <param name="_sensorDefinition">Contains sensor connection type, sensor configuration file path, sensor configuration file name, last error occured on class</param>
            <returns>true if success, false if failed (call getLastError() to get the error detail)</returns>
        </member>
        <member name="M:LineSensorDotNet.CSensorInterface.SaveSensorParameters(LineSensorDotNet.CSensorDefinition,LineSensorDotNet.CSensorParameters)">
            <summary>
            Send modified parameters to the sensor and save them on .INI file
            </summary>
            <param name="_sensorDefinition">contains .INI file path and name</param>
            <param name="_sensorParameters">modified parameters</param>
            <returns>true if success, false if failed (call getLastError() to get the error detail)</returns>
        </member>
        <member name="M:LineSensorDotNet.CSensorInterface.GetDLLVersion">
            <summary>
            DLL version used
            </summary>
            <returns>string which contains the DLL version</returns>
        </member>
        <member name="M:LineSensorDotNet.CSensorInterface.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:LineSensorDotNet.CSensorInterface.Finalize">
            <summary>
            standard destructor
            </summary>
        </member>
        <member name="P:LineSensorDotNet.CSensorInterface.IPAddress">
            <summary>
            Current measurement type
            </summary>
        </member>
        <member name="P:LineSensorDotNet.CSensorInterface.TypeMeasurement">
            <summary>
            Current measurement type
            </summary>
        </member>
        <member name="P:LineSensorDotNet.CSensorInterface.TypePeaks">
            <summary>
            Current type peaks
            </summary>
        </member>
        <member name="P:LineSensorDotNet.CSensorInterface.FiberCount">
            <summary>
            Current Fiber count
            </summary>
        </member>
        <member name="P:LineSensorDotNet.CSensorInterface.SensorVersion">
            <summary>
            Current sensor version
            </summary>
        </member>
        <member name="T:LineSensorDotNet.CSensorManager">
            <summary>
            class CSensorManager
            <para> - SensorManager class:</para>
            <para>     - STIL Sensors management (MPLS-180, MPLS-DM)</para>
            <para>     - Allow communication between HMI and SensorControl DLL, using CSensorInterface class</para>
            <para>     - connexion with UserControl of user levels management for access permission management</para>
            <para>     - connexion with UserControl of language management (english/french)</para>
            <para>     - multi-projects: VS-2005, VS-2010, VS-2012, VS-2013</para>
            </summary>
        </member>
        <member name="M:LineSensorDotNet.ISensorManagerInterface.getSensorControllerType">
            <summary>Returns the controller type used on the current application</summary>
        </member>
        <member name="M:LineSensorDotNet.ISensorManagerInterface.connectManager(LineSensorDotNet.CSensorConstantsEnumDefinition.E_SENSOR_CONTROLLER)">
            <summary>
            connect to Manager and creates channel for communication with specified sensor type
            </summary>
            <param name="_sensorCtrl">sensor type controller</param>
            <returns>true if connection ok, false if failed</returns>
        </member>
        <member name="M:LineSensorDotNet.ISensorManagerInterface.getLastError">
            <summary>
            Dernière erreur
            </summary>
            <returns></returns>
        </member>
        <member name="M:LineSensorDotNet.ISensorManagerInterface.OnExit">
            <summary>
            End of application
            </summary>
        </member>
        <member name="M:LineSensorDotNet.CSensorManager.SendSensorStatusChangeEvent(LineSensorDotNet.CSensorConstantsEnumDefinition.E_SENSOR_STATE)">
            <summary>
            send sensor status change event notification to all subscribed components
            </summary>
            <param name="_newState">new sensor status (Disconnected, Ready...)</param>
            <returns>always true...</returns>
        </member>
        <member name="M:LineSensorDotNet.CSensorManager.SendSensorMeasureModeChangeEvent(STIL.LineSensor.MeasurementType)">
            <summary>
            send sensor measure mode change event notification to all subscribed components
            </summary>
            <param name="_newMeasurementType">new measure mode status (Altitude, Thickness...)</param>
            <returns>always true...</returns>
        </member>
        <member name="M:LineSensorDotNet.CSensorManager.sendSensorFrequencyChangeEvent(System.Double)">
            <summary>
            send sensor frequency change event notification to all subscribed components
            </summary>
            <param name="iframe">new sensor frame</param>
            <returns>always true...</returns>
        </member>
        <member name="M:LineSensorDotNet.CSensorManager.SendNewSensorMeasureEvent(System.Double[],System.Double[],System.Int32,System.Double,System.Int32,System.UInt32,System.Collections.Generic.List{STIL.LineSensor.AcquiredData})">
            <summary>
            send sensor measure event notification to all subscribed components
            </summary>
            <param name="dblDistance">measured distances (altitudes)</param>
            <param name="dblIntensity">measured intensities</param>
            <param name="iCounter">measures counter</param>
            <param name="dblDelay">delay (in ms) elapsed since the previous measure</param>
            <param name="iFiberNumber">nb fibers on sensor</param>
            <param name="iInternalCounter">internal counter</param>
            <param name="listAcquireData">List of acquired data</param>
            <returns>always true...</returns>
        </member>
        <member name="M:LineSensorDotNet.CSensorManager.SendNewSensorEndMeasureEvent(System.Double[],System.Double[],System.Int32,System.Double,System.Int32,System.UInt32,System.Collections.Generic.List{STIL.LineSensor.AcquiredData})">
            <summary>
            send sensor measure event notification to all subscribed components
            </summary>
            <param name="dblDistance">measured distances (altitudes)</param>
            <param name="dblIntensity">measured intensities</param>
            <param name="iCounter">measures counter</param>
            <param name="dblDelay">delay (in ms) elapsed since the previous measure</param>
            <param name="iFiberNumber">nb fibers on sensor</param>
            <param name="iInternalCounter">internal counter</param>
            <param name="listAcquireData">List of acquired data</param>
            <returns>always true...</returns>
        </member>
        <member name="M:LineSensorDotNet.CSensorManager.SendNewSensorMeasureEvent(System.Double[],System.Double[],System.Int32,System.Int32,System.Int32,System.Double,System.Int32,System.UInt32,System.Collections.Generic.List{STIL.LineSensor.AcquiredDataEx})">
            <summary>
            send sensor measure event notification to all subscribed components
            </summary>
            <param name="dblDistance">measured distances (altitudes)</param>
            <param name="dblIntensity">measured intensities</param>
            <param name="iCounter">measures counter</param>
            <param name="iRtCounter">measures real time counter</param>
            <param name="iEncoder">measures counter</param>
            <param name="dblDelay">delay (in ms) elapsed since the previous measure</param>
            <param name="iFiberNumber">nb fibers on sensor</param>
            <param name="iInternalCounter">internal counter</param>
            <param name="listAcquireDataEx">List of acquired data</param>
            <returns>always true...</returns>
        </member>
        <member name="M:LineSensorDotNet.CSensorManager.SendNewSensorEndMeasureEvent(System.Double[],System.Double[],System.Int32,System.Int32,System.Int32,System.Double,System.Int32,System.UInt32,System.Collections.Generic.List{STIL.LineSensor.AcquiredDataEx})">
            <summary>
            send sensor measure event notification to all subscribed components
            </summary>
            <param name="dblDistance">measured distances (altitudes)</param>
            <param name="dblIntensity">measured intensities</param>
            <param name="iCounter">measures counter</param>
            <param name="iRtCounter">measures real time counter</param>
            <param name="iEncoder">measures encoder</param>
            <param name="dblDelay">delay (in ms) elapsed since the previous measure</param>
            <param name="iFiberNumber">nb fibers on sensor</param>
            <param name="iInternalCounter">internal counter</param>
            <param name="listAcquireDataEx">List of acquired data</param>
            <returns>always true...</returns>
        </member>
        <member name="M:LineSensorDotNet.CSensorManager.SendNewSensorMeasureEvent(System.Double[],System.Double[],System.Double[],System.Double[],System.Double[],System.Int32,System.Int32,System.Int32,System.Double,System.Int32,System.UInt32,System.Collections.Generic.List{STIL.LineSensor.AcquiredThicknessData})">
            <summary>
            send sensor measure event notification to all subscribed components
            </summary>
            <param name="dblThickness">measured thicknesses</param>
            <param name="dblDistance1">measured distances 1 (altitudes 1)</param>
            <param name="dblDistance2">measured distances 2 (altitudes 2)</param>
            <param name="dblIntensity1">measured intensities 1</param>
            <param name="dblIntensity2">measured intensities 2</param>
            <param name="iCounter">measures counter</param>
            <param name="iRtCounter">measures real time counter</param>
            <param name="iEncoder">measures counter</param>
            <param name="dblDelay">delay (in ms) elapsed since the previous measure</param>
            <param name="iFiberNumber">nb fibers on sensor</param>
            <param name="iInternalCounter">internal counter</param>
            <param name="listAcquireThicknessData">List of acquired data</param>
            <returns>always true...</returns>
        </member>
        <member name="M:LineSensorDotNet.CSensorManager.SendNewSensorEndMeasureEvent(System.Double[],System.Double[],System.Double[],System.Double[],System.Double[],System.Int32,System.Int32,System.Int32,System.Double,System.Int32,System.UInt32,System.Collections.Generic.List{STIL.LineSensor.AcquiredThicknessData})">
            <summary>
            send sensor measure event notification to all subscribed components
            </summary>
            <param name="dblThickness">measured thicknesses</param>
            <param name="dblDistance1">measured distances (altitudes)</param>
            <param name="dblDistance2">measured distances (altitudes)</param>
            <param name="dblIntensity1">measured intensities</param>
            <param name="dblIntensity2">measured intensities</param>
            <param name="iCounter">measures counter</param>
            <param name="iRtCounter">measures real time counter</param>
            <param name="iEncoder">measures encoder</param>
            <param name="dblDelay">delay (in ms) elapsed since the previous measure</param>
            <param name="iFiberNumber">nb fibers on sensor</param>
            <param name="iInternalCounter">internal counter</param>
            <param name="listAcquireThicknessData">List of acquired data</param>
            <returns>always true...</returns>
        </member>
        <member name="M:LineSensorDotNet.CSensorManager.SendSensorMessageEvent(System.String)">
            <summary>
            send sensor message event notification to all subscribed components
            </summary>
            <param name="strMess">sensor message</param>
            <returns>always true...</returns>
        </member>
        <member name="M:LineSensorDotNet.CSensorManager.SetSensorLED_Brightness(System.Double)">
            <summary>
            set sensor LED brightness
            </summary>
            <param name="dblLED_Brightness">LED Brightness level</param>
        </member>
        <member name="M:LineSensorDotNet.CSensorManager.GetSensorLED_Brightness">
            <summary>
            Get sensor LED brightness
            </summary>
            <returns>double value representing LED Brightness level</returns>
        </member>
        <member name="M:LineSensorDotNet.CSensorManager.#ctor">
            <summary>
            constructor
            </summary>
        </member>
        <member name="M:LineSensorDotNet.CSensorManager.Finalize">
            <summary>
            standard destructor
            </summary>
        </member>
        <member name="M:LineSensorDotNet.CSensorManager.connectManager(LineSensorDotNet.CSensorConstantsEnumDefinition.E_SENSOR_CONTROLLER)">
            <summary>
            creates communication channel with specified sensor type controller
            </summary>
            <param name="_sensorCtrl">sensor type controller</param>
            <returns>true if connection ok, false if failed (call getLastError() to get the error description)</returns>
        </member>
        <member name="M:LineSensorDotNet.CSensorManager.getSensorControllerType">
            <summary>Returns the controller type used on the current application</summary>
            <returns>true if success, false if failed (call getLastError() to get the error detail)</returns>
        </member>
        <member name="M:LineSensorDotNet.CSensorManager.setSensorControllerType(LineSensorDotNet.CSensorConstantsEnumDefinition.E_SENSOR_CONTROLLER)">
            <summary>Set the controller type used on the current application</summary>
            <param name="p_SensorType">Controller type (MPLS 180, MPLS DM, ...)</param>
        </member>
        <member name="M:LineSensorDotNet.CSensorManager.getSensorNumberPeak(System.Int32@)">
            <summary>
            Return current sensor Number peak
            </summary>
            <param name="NumberPeak">NumberPeak</param>
            <returns>true if success, false if failed (call getLastError() to get the error detail)</returns>
        </member>
        <member name="M:LineSensorDotNet.CSensorManager.getSensorMeasurementType(STIL.LineSensor.MeasurementType@)">
            <summary>
            Return current sensor measurement type
            </summary>
            <param name="typeMeasurement">Measurement Type</param>
            <returns>true if success, false if failed (call getLastError() to get the error detail)</returns>
        </member>
        <member name="M:LineSensorDotNet.CSensorManager.getSensorVersion(STIL.LineSensor.enSensorVersion@)">
            <summary>
            Return current sensor Version
            </summary>
            <param name="SensorVersion">Sensor Version</param>
            <returns>true if success, false if failed (call getLastError() to get the error detail)</returns>
        </member>
        <member name="M:LineSensorDotNet.CSensorManager.GetExposureTime(System.Double@)">
            <summary>
            Return current sensor exposure time (in µs)
            </summary>
            <param name="dblExposureTime">Exposure time</param>
            <returns>true if success, false if failed (call getLastError() to get the error detail)</returns>
        </member>
        <member name="M:LineSensorDotNet.CSensorManager.OnExit">
            <summary>
            application closing in process
            </summary>
        </member>
        <member name="M:LineSensorDotNet.CSensorManager.registerCommonSensorUserControl(LineSensorDotNet.CommonSensorUserControl)">
            <summary>
            connection with CommonSensorQuickSetup user control
            </summary>
            <param name="_quickSetupUC">user control instance</param>
            <returns>true if connection is ok, false if connection failed (call getLastError() to get the error description)</returns>
        </member>
        <member name="M:LineSensorDotNet.CSensorManager.registerCommonSensorQuickSetupUserControl(LineSensorDotNet.CommonSensorQuickSetupControl)">
            <summary>
            connection with CommonSensorQuickSetup user control
            </summary>
            <param name="_quickSetupUC">user control instance</param>
            <returns>true if connection is ok, false if connection failed (call getLastError() to get the error description)</returns>
        </member>
        <member name="M:LineSensorDotNet.CSensorManager.LoadSensorParameters(LineSensorDotNet.CSensorParameters@)">
            <summary>
            Load sensor parameters directly from the sensor
            </summary>
            <param name="_sensorParameters">output: mapping of sensor parameters saved in .INI file</param>
            <returns>true if loading is ok, false if failed (call getLastError() to get the error description)</returns>
        </member>
        <member name="M:LineSensorDotNet.CSensorManager.SaveSensorParameters(LineSensorDotNet.CSensorDefinition,LineSensorDotNet.CSensorParameters)">
            <summary>
            Save modified sensor definition and parameters
            </summary>
            <param name="_sensorDefinition">modified definition</param>
            <param name="_sensorParameters">modified parameters</param>
            <returns>true if succes, false if failed (call getLastError() to get the error description)</returns>
        </member>
        <member name="M:LineSensorDotNet.CSensorManager.IsSensorConnected">
            <summary>
            Get sensor connection status
            </summary>
            <returns>true if sensor is connected, false if disconnected</returns>
        </member>
        <member name="M:LineSensorDotNet.CSensorManager.StartAcquisition">
            <summary>
            Start sensor acquisition
            </summary>
            <returns>true if acquisition correctly started, false if failed (call getLastError() to get the error description)</returns>
        </member>
        <member name="M:LineSensorDotNet.CSensorManager.StartAcquisition(System.Boolean)">
            <summary>
            Start sensor acquisition
            </summary>
            <param name="bLogMeasures">Log acquisition measures in log file</param>
            <returns>true if acquisition correctly started, false if failed (call getLastError() to get the error description)</returns>
        </member>
        <member name="M:LineSensorDotNet.CSensorManager.StartAcquisition(System.Boolean,System.UInt16)">
            <summary>
            Start sensor acquisition
            </summary>
            <param name="bLogMeasures">Log acquisition measures in log file</param>
            <param name="iNbRejectedMeasures">Nb measures to reject at startup (during acceleration ramp)</param>
            <returns>true if acquisition correctly started, false if failed (call getLastError() to get the error description)</returns>
        </member>
        <member name="M:LineSensorDotNet.CSensorManager.StartAcquisition(System.Boolean,System.UInt16,System.Boolean)">
            <summary>
            Start sensor acquisition
            </summary>
            <param name="bLogMeasures">Log acquisition measures in log file</param>
            <param name="iNbRejectedMeasures">Nb measures to reject at startup (during acceleration ramp)</param>
            <param name="bFullLog">true: acquisition measures + rejected measures saved in log file - false: rejected measures not saved</param>
            <returns>true if acquisition correctly started, false if failed (call getLastError() to get the error description)</returns>
        </member>
        <member name="M:LineSensorDotNet.CSensorManager.StartAcquisition(System.Boolean,System.UInt16,System.Int32,System.Boolean)">
            <summary>
            Start sensor acquisition
            </summary>
            <param name="bLogMeasures">Log acquisition measures in log file</param>
            <param name="iNbRejectedMeasures">Nb measures to reject at startup (during acceleration ramp)</param>
            <param name="iNbMeasuresToProcess">Nb measures to store</param>
            <param name="bFullLog">true: acquisition measures + rejected measures saved in log file - false: rejected measures not saved</param>
            <returns>true if acquisition correctly started, false if failed (call getLastError() to get the error description)</returns>
        </member>
        <member name="M:LineSensorDotNet.CSensorManager.StartAcquisitionRepetiveLine(System.Double,System.Double)">
            <summary>
            startAquisition for Reptitive mode 
            </summary>
            <param name="iDuration">Duration</param> Duration 
            <param name="iTimeInterval">Time interval</param>
            <returns>true if acquisition correctly started, false if failed (call getLastError() to get the error description)</returns>
        </member>
        <member name="M:LineSensorDotNet.CSensorManager.StopAcquisition">
            <summary>
            Stop sensor acquisition
            </summary>
            <returns>true if acquisition correctly stopped, false if failed (call getLastError() to get the error description)</returns>
        </member>
        <member name="M:LineSensorDotNet.CSensorManager.WaitEndedAcquisitionThread(System.Int32)">
            <summary>
            Wait ended acquisition Thread
            </summary>
            <param name="tm">time</param>
            <returns>true if acquisition thread stopped, false if always running (call getLastError() to get the error description)</returns>
        </member>
        <member name="M:LineSensorDotNet.CSensorManager.StartstartRealTime">
            <summary>
            startRealTime for Reptitive mode 
            </summary>
            <returns>true if acquisition correctly started, false if failed (call getLastError() to get the error description)</returns>
        </member>
        <member name="M:LineSensorDotNet.CSensorManager.ExecuteDark(System.Boolean@,System.String@)">
            <summary>
            Execute Dark process in automatic mode
            </summary>
            <param name="bDarkResult">true if DarkSignal ok, false if DarkSignal is bad</param>
            <param name="sDarkFeedback">DarkSignal measure result description</param>
            <returns>true if dark signal acquisition correctly done, false if failed (call getLastError() to get the error description)</returns>
        </member>
        <member name="M:LineSensorDotNet.CSensorManager.ExecuteThermalCorrection(System.Boolean@)">
            <summary>
            Execute Thermal correction process in automatic mode
            </summary>
            <param name="bThermalResult">Thermal correction process result</param>
            <returns>true if thermal correction process correctly done, false if failed (call getLastError() to get the error description)</returns>
        </member>
        <member name="M:LineSensorDotNet.CSensorManager.ExecuteIntensityNormalization(System.Boolean@)">
            <summary>
            Execute Intensity normalization process
            </summary>
            <param name="bIntensityResult">Intensity normalization process result</param>
            <returns>true if intensity normalization process correctly done, false if failed (call getLastError() to get the error description)</returns>
        </member>
        <member name="M:LineSensorDotNet.CSensorManager.SaveDarkSignalResult(System.String)">
            <summary>
            Save last dark signal measure results in the specified output file
            </summary>
            <param name="strPath">output file full path and name</param>
            <returns>true if dark signal results correctly saved, false if failed (call getLastError() to get the error description)</returns>
        </member>
        <member name="M:LineSensorDotNet.CSensorManager.SaveThermalCorrectionResult(System.String)">
            <summary>
            Save last thermal correction calculation results in the specified output file
            </summary>
            <param name="strPath">output file full path and name</param>
            <returns>true if results correctly saved, false if failed (call getLastError() to get the error description)</returns>
        </member>
        <member name="M:LineSensorDotNet.CSensorManager.SaveIntensityNormalizationResult(System.String)">
            <summary>
            Save last intensity normalization results in the specified output file
            </summary>
            <param name="strPath">output file full path and name</param>
            <returns>true if results correctly saved, false if failed (call getLastError() to get the error description)</returns>
        </member>
        <member name="M:LineSensorDotNet.CSensorManager.SetTriggerMode(LineSensorDotNet.CSensorConstantsEnumDefinition.E_SENSOR_TRIGGER_MODE)">
            <summary>
            set sensor trigger mode
            </summary>
            <param name="_triggerMode">trigger mode (Start_on_rising_edge, start_on_soft_trig...)</param>
            <returns>true if success, false if failed (call getLastError() to get the error detail)</returns>
        </member>
        <member name="M:LineSensorDotNet.CSensorManager.SendTrigger">
            <summary>
            Send trigger to sensor
            </summary>
            <returns>true if success, false if failed (call getLastError() to get the error detail)</returns>
        </member>
        <member name="M:LineSensorDotNet.CSensorManager.SetIntensityNormalization(LineSensorDotNet.CSensorParameters)">
            <summary>
            Set LED brightness
            </summary>
            <param name="_sensorParameters">mapping of parameters saved in .INI file</param>
            <returns>true if success, false if failed (call getLastError() to get the error detail)</returns>
        </member>
        <member name="M:LineSensorDotNet.CSensorManager.SetFirstPeakCorrection(LineSensorDotNet.CSensorParameters)">
            <summary>
            Set LED brightness
            </summary>
            <param name="_sensorParameters">mapping of parameters saved in .INI file</param>
            <returns>true if success, false if failed (call getLastError() to get the error detail)</returns>
        </member>
        <member name="M:LineSensorDotNet.CSensorManager.SetRawIntensity(LineSensorDotNet.CSensorParameters)">
            <summary>
            Set LED brightness
            </summary>
            <param name="_sensorParameters">mapping of parameters saved in .INI file</param>
            <returns>true if success, false if failed (call getLastError() to get the error detail)</returns>
        </member>
        <member name="M:LineSensorDotNet.CSensorManager.SetWhiteRefInFirmware(LineSensorDotNet.CSensorParameters)">
            <summary>
            Set LED brightness
            </summary>
            <param name="_sensorParameters">mapping of parameters saved in .INI file</param>
            <returns>true if success, false if failed (call getLastError() to get the error detail)</returns>
        </member>
        <member name="M:LineSensorDotNet.CSensorManager.SetThermalCorrection(LineSensorDotNet.CSensorParameters)">
            <summary>
            Set LED brightness
            </summary>
            <param name="_sensorParameters">mapping of parameters saved in .INI file</param>
            <returns>true if success, false if failed (call getLastError() to get the error detail)</returns>
        </member>
        <member name="M:LineSensorDotNet.CSensorManager.SetMaxValleyToPeakRatio(LineSensorDotNet.CSensorParameters)">
            <summary>
            Set LED brightness
            </summary>
            <param name="_sensorParameters">mapping of parameters saved in .INI file</param>
            <returns>true if success, false if failed (call getLastError() to get the error detail)</returns>
        </member>
        <member name="M:LineSensorDotNet.CSensorManager.SetDetectionThreshold(LineSensorDotNet.CSensorParameters)">
            <summary>
            Set LED brightness
            </summary>
            <param name="_sensorParameters">mapping of parameters saved in .INI file</param>
            <returns>true if success, false if failed (call getLastError() to get the error detail)</returns>
        </member>
        <member name="M:LineSensorDotNet.CSensorManager.registerUserLevelManager(STIL_UserLevelControl.CUserLevelManager)">
            <summary>
            subscription to UserLevelChange event
            </summary>
            <param name="userLevelMgt">UserLevel manager instance</param>
        </member>
        <member name="M:LineSensorDotNet.CSensorManager.OnChangeUserLevel(System.Object,STIL_UserLevelControl.UserLevelChangeEventArgs)">
            <summary>
            Notifie le MotionInterface du changement de niveau d'utilisateur
            </summary>
            <param name="sender">object sender</param>
            <param name="e">modified user level</param>
        </member>
        <member name="M:LineSensorDotNet.CSensorManager.UpdateUserLevelAccess">
            <summary>
            send new user level notification to SensorInterface (if connected)
            </summary>
        </member>
        <member name="M:LineSensorDotNet.CSensorManager.unregisterUserLevelManager">
            <summary>
            to be called at application close: unregister from UserLevelChange event
            </summary>
        </member>
        <member name="M:LineSensorDotNet.CSensorManager.registerLanguageManager(STIL_LanguageControl.CLanguageManager)">
            <summary>
            Subscription to CultureChange event
            </summary>
            <param name="_languageMgt">LanguageManager instance</param>
        </member>
        <member name="M:LineSensorDotNet.CSensorManager.OnChangeLanguage(System.Object,STIL_LanguageControl.CultureChangeEventArgs)">
            <summary>
            New language notification received: send notification to SensorInterface (if connected)
            </summary>
            <param name="sender">object sender</param>
            <param name="e">modified culture</param>
        </member>
        <member name="M:LineSensorDotNet.CSensorManager.unregisterLanguageManager">
            <summary>
            called at application close: unsubscribe from CultureChange event
            </summary>
        </member>
        <member name="M:LineSensorDotNet.CSensorManager.getLastError">
            <summary>
            return last error occured on Manager
            </summary>
            <returns>object containing error number and associated text</returns>
        </member>
        <member name="M:LineSensorDotNet.CSensorManager.OnSensorDefinitionChange(LineSensorDotNet.CSensorDefinition,LineSensorDotNet.CSensorParameters)">
            <summary>
            Sensor definition change event notification 
                => send notification to Sensor interface
            </summary>
            <param name="_cDefinition">new sensor definition</param>
            <param name="_cParameters">new sensor parameters</param>
        </member>
        <member name="M:LineSensorDotNet.CSensorManager.GetDLLVersion">
            <summary>
            Get DLL Version
            </summary>
            <returns>string value representing DLL Version</returns>
        </member>
        <member name="E:LineSensorDotNet.CSensorManager.eventSensorStatusChange">
            <summary>
            Sensor status change event definition
            </summary>
        </member>
        <member name="E:LineSensorDotNet.CSensorManager.eventSensorMeasureModeChange">
            <summary>
            Sensor measure mode change event definition
            </summary>
        </member>
        <member name="E:LineSensorDotNet.CSensorManager.eventSensorFrequencyChange">
            <summary>
            Sensor frequency change event definition
            </summary>
        </member>
        <member name="E:LineSensorDotNet.CSensorManager.eventGetMeasureChange">
            <summary>
            Sensor get measure event definition
            </summary>
        </member>
        <member name="E:LineSensorDotNet.CSensorManager.eventGetEndMeasureChange">
            <summary>
            Sensor get measure event definition
            </summary>
        </member>
        <member name="E:LineSensorDotNet.CSensorManager.eventGetMeasureExChange">
            <summary>
            Sensor get measure event definition
            </summary>
        </member>
        <member name="E:LineSensorDotNet.CSensorManager.eventGetEndMeasureExChange">
            <summary>
            Sensor get measure event definition
            </summary>
        </member>
        <member name="E:LineSensorDotNet.CSensorManager.eventGetThicknessMeasureChange">
            <summary>
            Sensor get measure event definition
            </summary>
        </member>
        <member name="E:LineSensorDotNet.CSensorManager.eventGetEndThicknessMeasureChange">
            <summary>
            Sensor get measure event definition
            </summary>
        </member>
        <member name="E:LineSensorDotNet.CSensorManager.eventSensorMessage">
            <summary>
            sensor message event handler
            </summary>
        </member>
        <member name="P:LineSensorDotNet.CSensorManager.FiberCount">
            <summary>
            Current Fiber count
            </summary>
        </member>
        <member name="T:STIL.LineSensor.FiberStatus">
            <summary>
            The fiber status.
            <seealso cref="F:STIL.LineSensor.InvokeSpectroFuncParams.SP_GET_FIBER_STATUS"/>
            <seealso cref="F:STIL.LineSensor.InvokeSpectroFuncParams.SP_SET_FIBER_STATUS"/>
            </summary>
        </member>
        <member name="F:STIL.LineSensor.FiberStatus.FIBER_STATUS_DISABLED">
            <summary>Disabled fiber status</summary>
        </member>
        <member name="F:STIL.LineSensor.FiberStatus.FIBER_STATUS_ENABLED">
            <summary>Enabled fiber status</summary>
        </member>
        <member name="F:STIL.LineSensor.FiberStatus.FIBER_STATUS_TOO_MUCH_DARK">
            <summary>too much dark fiber status</summary>
        </member>
        <member name="F:STIL.LineSensor.FiberStatus.FIBER_STATUS_NO_SIGNAL">
            <summary>No signal fiber Status</summary>
        </member>
        <member name="F:STIL.LineSensor.FiberStatus.FIBER_STATUS_COUNT">
            <summary>MAX number of fiber status</summary>
        </member>
        <member name="T:STIL.LineSensor.PeakDetectionAlgo">
            <summary>
            Peak Detection Algo type 
            <seealso cref="F:STIL.LineSensor.LineSensorParams.peakDetectionAlgo"/>
            <seealso cref="F:STIL.LineSensor.InvokeDeviceFuncParams.DP_GET_ENABLE_FIRST_PEAK_MODE"/>
            </summary>
            
        </member>
        <member name="F:STIL.LineSensor.PeakDetectionAlgo.STRONG_PEAK">
            <summary>strongest peak (by default)</summary>
        </member>
        <member name="F:STIL.LineSensor.PeakDetectionAlgo.FIRST_PEAK">
            <summary>for first peak</summary>
        </member>
        <member name="F:STIL.LineSensor.PeakDetectionAlgo.MAX_ALGO_TYPE">
            <summary> ///  MAX Number of algo type /// </summary>
        </member>
        <member name="T:STIL.LineSensor.SensorType">
            <summary>
            The sensor type.
            <seealso cref="F:STIL.LineSensor.LineSensorParams.deviceType"/>
            <seealso cref="F:STIL.LineSensor.InvokeDeviceFuncParams.DP_GET_DEVICE_TYPE"/>
            </summary>
        </member>
        <member name="F:STIL.LineSensor.SensorType.SENSOR_CCS">
            <summary>CCS type sensor</summary>
        </member>
        <member name="F:STIL.LineSensor.SensorType.SENSOR_MPLS">
            <summary>MPLS type Sensor</summary>
        </member>
        <member name="F:STIL.LineSensor.SensorType.SENSOR_MPCCS">
            <summary>MPCCS type sensor</summary>
        </member>
        <member name="F:STIL.LineSensor.SensorType.SENSOR_MPLS_DM">
            <summary>MPLS-DM type sensor</summary>
        </member>
        <member name="F:STIL.LineSensor.SensorType.SENSOR_COUNT">
            <summary>MAX number of Sensor type</summary>
        </member>
        <member name="T:STIL.LineSensor.MeasureMode">
            <summary>
            The measure mode.
            <seealso cref="F:STIL.LineSensor.InvokeDeviceFuncParams.DP_GET_MODE"/>
            <seealso cref="F:STIL.LineSensor.InvokeDeviceFuncParams.DP_SET_MODE"/>
            </summary>
        </member>
        <member name="F:STIL.LineSensor.MeasureMode.DATA_DEFAULT">
            <summary>Not used mode</summary>
        </member>
        <member name="F:STIL.LineSensor.MeasureMode.FULL_SPECTRUM_PRETREATED_CCS">
            <summary>Not used Mode</summary>
        </member>
        <member name="F:STIL.LineSensor.MeasureMode.MEASURE_PARTIAL_SPECTRUM_PRETREATED_WITHOUT_WR_MPLS">
            <summary>Select partial pretreated spectrum without offset and soustract dark or multiply by 1/WhiteRef</summary>
        </member>
        <member name="F:STIL.LineSensor.MeasureMode.MEASURE_FULL_PRETREATED_SIGNAL">
            <summary>Select full pretreated spectrum on one spectro</summary>
        </member>
        <member name="F:STIL.LineSensor.MeasureMode.MEASURE_FULL_WHITEREF_MPLS">
            <summary>>Select full raw spectrum without dark and offset on one spectro</summary>
        </member>
        <member name="F:STIL.LineSensor.MeasureMode.MEASURE_FULL_RAW_FOR_DARK_MPLS">
            <summary>Select full raw spectrum without dark on one spectro </summary>
        </member>
        <member name="F:STIL.LineSensor.MeasureMode.MEASURE_FULL_RAW">
            <summary>Select full raw spectrum without offset on one spectro</summary>
        </member>
        <member name="F:STIL.LineSensor.MeasureMode.MEASURE_FULL_RAW_WITH_OFFSET">
            <summary>>Select full raw spectrum without dark and with offset on one spectro</summary>
        </member>
        <member name="T:STIL.LineSensor.TriggerType">
            <summary>
            The trigger IN types.
            <seealso cref="F:STIL.LineSensor.InvokeDeviceFuncParams.DP_GET_TRIGGER_IN_MODE"/>
            <seealso cref="F:STIL.LineSensor.InvokeDeviceFuncParams.DP_SET_TRIGGER_IN_MODE"/>
            </summary>
        </member>
        <member name="F:STIL.LineSensor.TriggerType.TRIGGER_RISING_EDGE">
            <summary>Select the trigger on rising edge</summary>
        </member>
        <member name="F:STIL.LineSensor.TriggerType.TRIGGER_FALLING_EDGE">
            <summary>Select the trigger on falling edge</summary>
        </member>
        <member name="F:STIL.LineSensor.TriggerType.TRIGGER_CONTINUOUS_MODE">
            <summary>Select the continuous mode</summary>
        </member>
        <member name="F:STIL.LineSensor.TriggerType.TRIGGER_SOFT">
            <summary>Select the software trigger</summary>
        </member>
        <member name="F:STIL.LineSensor.TriggerType.BURST_ON_RISING_EDGE">
            <summary>Select the burst trigger on rising edge</summary>
        </member>
        <member name="F:STIL.LineSensor.TriggerType.BURST_ON_FALLING_EDGE">
            <summary>Select the burst trigger on falling edge</summary>
        </member>
        <member name="F:STIL.LineSensor.TriggerType.TRIGGER_MODE_STOPPED">
            <summary>Select the stopped mode</summary>
        </member>
        <member name="F:STIL.LineSensor.TriggerType.BURST_ON_SOFTWARE_TRIGGER">
            <summary>Select the software burst trigger</summary>
        </member>
        <member name="F:STIL.LineSensor.TriggerType.START_STOP_TRIGGER_RISING_EDGE">
            <summary>Select the Start/Stop the trigger on rising edge (only MPLS-DM V2)</summary>
        </member>
        <member name="F:STIL.LineSensor.TriggerType.START_STOP_TRIGGER_FALLING_EDGE">
            <summary>Select the Start/Stop the trigger on falling edge (only MPLS-DM V2)</summary>
        </member>
        <member name="F:STIL.LineSensor.TriggerType.START_STOP_TRIGGER_HIGH_LEVEL">
            <summary>Select the Start/Stop the trigger on high level (only MPLS-DM V2)</summary>
        </member>
        <member name="F:STIL.LineSensor.TriggerType.START_STOP_TRIGGER_LOW_LEVEL">
            <summary>Select the Start/Stop the trigger on low level (only MPLS-DM V2)</summary>
        </member>
        <member name="F:STIL.LineSensor.TriggerType.START_STOP_SOFTWARE_TRIGGER_EDGE">
            <summary>Select the Start/Stop the software trigger on edge (only MPLS-DM V2)</summary>
        </member>
        <member name="F:STIL.LineSensor.TriggerType.START_STOP_SOFTWARE_TRIGGER_LEVEL">
            <summary>Select the Start/Stop the software trigger on level (only MPLS-DM V2)</summary>
        </member>
        <member name="F:STIL.LineSensor.TriggerType.MAX_TRIGGER_TYPE">
            <summary>MAX Trigger type</summary>
        </member>
        <member name="T:STIL.LineSensor.TriggerOutMode">
            <summary>
            The trigger OUT modes.
            <seealso cref="F:STIL.LineSensor.InvokeDeviceFuncParams.DP_GET_TRIGGER_OUT_MODE"/>
            <seealso cref="F:STIL.LineSensor.InvokeDeviceFuncParams.DP_SET_TRIGGER_OUT_MODE"/>
            </summary>
        </member>
        <member name="F:STIL.LineSensor.TriggerOutMode.TRIGGER_OUT_HIGH_DURING_FRAME">
            <summary>Active trigger OUT on HIGH level during frame acquisition</summary>
        </member>
        <member name="F:STIL.LineSensor.TriggerOutMode.TRIGGER_OUT_TOP_PER_FRAME">
            <summary>Active trigger OUT pulse per acquired frame</summary>
        </member>
        <member name="F:STIL.LineSensor.TriggerOutMode.TRIGGER_OUT_TOP_PER_LINE">
            <summary>Active trigger OUT pulse per acquired line</summary>
        </member>
        <member name="F:STIL.LineSensor.TriggerOutMode.MAX_TRIGGER_OUT_MODE">
            <summary>MAX number of trigger OUT mode</summary>
        </member>
        <member name="T:STIL.LineSensor.MotorRotationType">
            <summary>
            The motor rotation type.
            <seealso cref="F:STIL.LineSensor.RotationParams.MotorRotation"/>
            <seealso cref="F:STIL.LineSensor.InvokeDeviceFuncParams.DP_GET_MIRROR_SCAN_STATE"/>
            <seealso cref="F:STIL.LineSensor.InvokeDeviceFuncParams.DP_ENABLE_MOTOR_ROTATION"/>
            </summary>
        </member>
        <member name="F:STIL.LineSensor.MotorRotationType.MOTOR_SPEED_CONSTANT">
            <summary>Select the constant rotation speed of the motor</summary>
        </member>
        <member name="F:STIL.LineSensor.MotorRotationType.MOTOR_SPEED_ACCELERATION">
            <summary>Select the progressive rotation speed of the motor</summary>
        </member>
        <member name="F:STIL.LineSensor.MotorRotationType.MAX_MOTOR_ROTATION_TYPE">
            <summary>MAX motor rotation type</summary>
        </member>
        <member name="T:STIL.LineSensor.LightSourceType">
            <summary>
            the light source  type.
            </summary>
        </member>
        <member name="F:STIL.LineSensor.LightSourceType.LED_SOURCE_TYPE">
            <summary>Select the LED light source</summary>
        </member>
        <member name="F:STIL.LineSensor.LightSourceType.HALOGEN_SOURCE_TYPE">
            <summary>Select the Halogen light source</summary>
        </member>
        <member name="F:STIL.LineSensor.LightSourceType.EXTERNAL_SOURCE_TYPE">
            <summary>Select the external light source</summary>
        </member>
        <member name="F:STIL.LineSensor.LightSourceType.MAX_SOURCE_TYPE">
            <summary>MAX of light source typz</summary>
        </member>
        <member name="T:STIL.LineSensor.MultiPeakType">
            <summary>
            the position of peak to detect.
            </summary>
        </member>
        <member name="F:STIL.LineSensor.MultiPeakType.STRONGEST_PEAK">
            <summary>Select the strongest peak</summary>
        </member>
        <member name="F:STIL.LineSensor.MultiPeakType.FIRST_PEAK">
            <summary>Select the First peak</summary>
        </member>
        <member name="F:STIL.LineSensor.MultiPeakType.SECOND_PEAK">
            <summary>Select the Second peak</summary>
        </member>
        <member name="F:STIL.LineSensor.MultiPeakType.THIRD_PEAK">
            <summary>Select the Third peak</summary>
        </member>
        <member name="F:STIL.LineSensor.MultiPeakType.FOURTH_PEAK">
            <summary>Select the Fourth peak</summary>
        </member>
        <member name="F:STIL.LineSensor.MultiPeakType.LAST_PEAK">
            <summary>Select the Last peak</summary>
        </member>
        <member name="F:STIL.LineSensor.MultiPeakType.MAX_VALUE_PEAK_TYPE">
            <summary>MAX of light source type</summary>
        </member>
        <member name="T:STIL.LineSensor.PixelFormat">
            <summary>
            Pixel format type definitions and values.
            </summary>
        </member>
        <member name="F:STIL.LineSensor.PixelFormat.MONO8">
            <summary>8 bit pixel</summary>
        </member>
        <member name="F:STIL.LineSensor.PixelFormat.MON10">
            <summary>10 bit pixel</summary>
        </member>
        <member name="F:STIL.LineSensor.PixelFormat.MONO10_PACKED">
            <summary>packet of two 10 bit pixel into 3 bytes pixel data</summary>
        </member>
        <member name="F:STIL.LineSensor.PixelFormat.MONO12">
            <summary>12 bit pixel</summary>
        </member>
        <member name="F:STIL.LineSensor.PixelFormat.MONO12_PACKED">
            <summary>packet of two 12 bit pixel into 3 bytes pixel data</summary>
        </member>
        <member name="F:STIL.LineSensor.PixelFormat.PIXEL_FORMAT_COUNT">
            <summary>pixel format count</summary>
        </member>
        <member name="T:STIL.LineSensor.MeasurementType">
            <summary>
            Measure types definitions for altitude or thickness.
            </summary>
        </member>
        <member name="F:STIL.LineSensor.MeasurementType.ALTITUDE_MODE">
            <summary>Set sensor to Altitude Measurement (All sensor)</summary>
        </member>
        <member name="F:STIL.LineSensor.MeasurementType.THICKNESS_MODE">
            <summary>Set sensor to Thickness Measurement (only MPLS-DM V2)</summary>
        </member>
        <member name="F:STIL.LineSensor.MeasurementType.MAX_MEASUREMENT_TYPE">
            <summary>MAX of Measurement type</summary>
        </member>
        <member name="T:STIL.LineSensor.enSensorVersion">
            <summary>
            Defined all line sensors versions.
            </summary>
        </member>
        <member name="F:STIL.LineSensor.enSensorVersion.SENSOR_MPLS180_V1">
            <summary>the MPLS-180 for hardware version 1</summary>
        </member>
        <member name="F:STIL.LineSensor.enSensorVersion.SENSOR_MPLSDM_V1">
            <summary>the MPLS-DM for hardware version 1</summary>
        </member>
        <member name="F:STIL.LineSensor.enSensorVersion.SENSOR_MPLSDM_V2">
            <summary>the MPLS-DM for hardware version 2</summary>
        </member>
        <member name="F:STIL.LineSensor.enSensorVersion.MAX_SENSOR_VERSION">
            <summary>MAX of Sensor version</summary>
        </member>
        <member name="T:STIL.LineSensor.InvokeDeviceFuncParams">
            <summary>
            The different functionalities that can be invoked with the function InvokeDeviceFunc of LineSensor class.
            </summary>
        </member>
        <member name="F:STIL.LineSensor.InvokeDeviceFuncParams.DP_GET_BYTES_PER_SECOND">
            <summary>[000]Get the number of bytes transmitted per seconds (0)</summary>
        </member>
        <member name="F:STIL.LineSensor.InvokeDeviceFuncParams.DP_SEND_DARK_SIGNAL_TO_MPLS180">
            <summary>[001]Private command</summary>
        </member>
        <member name="F:STIL.LineSensor.InvokeDeviceFuncParams.DP_GET_MODE">
            <summary>[002]Private command</summary>
        </member>
        <member name="F:STIL.LineSensor.InvokeDeviceFuncParams.DP_GET_MAX_DARK">
            <summary>[003]Return the maximum signal accepted during dark operation. If signal higher than this value, the fiber will be disabled</summary>
        </member>
        <member name="F:STIL.LineSensor.InvokeDeviceFuncParams.DP_SEND_TRIGGER">
            <summary>[004]To latch the trigger in case of soft trigger mode (call <see cref="F:STIL.LineSensor.InvokeDeviceFuncParams.DP_SET_TRIGGER_IN_MODE"/> function before)</summary>
        </member>
        <member name="F:STIL.LineSensor.InvokeDeviceFuncParams.DP_GET_COMMUNICATION_ERROR_COUNT">
            <summary>[005]Returns the number of communication error since the start acquisition</summary>
        </member>
        <member name="F:STIL.LineSensor.InvokeDeviceFuncParams.DP_GET_ALARM_FAN_STATE">
            <summary>[006]Return Alarm fan state</summary>
        </member>
        <member name="F:STIL.LineSensor.InvokeDeviceFuncParams.DP_GET_ALARM_CAME_STATE">
            <summary>[007]Return Came Alarm state</summary>
        </member>
        <member name="F:STIL.LineSensor.InvokeDeviceFuncParams.DP_GET_ALARM_LIGHT1_STATE">
            <summary>[008]Return Light 1 Alarm state</summary>
        </member>
        <member name="F:STIL.LineSensor.InvokeDeviceFuncParams.DP_GET_ALARM_LIGHT2_STATE">
            <summary>[090]Return Light 2 Alarm state</summary>
        </member>
        <member name="F:STIL.LineSensor.InvokeDeviceFuncParams.DP_GET_FULLSCALE">
            <summary>[010]GetFullscale (Calibration table)</summary>
        </member>
        <member name="F:STIL.LineSensor.InvokeDeviceFuncParams.DP_GET_MIRROR_SCAN_STATE">
            <summary>[011]Returns 1 if mirror scanning is enabled</summary>
        </member>
        <member name="F:STIL.LineSensor.InvokeDeviceFuncParams.DP_GET_MIRROR_NB_LINES">
            <summary>[012]Returns the number of lines by image</summary>
        </member>
        <member name="F:STIL.LineSensor.InvokeDeviceFuncParams.DP_GET_MEASUREMENT_COUNT">
            <summary>[013]Get the number of acquired image</summary>
        </member>
        <member name="F:STIL.LineSensor.InvokeDeviceFuncParams.DP_RESET_MEASUREMENT_COUNTER">
            <summary>[014]Reset the measurement counter</summary>
        </member>
        <member name="F:STIL.LineSensor.InvokeDeviceFuncParams.DP_GET_NB_PROFILES_AVAILABLE">
            <summary>[015]Returns the number of profiles available into the DLL</summary>
        </member>
        <member name="F:STIL.LineSensor.InvokeDeviceFuncParams.DP_GET_NB_IMAGES_BURST_TRIGGER">
            <summary>[016]return the number of images in Busrt trigger mode</summary>
        </member>
        <member name="F:STIL.LineSensor.InvokeDeviceFuncParams.DP_GET_INTENSITY_NORMALIZATION_STATE">
            <summary>[017]Get Intensity normalization Status</summary>
        </member>
        <member name="F:STIL.LineSensor.InvokeDeviceFuncParams.DP_GET_REPLACE_DARK_WITH_WHITE_FLAG">
            <summary>[018]Get the replace Dark with Whiteref Flag</summary>
        </member>
        <member name="F:STIL.LineSensor.InvokeDeviceFuncParams.DP_GET_BINNING_FACTOR">
            <summary>[019]return binning factor</summary>
        </member>
        <member name="F:STIL.LineSensor.InvokeDeviceFuncParams.DP_GET_ENABLE_BINNING">
            <summary>[020]return enable binning</summary>
        </member>
        <member name="F:STIL.LineSensor.InvokeDeviceFuncParams.DP_GET_ENABLE_FIRST_PEAK_MODE">
            <summary>[021]return first peak mode enable</summary>
        </member>
        <member name="F:STIL.LineSensor.InvokeDeviceFuncParams.DP_GET_FIRMWARE_DETECTION_THRESHOLD">
            <summary>[022]return first peak mode Detection Threshold</summary>
        </member>
        <member name="F:STIL.LineSensor.InvokeDeviceFuncParams.DP_GET_EXPOSURE_TIME">
            <summary>[023]return exposure time in ns</summary>
        </member>
        <member name="F:STIL.LineSensor.InvokeDeviceFuncParams.DP_GET_DEVICE_TYPE">
            <summary>[024]return le type de capteur (MPLS/MPCCS/CCS)</summary>
        </member>
        <member name="F:STIL.LineSensor.InvokeDeviceFuncParams.DP_GET_LIGHT_SOURCE_TYPE">
            <summary>[025]return light source type 0=LED 1=HALOGEN LAMP 2=EXTERNAL</summary>
        </member>
        <member name="F:STIL.LineSensor.InvokeDeviceFuncParams.DP_GET_LED_NB_TOTAL_CYCLE">
            <summary>[026]return number of Total LED cycle</summary>
        </member>
        <member name="F:STIL.LineSensor.InvokeDeviceFuncParams.DP_GET_LED_NB_CYCLE_ON">
            <summary>[027]return number of ON LED Cycle</summary>
        </member>
        <member name="F:STIL.LineSensor.InvokeDeviceFuncParams.DP_GET_LED_INTENSITY">
            <summary>[028]return LED intensity (0..100)</summary>
        </member>
        <member name="F:STIL.LineSensor.InvokeDeviceFuncParams.DP_GET_LAMP_STATE">
            <summary>[029]return halogen lamp state</summary>
        </member>
        <member name="F:STIL.LineSensor.InvokeDeviceFuncParams.DP_GET_DETECTION_THRESHOLD">
            <summary>[030]return detection threshold (Obsolete function : use <see cref="F:STIL.LineSensor.InvokeDeviceFuncParams.DP_GET_FIRMWARE_DETECTION_THRESHOLD"/>)</summary>
        </member>
        <member name="F:STIL.LineSensor.InvokeDeviceFuncParams.DP_GET_OPTICAL_DELAY">
            <summary>[031]Private command</summary>
        </member>
        <member name="F:STIL.LineSensor.InvokeDeviceFuncParams.DP_GET_TRIGGER_IN_MODE">
            <summary>[032]return Selected Trigger Mode</summary>
        </member>
        <member name="F:STIL.LineSensor.InvokeDeviceFuncParams.DP_GET_WHITEREF_CLIPPING_THRESHOLD">
            <summary>[033]return Whiteref clipping threshold (1..4095, typ.=256)</summary>
        </member>
        <member name="F:STIL.LineSensor.InvokeDeviceFuncParams.DP_GET_FULL_BUFFER_ERROR_COUNT">
            <summary>[034]Returns the number of full buufer error since the start acquision</summary>
        </member>
        <member name="F:STIL.LineSensor.InvokeDeviceFuncParams.DP_GET_CHECKSUM_ERROR_COUNT">
            <summary>[035]Returns the number of checksum error since the start acquision</summary>
        </member>
        <member name="F:STIL.LineSensor.InvokeDeviceFuncParams.DP_GET_USB_TRANSFER_ERROR_COUNT">
            <summary>[036]Returns the number of communication error since the start acquision</summary>
        </member>
        <member name="F:STIL.LineSensor.InvokeDeviceFuncParams.DP_GET_FRAME_SIZE_ERROR_COUNT">
            <summary>[037]Returns the number of Frame size error since the start acquision</summary>
        </member>
        <member name="F:STIL.LineSensor.InvokeDeviceFuncParams.DP_GET_REAL_FORMAT_SIZE">
            <summary>[038]Returns the real format size (4 for float and 8 for double)</summary>
        </member>
        <member name="F:STIL.LineSensor.InvokeDeviceFuncParams.DP_GET_TRIGGER_OUT_MODE">
            <summary>[039]return Selected Trigger Out Mode</summary>
        </member>
        <member name="F:STIL.LineSensor.InvokeDeviceFuncParams.DP_GET_FRAME_PHYSICAL_WIDTH">
            <summary>[040]return Frame Physical Width (in µm)</summary>
        </member>
        <member name="F:STIL.LineSensor.InvokeDeviceFuncParams.DP_GET_FRAME_PHYSICAL_HEIGHT">
            <summary>[041]return Frame Physical Height (in µm)</summary>
        </member>
        <member name="F:STIL.LineSensor.InvokeDeviceFuncParams.DP_GET_CCD_COUNT">
            <summary>[042]return CCD Count</summary>
        </member>
        <member name="F:STIL.LineSensor.InvokeDeviceFuncParams.DP_GET_SPECTRO_COUNT">
            <summary>[043]return Spectro Count</summary>
        </member>
        <member name="F:STIL.LineSensor.InvokeDeviceFuncParams.DP_GET_CALIBRATION_COEF_STATE">
            <summary>[044] return Enable calibration coef</summary>
        </member>
        <member name="F:STIL.LineSensor.InvokeDeviceFuncParams.DP_GET_ENABLE_RAW_INTENSITY">
            <summary>[045] return Enable raw intensity option</summary>
        </member>
        <member name="F:STIL.LineSensor.InvokeDeviceFuncParams.DP_GET_HCURSOR_LEVEL">
            <summary>[046] return cursor level</summary>
        </member>
        <member name="F:STIL.LineSensor.InvokeDeviceFuncParams.DP_GET_REPLACE_DARK_WITH_WHITEREF">
            <summary>[047] return Enable replace Dark with WhiteRef flag</summary>
        </member>
        <member name="F:STIL.LineSensor.InvokeDeviceFuncParams.DP_GET_MAX_VALLEY_TO_PEAK_RATIO">
            <summary>[048] return the max threshold for valley-to-peak detection parameter</summary>
        </member>
        <!-- Commentaire XML incorrect ignoré pour le membre "F:STIL.LineSensor.InvokeDeviceFuncParams.DP_GET_FIBER_COUNT" -->
        <!-- Commentaire XML incorrect ignoré pour le membre "F:STIL.LineSensor.InvokeDeviceFuncParams.DP_GET_PIXEL_FORMAT" -->
        <!-- Commentaire XML incorrect ignoré pour le membre "F:STIL.LineSensor.InvokeDeviceFuncParams.DP_GET_NUMBER_OF_PEAK" -->
        <!-- Commentaire XML incorrect ignoré pour le membre "F:STIL.LineSensor.InvokeDeviceFuncParams.DP_GET_TYPE_OF_PEAK1" -->
        <!-- Commentaire XML incorrect ignoré pour le membre "F:STIL.LineSensor.InvokeDeviceFuncParams.DP_GET_TYPE_OF_PEAK2" -->
        <!-- Commentaire XML incorrect ignoré pour le membre "F:STIL.LineSensor.InvokeDeviceFuncParams.DP_GET_REFRACTIVE_INDEX" -->
        <!-- Commentaire XML incorrect ignoré pour le membre "F:STIL.LineSensor.InvokeDeviceFuncParams.DP_GET_MEASUREMENT_MODE" -->
        <!-- Commentaire XML incorrect ignoré pour le membre "F:STIL.LineSensor.InvokeDeviceFuncParams.DP_GET_SENSOR_VERSION" -->
        <!-- Commentaire XML incorrect ignoré pour le membre "F:STIL.LineSensor.InvokeDeviceFuncParams.DP_STOP_TRIGGER" -->
        <member name="F:STIL.LineSensor.InvokeDeviceFuncParams.DP_SET_LIGHT_INTENSITY">
            <summary><remarks>[2200]SETTING FUNCTIONS WITH INT PARAMETER</remarks>Set On/off Halogen Lamp</summary>
        </member>
        <member name="F:STIL.LineSensor.InvokeDeviceFuncParams.DP_SET_EXPOSURE_TIME">
            <summary>[2201]Specify the exposure time in nanoseconds. Values must be a factor of 10</summary>
        </member>
        <member name="F:STIL.LineSensor.InvokeDeviceFuncParams.DP_SET_FULL_WINDOW_SENSOR_NUMBER_SENT">
            <summary>[2202]Private function</summary>
        </member>
        <member name="F:STIL.LineSensor.InvokeDeviceFuncParams.DP_SET_TRIGGER_IN_MODE">
            <summary>[2203]Set trigger IN mode : <see cref="T:STIL.LineSensor.TriggerType"/></summary>
        </member>
        <member name="F:STIL.LineSensor.InvokeDeviceFuncParams.DP_SET_TRIGGER_OUT_MODE">
            <summary>[2204]Set trigger OUT mode : 0 = Trigger Out High level during frame acquisition; 1 = Trigger Out rising edge per frame; 2 = Trigger Out rising edge per line; </summary>
        </member>
        <member name="F:STIL.LineSensor.InvokeDeviceFuncParams.DP_SET_MODE">
            <summary>[2205]Private function</summary>
        </member>
        <member name="F:STIL.LineSensor.InvokeDeviceFuncParams.DP_SET_MAX_DARK">
            <summary>[2206]Set the maximum dark signal allowed while dark is being processed</summary>
        </member>
        <member name="F:STIL.LineSensor.InvokeDeviceFuncParams.DP_SET_MIN_INTENSITY">
            <summary>[2207]Set the minimum intensity needed to consider a measurement to be valid (otherwise, altitude 0 will be set)</summary>
        </member>
        <member name="F:STIL.LineSensor.InvokeDeviceFuncParams.DP_SET_LED_NB_CYCLE_ON">
            <summary>[2208]For MPLS 180 Led : Range(0;2^31-1)</summary>
        </member>
        <member name="F:STIL.LineSensor.InvokeDeviceFuncParams.DP_SET_LED_NB_TOTAL_CYCLE">
            <summary>[2209]For MPLS 180 Led : Range(0;2^31-1)</summary>
        </member>
        <member name="F:STIL.LineSensor.InvokeDeviceFuncParams.DP_ENABLE_FIRST_PEAK_ALGORITHM">
            <summary>[2210]Threshold value for first peak detection (0-4095), if 0, first peak is disabled</summary>
        </member>
        <member name="F:STIL.LineSensor.InvokeDeviceFuncParams.DP_SET_ENABLE_BINNING">
            <summary>[2211]Enable binning of microwindow pixels</summary>
        </member>
        <member name="F:STIL.LineSensor.InvokeDeviceFuncParams.DP_SET_NB_IMAGES_BURST_TRIGGER">
            <summary>[2212]Set the number of images for "burst" trigger mode</summary>
        </member>
        <member name="F:STIL.LineSensor.InvokeDeviceFuncParams.DP_SET_ENABLE_INTENSITY_NORMALIZATION">
            <summary>[2213]Enable or disable Intensity normalization</summary> 
        </member>
        <member name="F:STIL.LineSensor.InvokeDeviceFuncParams.DP_SET_REPLACE_DARK_WITH_WHITEREF">
            <summary>[2214]Enable or disable the replace Dark with WhiteRef flag</summary>
        </member>
        <member name="F:STIL.LineSensor.InvokeDeviceFuncParams.DP_SET_FIRMWARE_DETECTION_THRESHOLD">
            <summary>[2215]Set Detection threshold (1..4095, typ.=50)</summary>
        </member>
        <member name="F:STIL.LineSensor.InvokeDeviceFuncParams.DP_SET_BINNING_FACTOR">
            <summary>[2216]Private</summary>
        </member>
        <member name="F:STIL.LineSensor.InvokeDeviceFuncParams.DP_SET_LIGHT_SOURCE_TYPE">
            <summary>[2217]Private</summary>  
        </member>
        <member name="F:STIL.LineSensor.InvokeDeviceFuncParams.DP_SET_LED_INTENSITY">
            <summary>[2218]Set LED intensity (0..100)</summary>
        </member>
        <member name="F:STIL.LineSensor.InvokeDeviceFuncParams.DP_SET_WHITEREF_CLIPPING_THRESHOLD">
            <summary>[2219]Set Whiteref clipping threshold (1..4095, typ.=150)</summary>
        </member>
        <member name="F:STIL.LineSensor.InvokeDeviceFuncParams.DP_SET_REAL_NUMBER_FORMAT">
            <summary>[2220]Set Real number format (4 to float, 8 to double)</summary>
        </member>
        <member name="F:STIL.LineSensor.InvokeDeviceFuncParams.DP_SET_ENABLE_CALIBRATION_COEF">
            <summary>[2221]Enable calibration coef</summary>
        </member>
        <member name="F:STIL.LineSensor.InvokeDeviceFuncParams.DP_SET_ENABLE_RAW_INTENSITY">
            <summary>[2222]Enable the mode where measured intensity=raw intensity instead of preprocessed intensity</summary>
        </member>
        <member name="F:STIL.LineSensor.InvokeDeviceFuncParams.DP_SET_HCURSOR_LEVEL">
            <summary>[2223]niveau de cursor</summary>
        </member>
        <!-- Commentaire XML incorrect ignoré pour le membre "F:STIL.LineSensor.InvokeDeviceFuncParams.DP_SET_PIXEL_FORMAT" -->
        <!-- Commentaire XML incorrect ignoré pour le membre "F:STIL.LineSensor.InvokeDeviceFuncParams.DP_SET_TYPE_OF_PEAK1" -->
        <!-- Commentaire XML incorrect ignoré pour le membre "F:STIL.LineSensor.InvokeDeviceFuncParams.DP_SET_TYPE_OF_PEAK2" -->
        <!-- Commentaire XML incorrect ignoré pour le membre "F:STIL.LineSensor.InvokeDeviceFuncParams.DP_SET_MEASUREMENT_MODE" -->
        <!-- Commentaire XML incorrect ignoré pour le membre "F:STIL.LineSensor.InvokeDeviceFuncParams.DP_SET_DEFAULT_CALIBRATION_TABLES" -->
        <member name="F:STIL.LineSensor.InvokeDeviceFuncParams.DP_SET_FRQ_PIXEL">
            
            <summary><remarks>[500]SETTING FUNCTIONS WITH DOUBLE PARAMETER</remarks>Set the pixel Frequency</summary>
        </member>
        <member name="F:STIL.LineSensor.InvokeDeviceFuncParams.DP_SET_SIMULATOR_BARYCENTER_POS">
            <summary>[501]Private function</summary>
        </member>
        <member name="F:STIL.LineSensor.InvokeDeviceFuncParams.DP_SET_OPTICAL_DELAY">
            <summary>[502]Private function</summary>
        </member>
        <member name="F:STIL.LineSensor.InvokeDeviceFuncParams.DP_SET_MAX_VALLEY_TO_PEAK_RATIO">
            <summary>[503]Send the max threshold for valley-to-peak detection parameter</summary>
        </member>
        <member name="F:STIL.LineSensor.InvokeDeviceFuncParams.DP_SET_MAX_VALLEY_TO_PEAK2_RATIO">
            <summary>[503]Send the max threshold Peak 2 for valley-to-peak detection parameter</summary>
        </member>
        <member name="F:STIL.LineSensor.InvokeDeviceFuncParams.DP_ENABLE_MOTOR_ROTATION">
            <summary>[1100]Enable or disable motor rotation (if available)</summary>
        </member>
        <member name="F:STIL.LineSensor.InvokeDeviceFuncParams.DP_SET_LAMP_ON">
            <summary>[1101]Halogen lamp ON/OFF</summary>
        </member>
        <!-- Commentaire XML incorrect ignoré pour le membre "F:STIL.LineSensor.InvokeDeviceFuncParams.DP_ENABLE_HCURSOR" -->
        <member name="F:STIL.LineSensor.InvokeDeviceFuncParams.DP_SAVE_DARK_SIGNALS_FROM_SENSORS_TO_FILE">
            
            <summary><remarks>[800]SETTING FUNCTIONS WITH STRING  PARAMETER</remarks>Save all dark signals from ALL sensors into a file</summary>
        </member>
        <member name="F:STIL.LineSensor.InvokeDeviceFuncParams.DP_LOAD_DARK_SIGNALS_FROM_FILE_INTO_SENSORS">
            <summary>[801]Load a file containing all sensors dark signal</summary>
        </member>
        <member name="F:STIL.LineSensor.InvokeDeviceFuncParams.DP_SAVE_WHITE_SIGNALS_FROM_SENSORS_TO_FILE">
            <summary>[802]Save all white signals from ALL sensors into a file</summary>
        </member>
        <member name="F:STIL.LineSensor.InvokeDeviceFuncParams.DP_LOAD_WHITE_SIGNALS_FROM_FILE_TO_SENSORS">
            <summary>[803]Load a file containing all sensors white signal</summary>
        </member>
        <member name="F:STIL.LineSensor.InvokeDeviceFuncParams.DP_LOAD_CALIBRATION_TABLES_FROM_FILE_TO_SENSORS">
            <summary>[804]Load a file containing all sensors calibration table</summary>
        </member>
        <member name="F:STIL.LineSensor.InvokeDeviceFuncParams.DP_LOAD_FIBER_MAPPING_TABLE_FILE">
            <summary>[805]Load a file for the fiber order</summary>
        </member>
        <member name="F:STIL.LineSensor.InvokeDeviceFuncParams.DP_LOAD_STATE_FILE">
            <summary>[806]Load State array file</summary>
        </member>
        <member name="F:STIL.LineSensor.InvokeDeviceFuncParams.DP_SAVE_STATE_FILE">
            <summary>[807]save State array file</summary>
        </member>
        <member name="F:STIL.LineSensor.InvokeDeviceFuncParams.DP_LOAD_INTENSITY_NORMALIZATION_FROM_FILE_TO_SENSORS">
            <summary>[808]Load a file containing the Intensity Normalization table</summary>
        </member>
        <member name="F:STIL.LineSensor.InvokeDeviceFuncParams.DP_SAVE_INTENSITY_NORMALIZATION_FROM_SENSORS_TO_FILE">
            <summary>[809]Save the Intensity Normalization array</summary>
        </member>
        <member name="F:STIL.LineSensor.InvokeDeviceFuncParams.DP_SAVE_FIBER_MAPPING_TABLE_FILE">
            <summary>[810]Save a file containing all fiber mapping table</summary>
        </member>
        <member name="F:STIL.LineSensor.InvokeDeviceFuncParams.DP_SAVE_CALIBRATION_TABLES_FROM_FILE_TO_SENSORS">
            <summary>[811]Save a file containing all sensors calibrations</summary>
        </member>
        <member name="F:STIL.LineSensor.InvokeDeviceFuncParams.DP_LOAD_CALIBRATION_COEF_FROM_FILE_TO_SENSORS">
            <summary>[812]Load a file containing all sensors calibration coef</summary>
        </member>
        <member name="F:STIL.LineSensor.InvokeDeviceFuncParams.DP_SAVE_CALIBRATION_COEF_FROM_SENSORS_TO_FILE">
            <summary>[813]Save a file containing all sensors calibration coef</summary>
        </member>
        <member name="F:STIL.LineSensor.InvokeDeviceFuncParams.DP_GET_COPY_CONFIG_STRUCT">
            
            <summary><remarks>SETTING FUNCTIONS WITH POINTER PARAMETER</remarks>Get All configuration in parameters struct</summary>
        </member>
        <member name="T:STIL.LineSensor.InvokeSensorFuncParams">
            <summary>
            The different functionalities that can be invoked with the function InvokeSensorFunc of LineSensor class.
            </summary>
        </member>
        <member name="F:STIL.LineSensor.InvokeSensorFuncParams.SP_GET_DARK_SIGNAL_FILE_PATH">
            <summary>Private function</summary>
        </member>
        <member name="F:STIL.LineSensor.InvokeSensorFuncParams.SP_LOAD_DARK_SIGNAL_FROM_BIN_FILE">
            <summary>Private function</summary>
        </member>
        <member name="F:STIL.LineSensor.InvokeSensorFuncParams.SP_LOAD_DARK_SIGNAL_FROM_TEXT_FILE">
            <summary>Private function</summary>
        </member>
        <member name="F:STIL.LineSensor.InvokeSensorFuncParams.SP_SAVE_DARK_SIGNAL_TO_BIN_FILE">
            <summary>Private function</summary>
        </member>
        <member name="F:STIL.LineSensor.InvokeSensorFuncParams.SP_SAVE_DARK_SIGNAL_TO_TEXT_FILE">
            <summary>Private function</summary>
        </member>
        <member name="F:STIL.LineSensor.InvokeSensorFuncParams.SP_SAVE_DBG_CURRENT_SPECTRO">
            <summary>Private function</summary>
        </member>
        <member name="F:STIL.LineSensor.InvokeSensorFuncParams.SP_SET_WHITEREF_CLIPPING_THRESHOLD">
            <summary>Private function</summary>
        </member>
        <member name="F:STIL.LineSensor.InvokeSensorFuncParams.SP_GET_WHITEREF_CLIPPING_THRESHOLD">
            <summary>Private function</summary>
        </member>
        <member name="T:STIL.LineSensor.InvokeSpectroFuncParams">
            <summary>
            The different functionalities that can be invoked with the function InvokeSpectroFunc of LineSensor class.
            </summary>
        </member>
        <member name="F:STIL.LineSensor.InvokeSpectroFuncParams.SP_GET_WINDOW_BEGIN">
            <summary>Private function</summary>
        </member>
        <member name="F:STIL.LineSensor.InvokeSpectroFuncParams.SP_GET_WINDOW_END">
            <summary>Private function</summary>
        </member>
        <member name="F:STIL.LineSensor.InvokeSpectroFuncParams.SP_GET_CALIBRATION_FILE_PATH">
            <summary>Private function</summary>
        </member>
        <member name="F:STIL.LineSensor.InvokeSpectroFuncParams.SP_GET_MIN_INTENSITY">
            <summary>Private function</summary>
        </member>
        <member name="F:STIL.LineSensor.InvokeSpectroFuncParams.SP_GET_FIBER_STATUS">
            <summary>Private function</summary>
        </member>
        <member name="F:STIL.LineSensor.InvokeSpectroFuncParams.SP_GET_MAX_DARK">
            <summary>Private function</summary>
        </member>
        <member name="F:STIL.LineSensor.InvokeSpectroFuncParams.SP_GET_BARYCENTER">
            <summary>Private function</summary>
        </member>
        <member name="F:STIL.LineSensor.InvokeSpectroFuncParams.SP_GET_PEAK_DETECTION_ALGO">
            <summary>Get the selected algorythm for peak detection <see cref="T:STIL.LineSensor.PeakDetectionAlgo"/></summary>
        </member>
        <member name="F:STIL.LineSensor.InvokeSpectroFuncParams.SP_GET_DLL_DETECTION_THRESHOLD">
            <summary>Get the dll detection threshold></summary>
        </member>
        <member name="F:STIL.LineSensor.InvokeSpectroFuncParams.SP_SET_WINDOW_BEGIN">
            <summary><remarks>SETTING FUNCTIONS WITH INT PARAMETER</remarks>Private function</summary>
        </member>
        <member name="F:STIL.LineSensor.InvokeSpectroFuncParams.SP_SET_WINDOW_END">
            <summary>Private function</summary>
        </member>
        <member name="F:STIL.LineSensor.InvokeSpectroFuncParams.SP_SET_MIN_INTENSITY">
            <summary>Private function</summary>
        </member>
        <member name="F:STIL.LineSensor.InvokeSpectroFuncParams.SP_SET_FIBER_STATUS">
            <summary></summary>
        </member>
        <member name="F:STIL.LineSensor.InvokeSpectroFuncParams.SP_SET_MAX_DARK">
            <summary>Private function</summary>
        </member>
        <member name="F:STIL.LineSensor.InvokeSpectroFuncParams.SP_SET_PEAK_DETECTION_ALGO">
            <summary>Select the algorythm for peak detection <see cref="T:STIL.LineSensor.PeakDetectionAlgo"/></summary>
        </member>
        <member name="F:STIL.LineSensor.InvokeSpectroFuncParams.SP_SET_DLL_DETECTION_THRESHOLD">
            <summary>Set the dll detection threshold></summary>
        </member>
        <member name="F:STIL.LineSensor.InvokeSpectroFuncParams.SP_LOAD_BIN_CALIBRATION_FILE">
            <summary>Private function</summary>
        </member>
        <member name="F:STIL.LineSensor.InvokeSpectroFuncParams.SP_LOAD_TEXT_CALIBRATION_FILE">
            <summary>Private function</summary>
        </member>
        <member name="T:STIL.LineSensor.ErrorLineSensor">
            <summary>
            The different error of line sensor.
            </summary>
        </member>
        <member name="F:STIL.LineSensor.ErrorLineSensor.LS_ERR">
            <summary>LS_ERR</summary>
        </member>
        <member name="F:STIL.LineSensor.ErrorLineSensor.LS_ERR_NONE">
            <summary>LS_ERR_NONE</summary>
        </member>
        <member name="F:STIL.LineSensor.ErrorLineSensor.LS_ERR_PARAM_INVALID">
            <summary>LS_ERR_PARAM_INVALID</summary>
        </member>
        <member name="F:STIL.LineSensor.ErrorLineSensor.LS_ERR_PARAM_TYPE_ERROR">
            <summary>LS_ERR_PARAM_TYPE_ERROR</summary>
        </member>
        <member name="F:STIL.LineSensor.ErrorLineSensor.LS_ERR_UNKNOWN_PROPERTY">
            <summary>LS_ERR_UNKNOWN_PROPERTY</summary>
        </member>
        <member name="F:STIL.LineSensor.ErrorLineSensor.LS_ERR_READ_ONLY_PROPERTY">
            <summary>LS_ERR_READ_ONLY_PROPERTY</summary>
        </member>
        <member name="F:STIL.LineSensor.ErrorLineSensor.LS_ERR_SENSOR_NOT_EXISTS">
            <summary>LS_ERR_SENSOR_NOT_EXISTS</summary>
        </member>
        <member name="F:STIL.LineSensor.ErrorLineSensor.LS_ERR_SENSOR_NOT_INITIALIZED">
            <summary>LS_ERR_SENSOR_NOT_INITIALIZED</summary>
        </member>
        <member name="F:STIL.LineSensor.ErrorLineSensor.LS_ERR_SENSOR_NOT_CONNECTED">
            <summary>LS_ERR_SENSOR_NOT_CONNECTED</summary>
        </member>
        <member name="F:STIL.LineSensor.ErrorLineSensor.LS_ERR_SENSOR_ACQ_DELAY">
            <summary>LS_ERR_SENSOR_ACQ_DELAY</summary>
        </member>
        <member name="F:STIL.LineSensor.ErrorLineSensor.LS_ERR_SAVING_CONFIG_FILE">
            <summary>LS_ERR_SAVING_CONFIG_FILE</summary>
        </member>
        <member name="F:STIL.LineSensor.ErrorLineSensor.LS_ERR_DEVICE_NOT_CREATED">
            <summary>LS_ERR_DEVICE_NOT_CREATED</summary>
        </member>
        <member name="F:STIL.LineSensor.ErrorLineSensor.LS_ERR_ALLOCATED_READ_BUFFER">
            <summary>LS_ERR_ALLOCATED_READ_BUFFER</summary>
        </member>
        <member name="F:STIL.LineSensor.ErrorLineSensor.LS_ERR_TIMEOUT">
            <summary>LS_ERR_TIMEOUT</summary>
        </member>
        <member name="F:STIL.LineSensor.ErrorLineSensor.LS_ERR_DARK_FAILED">
            <summary>LS_ERR_DARK_FAILED</summary>
        </member>
        <member name="F:STIL.LineSensor.ErrorLineSensor.LS_ERR_DARK_TOO_MUCH_SIGNAL">
            <summary>LS_ERR_DARK_TOO_MUCH_SIGNAL</summary>
        </member>
        <member name="F:STIL.LineSensor.ErrorLineSensor.LS_ERR_WHITE_FAILED">
            <summary>LS_ERR_WHITE_FAILED</summary>
        </member>
        <member name="F:STIL.LineSensor.ErrorLineSensor.LS_ERR_INVALID_CALIBRATION_TABLE">
            <summary>LS_ERR_INVALID_CALIBRATION_TABLE</summary>
        </member>
        <member name="F:STIL.LineSensor.ErrorLineSensor.LS_ERR_WRITE_CALIBRATION_TABLE">
            <summary>LS_ERR_WRITE_CALIBRATION_TABLE</summary>
        </member>
        <member name="F:STIL.LineSensor.ErrorLineSensor.LS_ERR_INVALID_FILE">
            <summary>LS_ERR_INVALID_FILE</summary>
        </member>
        <member name="F:STIL.LineSensor.ErrorLineSensor.LS_ERR_ACQUISITION_NOT_IN_PROGRESS">
            <summary>LS_ERR_ACQUISITION_NOT_IN_PROGRESS</summary>
        </member>
        <member name="F:STIL.LineSensor.ErrorLineSensor.LS_ERR_ACQUISITION_IN_PROGRESS">
            <summary>LS_ERR_ACQUISITION_IN_PROGRESS</summary>
        </member>
        <member name="F:STIL.LineSensor.ErrorLineSensor.LS_ERR_ACQUISITION_TIMEOUT">
            <summary>LS_ERR</summary>
        </member>
        <member name="F:STIL.LineSensor.ErrorLineSensor.LS_ERR_TO_LOAD_ROUGHNESS_FILE">
            <summary>LS_ERR_TO_LOAD_ROUGHNESS_FILE</summary>
        </member>
        <member name="F:STIL.LineSensor.ErrorLineSensor.LS_ERR_TO_SAVE_ROUGHNESS_FILE">
            <summary>LS_ERR_TO_SAVE_ROUGHNESS_FILE</summary>
        </member>
        <member name="F:STIL.LineSensor.ErrorLineSensor.LS_War_No_Device_Connected">
            no device connected
        </member>
        <member name="T:STIL.LineSensor.CALLBACK_STATUS_CONNECTION">
            <summary>
            delegate callback for connection status notification
            </summary>
            <param name="i1">the sensor ID MCHR_ID if unplugged sensor or serial number if plug sensor</param>
            <param name="i2"> as serial number and event type : value &amp; 0x000000ff == 1 for Unplugged sensor \n\r\t  value &amp; 0x000000ff == 0 || 0xff for plug new sensor \n\r  value &amp; 0x0000ff00 => type of sensor to plug</param>
        </member>
        <member name="T:STIL.LineSensor.LineSensor">
            <summary>
            Exposes functions to communicate with the MPLS system.
            </summary>
        </member>
        <member name="M:STIL.LineSensor.LineSensor.AcqDarkSignal(STIL.LineSensor.Device)">
            <summary>
            This function should always be called after StartAcquisition,
            in order to calibrate the MPLS system.
            </summary>
            <param name="device">The device.</param>
            <exception cref="T:STIL.LineSensor.LineSensorException">
            The cause of the error is specified in the exception message.
            </exception>
        </member>
        <member name="M:STIL.LineSensor.LineSensor.ConnectSimulator">
            <summary>
            Creates a new virtual device and attempt to connect to it.
            </summary>
            <returns>An instance of Device.</returns>
            <exception cref="T:STIL.LineSensor.LineSensorException">
            The cause of the error is specified in the exception message.
            </exception>
        </member>
        <member name="M:STIL.LineSensor.LineSensor.ConnectUSB">
            <summary>
            Creates a new real USB device and attempt to connect to it.
            </summary>
            <returns>An instance of Device.</returns>
            <exception cref="T:STIL.LineSensor.LineSensorException">
            The cause of the error is specified in the exception message.
            </exception>
        </member>
        <member name="M:STIL.LineSensor.LineSensor.ConnectGigE">
            <summary>
            Creates a new real Giga Ethernet device and attempt to connect to it.
            </summary>
            <returns>An instance of Device.</returns>
            <exception cref="T:STIL.LineSensor.LineSensorException">
            The cause of the error is specified in the exception message.
            </exception>
        </member>
        <member name="M:STIL.LineSensor.LineSensor.ConnectGigEByIpAddress(System.String@)">
            <summary>
            Creates a new real Giga Ethernet device and attempt to connect to it.
            </summary>
            <param name="IPAddress">Ip address, if empty pop a window to find a Giga Ethernet device.</param>
            <returns>An instance of Device.</returns>
            <exception cref="T:STIL.LineSensor.LineSensorException">
            The cause of the error is specified in the exception message.
            </exception>
        </member>
        <member name="M:STIL.LineSensor.LineSensor.DestroyDevice(STIL.LineSensor.Device)">
            <summary>
            Destroys the given device.
            </summary>
            <param name="device">The device to be destroyed.</param>
        </member>
        <member name="M:STIL.LineSensor.LineSensor.GetSpectroPosition(STIL.LineSensor.Device,System.Int32)">
            <summary>
            Retrieves the position of a spectrum (CCD sensor and CCD channel).
            </summary>
            <param name="device">The device.</param>
            <param name="spectro">The spectro number of the device.</param>
            <returns>An instance of SpectroPosition.</returns>
            <exception cref="T:STIL.LineSensor.LineSensorException">
            The cause of the error is specified in the exception message.
            </exception>
        </member>
        <member name="M:STIL.LineSensor.LineSensor.GetDllVersion">
            <summary>
            Retrieves the MPLS DLL version.
            </summary>
            <returns>A string containing the version number.</returns>
            <exception cref="T:STIL.LineSensor.LineSensorException">
            The cause of the error is specified in the exception message.
            </exception>
        </member>
        <member name="M:STIL.LineSensor.LineSensor.GetFirmwareVersion(STIL.LineSensor.Device)">
            <summary>
            Retrieves the MPLS firmware version.
            </summary>
            <param name="device">Device to read firmware version.</param>
            <returns>A string containing the version number.</returns>
            <exception cref="T:STIL.LineSensor.LineSensorException">
            The cause of the error is specified in the exception message.
            </exception>
        </member>
        <member name="M:STIL.LineSensor.LineSensor.TestThermalCorrection(STIL.LineSensor.Device)">
            <summary>
            Test thermal correction
            </summary>
            <param name="device">Id of a controller</param>
        </member>
        <member name="M:STIL.LineSensor.LineSensor.InitLineSensor(STIL.LineSensor.Device,STIL.LineSensor.LineSensorParams)">
            <summary>
            Initializes a line sensor. The function must be called once the connection
            to the device has been established and before calling LoadConfig.
            </summary>
            <param name="device">Device to be initialized.</param>
            <param name="lsParams">Device parameters.</param>
            <exception cref="T:STIL.LineSensor.LineSensorException">
            The cause of the error is specified in the exception message.
            </exception>
        </member>
        <member name="M:STIL.LineSensor.LineSensor.InvokeDeviceFunc(STIL.LineSensor.Device,STIL.LineSensor.InvokeDeviceFuncParams,System.Object@)">
            <summary>
            Generic function allowing to configure or retrieve data from the device.
            <para>
            Exemple how to use the generic parameter "param":
            </para>
            <para>
            1. Integer as input parameter:
            object inParam = Convert.ToInt32(TriggerType.TRIGGER_SOFT);
            LineSensor.InvokeDeviceFunc(dev, InvokeDeviceFuncParams.DP_SET_TRIGGER_IN_MODE, ref inParam);
            </para>
            <para>
            2. Integer as output parameter:
            object outParam = new object();
            LineSensor.InvokeDeviceFunc(dev, InvokeDeviceFuncParams.DP_GET_ALARM_FAN_STATE, ref outParam);
            int value = Convert.ToInt32(outParam);
            </para>
            </summary>
            <param name="device">The device.</param>
            <param name="deviceFunc">
            The device functionality to the invoked. All the available values of this parameter
            are listed by the enum InvokeDeviceFuncParams.
            </param>
            <param name="param">
            It can be either an input parameter or output parameter. It encapsulates a string or an integer.
            </param>
            <example> This sample shows how to Get the sensor fullscale.
            <code>
                   object outParam = new object();
                   LineSensor.InvokeDeviceFunc(dev, InvokeDeviceFuncParams.DP_GET_FULLSCALE, ref outParam);
                   fullScale = Convert.ToInt32(outParam);
            </code>
            </example>
            <exception cref="T:STIL.LineSensor.LineSensorException">
            The cause of the error is specified in the exception message.
            </exception>
        </member>
        <member name="M:STIL.LineSensor.LineSensor.InvokeSensorFunc(STIL.LineSensor.Device,System.Int32,STIL.LineSensor.InvokeSensorFuncParams,System.Object@)">
            <summary>
            Generic function allowing to configure or retrieve data from a CCD sensor.
            </summary>
            <param name="device">The device.</param>
            <param name="sensorNb">The number of the CCD sensor.</param>
            <param name="sensorFunc">
            The sensor functionality to the invoked. All the available values of this parameter
            are listed by the enum InvokeSensorFuncParams.
            </param>
            <param name="param">
            It can be either an input parameter or output parameter. It encapsulates a string or an integer.
            </param>
            <exception cref="T:STIL.LineSensor.LineSensorException">
            The cause of the error is specified in the exception message.
            </exception>
        </member>
        <member name="M:STIL.LineSensor.LineSensor.InvokeSpectroFunc(STIL.LineSensor.Device,System.Int32,STIL.LineSensor.InvokeSpectroFuncParams,System.Object@,System.Int32)">
            <summary>
            Generic function allowing to configure or retrieve data from a CCD spectrum.
            </summary>
            <param name="device">The device.</param>
            <param name="spectroNb">The number of the CCD specrum.</param>
            <param name="spectroFunc">
            The spectrum functionality to the invoked. More information about all the available
            functionalities is provieded in the documentation.
            </param>
            <param name="param">
            It can be either an input parameter or output parameter. It encapsulates a string or an integer.
            </param>
            <param name="defaultOrder">Good question.</param> //TODO: find out parameter meaning.
            <exception cref="T:STIL.LineSensor.LineSensorException">
            The cause of the error is specified in the exception message.
            </exception>
        </member>
        <member name="M:STIL.LineSensor.LineSensor.LoadConfig(STIL.LineSensor.Device,System.String,System.Boolean)">
            <summary>
            Configures the device with the parameters stored in the configuration file specified by filepath.
            </summary>
            <param name="device">The device.</param>
            <param name="filepath">The location of the configuration file.</param>
            <param name="initializeLineSensor">
            When set to true, the sensor is initialized using the parameters
            stored in the configuration file.
            When set to false, the sensor must have been previously initialized
            with custom parameters using the InitLineSensor function.
            </param>
            <exception cref="T:STIL.LineSensor.LineSensorException">
            The cause of the error is specified in the exception message.
            </exception>
        </member>
        <member name="M:STIL.LineSensor.LineSensor.ReadAcquiredData(STIL.LineSensor.Device,System.UInt32,System.UInt32)">
            <summary>
            Retrieves calculated results.
            This function must be called after StartAcquisition.
            This function locks the calling thread until enough data is obtained from the line sensor device.
            </summary>
            <param name="device">The device.</param>
            <param name="nbOfMeasures">
            Number of measures to be retrieved. It must be a multiple of 180.
            </param>
            <param name="timeOut">Delay to wait acquisition data (in µs).</param>
            <returns>An instance of Acquired data.</returns>
            <exception cref="T:STIL.LineSensor.LineSensorException">
            The cause of the error is specified in the exception message.
            </exception>
        </member>
        <member name="M:STIL.LineSensor.LineSensor.ReadAcquiredDataEx(STIL.LineSensor.Device,System.UInt32,System.UInt32)">
            <summary>
            Retrieves calculated results.
            This function must be called after StartAcquisition.
            This function locks the calling thread until enough data is obtained from the line sensor device.
            </summary>
            <param name="device">The device.</param>
            <param name="nbOfMeasures">
            Number of measures to be retrieved. It must be a multiple of 180.
            </param>
            <param name="timeOut">Delay to wait acquisition data (in µs).</param>
            <returns>An instance of Acquired data.</returns>
            <exception cref="T:STIL.LineSensor.LineSensorException">
            The cause of the error is specified in the exception message.
            </exception>
        </member>
        <member name="M:STIL.LineSensor.LineSensor.ReadAcquiredThicknessData(STIL.LineSensor.Device,System.UInt32,System.UInt32)">
            <summary>
            Retrieves calculated results.
            This function must be called after StartAcquisition.
            This function locks the calling thread until enough data is obtained from the line sensor device.
            </summary>
            <param name="device">The device.</param>
            <param name="nbOfMeasures">
            Number of measures to be retrieved. It must be a multiple of 180.
            </param>
            <param name="timeOut">Delay to wait acquisition data (in µs).</param>
            <returns>An instance of Acquired data.</returns>
            <exception cref="T:STIL.LineSensor.LineSensorException">
            The cause of the error is specified in the exception message.
            </exception>
        </member>
        <member name="M:STIL.LineSensor.LineSensor.SaveConfig(STIL.LineSensor.Device,System.String)">
            <summary>
            Saves into the file specified by configFilePath the entire current configuration of the line sensor device.
            </summary>
            <param name="device">The device.</param>
            <param name="configFilePath">The file path where the configuration has to be stored.</param>
            <exception cref="T:STIL.LineSensor.LineSensorException">
            The cause of the error is specified in the exception message.
            </exception>
        </member>
        <member name="M:STIL.LineSensor.LineSensor.StartAcquisition(STIL.LineSensor.Device)">
            <summary>
            Starts the data acquisition from the line sensor device.
            </summary>
            <param name="device">The device.</param>
            <exception cref="T:STIL.LineSensor.LineSensorException">
            The cause of the error is specified in the exception message.
            </exception>
        </member>
        <member name="M:STIL.LineSensor.LineSensor.StopAcquisition(STIL.LineSensor.Device)">
            <summary>
            Stops the data acquisition from the line sensor device.
            </summary>
            <param name="device">The device.</param>
            <exception cref="T:STIL.LineSensor.LineSensorException">
            The cause of the error is specified in the exception message.
            </exception>
        </member>
        <member name="M:STIL.LineSensor.LineSensor.AcqCalibrationCoef(STIL.LineSensor.Device)">
            <summary>
            Execute the calibration coef data acquisition from the line sensor device.
            </summary>
            <param name="device">The device.</param>
            <exception cref="T:STIL.LineSensor.LineSensorException">
            The cause of the error is specified in the exception message.
            </exception>
        </member>
        <member name="M:STIL.LineSensor.LineSensor.AcqIntensityNormalization(STIL.LineSensor.Device)">
            <summary>
            Execute the intensity normalization acquisition from the line sensor device.
            </summary>
            <param name="device">The device.</param>
            <exception cref="T:STIL.LineSensor.LineSensorException">
            The cause of the error is specified in the exception message.
            </exception>
        </member>
        <member name="M:STIL.LineSensor.LineSensor.CheckReturn(System.Int16)">
            <summary>
            Checks the value returned from one of the MPLS DLL functions.
            If there is an error raises an exception.
            </summary>
            <param name="retValue">The value returned by a MPLS DLL function.</param>
            <exception cref="T:STIL.LineSensor.LineSensorException">
            An exception is thrown when retValue is different to 1.
            The cause of the error is specified in the exception message.
            </exception>
        </member>
        <member name="M:STIL.LineSensor.LineSensor.OnCallBackStatusConnection(System.Int32,System.Int32)">
            <summary>Static function called by the C ANSI LineSensor.dll </summary>
            <param name="i1">the sensor ID MCHR_ID if unplugged sensor or serial number if plug sensor</param>
            <param name="i2"> as serial number and event type : value &amp; 0x000000ff == 1 for Unplugged sensor \n\r\t  value &amp; 0x000000ff == 0 || 0xff for plug new sensor \n\r  value &amp; 0x0000ff00 => type of sensor to plug</param>
        </member>
        <member name="T:STIL.LineSensor.LineSensorException">
            <summary>
            Exception used to signal all the errors generated by the MPLS DLL unamanged functions.
            The error message indicates the source of the error.
            </summary>
        </member>
        <member name="M:STIL.LineSensor.LineSensorException.#ctor(System.String,STIL.LineSensor.ErrorLineSensor)">
            <summary>
            Constructor function.
            </summary>
            <param name="message">Indicates the source of the error.</param>
            <param name="error">error ID.</param>
        </member>
        <member name="M:STIL.LineSensor.LineSensorException.ToString">
            <summary>Returns error description </summary>
            <returns>Error description</returns>
        </member>
        <member name="P:STIL.LineSensor.LineSensorException.Error">
            <summary>Returns error  </summary>
            <returns>Error</returns>
        </member>
        <member name="T:STIL.LineSensor.Device">
            <summary>
            Represents a MPLS device.
            </summary>
        </member>
        <member name="M:STIL.LineSensor.Device.#ctor(System.Int16)">
            <summary>
            Construtor of MPLS Device
            </summary>
            <param name="id">specified id device</param>
        </member>
        <member name="P:STIL.LineSensor.Device.Id">
            <summary>
            The device identifier.
            </summary>
        </member>
        <member name="T:STIL.LineSensor.SpectroPosition">
            <summary>
            Represents the position of a specrum by its CCD sensor number and CCD channel number.
            </summary>
        </member>
        <member name="M:STIL.LineSensor.SpectroPosition.#ctor(System.Int32,System.Int32)">
            <summary>
            Constructor function.
            </summary>
            <param name="ccdSensor">The CCD sensor number.</param>
            <param name="ccdChannel">The CCD channel number.</param>
        </member>
        <member name="P:STIL.LineSensor.SpectroPosition.CCDSensor">
            <summary>
            The number of the CCD sensor containing the spectrum.
            </summary>
        </member>
        <member name="P:STIL.LineSensor.SpectroPosition.CCDChannel">
            <summary>
            The number of the CCD channel containing the spectrum.
            </summary>
        </member>
        <member name="T:STIL.LineSensor.SpectroParams">
            <summary>
            CCD spectrum configuration parameters.
            </summary>
        </member>
        <member name="F:STIL.LineSensor.SpectroParams.count">
            <summary>Number of spectro in each CCD sensors (usually 10)</summary>
        </member>
        <member name="F:STIL.LineSensor.SpectroParams.fixedPartialWindowLength">
            <summary>Signal size sent (usually 11 pixels by spectros</summary>
        </member>
        <member name="F:STIL.LineSensor.SpectroParams.fullSpectrum">
            <summary>full sprectrum Activated</summary>
        </member>
        <member name="F:STIL.LineSensor.SpectroParams.calibrationSize">
            <summary>size of calibration array</summary>
        </member>
        <member name="T:STIL.LineSensor.CcdParams">
            <summary>
            CCD sensor configuration parameters.
            </summary>
        </member>
        <member name="F:STIL.LineSensor.CcdParams.spectro">
            <summary>Spectro Parameters <see cref="T:STIL.LineSensor.SpectroParams"/></summary>
        </member>
        <member name="F:STIL.LineSensor.CcdParams.count">
            <summary>Number of CCD sensors (18 on an MPLS)</summary>
        </member>
        <member name="F:STIL.LineSensor.CcdParams.pixelCount">
            <summary>Number of pixels of the CCD or CMOS sensor</summary>
        </member>
        <member name="F:STIL.LineSensor.CcdParams.avgDark">
            <summary>Dark Averaging value</summary>
        </member>
        <member name="F:STIL.LineSensor.CcdParams.avgWhite">
            <summary>WhiteRef Averaging value</summary>
        </member>
        <member name="F:STIL.LineSensor.CcdParams.blackPixelOffsetIntensity">
            <summary>Black pixel offset Intensity</summary>
        </member>
        <member name="T:STIL.LineSensor.Correction">
            <summary>
            X correction configuration parameters.
            </summary>
        </member>
        <member name="F:STIL.LineSensor.Correction.factorA">
            <summary>A factor of correction for axis</summary>
        </member>
        <member name="F:STIL.LineSensor.Correction.factorB">
            <summary>B factor of correction for axis</summary>
        </member>
        <member name="F:STIL.LineSensor.Correction.factorC">
            <summary>C factor of correction for axis</summary>
        </member>
        <member name="F:STIL.LineSensor.Correction.XYPositionsFile">
            <summary>Archive the XY positions file</summary>
        </member>
        <member name="T:STIL.LineSensor.RotationParams">
            <summary>
            Rotation configuration parameters (for a field sensor).
            </summary>
        </member>
        <member name="F:STIL.LineSensor.RotationParams.enabled">
            <summary>Mirror scanning enabled</summary>
        </member>
        <member name="F:STIL.LineSensor.RotationParams.motorSpeed">
            <summary>Motor speed in steps/s during exposure</summary>
        </member>
        <member name="F:STIL.LineSensor.RotationParams.opticalDelay">
            <summary>delay from optical cell top and start of image exposure</summary>
        </member>
        <member name="F:STIL.LineSensor.RotationParams.dblStopMirrorOpticalDelay">
            <summary>Angle of stop of mirror</summary>
        </member>
        <member name="F:STIL.LineSensor.RotationParams.exposureTimeNS">
            <summary>Line exposure time in nanosec</summary>
        </member>
        <member name="F:STIL.LineSensor.RotationParams.nbProfilesPerImage">
            <summary>Number of lines</summary>
        </member>
        <member name="F:STIL.LineSensor.RotationParams.acceleration">
            <summary>Motor acceleration in steps/s2 (usually = Max authorized value)</summary>
        </member>
        <member name="F:STIL.LineSensor.RotationParams.maxMotorSpeed">
            <summary>Max authorized speed (in steps/s)</summary>
        </member>
        <member name="F:STIL.LineSensor.RotationParams.motorStepsPerRound">
            <summary>// Nb of motor steps per round</summary>
        </member>
        <member name="F:STIL.LineSensor.RotationParams.reductionRatio">
            <summary>reduction gear ratio</summary>
        </member>
        <member name="F:STIL.LineSensor.RotationParams.camAngleDuringExposure">
            <summary>Design parameter: the cam angular range run during image exposure (in deg)</summary>
        </member>
        <member name="F:STIL.LineSensor.RotationParams.MotorRotation">
            <summary>Motor rotation type parameters (<see cref="T:STIL.LineSensor.MotorRotationType"/>)</summary>
        </member>
        <member name="T:STIL.LineSensor.LightSourceParameters">
            <summary>
            Light Source parameters (for a field sensor).
            </summary>
        </member>
        <member name="F:STIL.LineSensor.LightSourceParameters.lightSourceType">
            <summary>Light source type (<see cref="T:STIL.LineSensor.LightSourceType"/></summary>
        </member>
        <member name="F:STIL.LineSensor.LightSourceParameters.nbCyclesTotalLed">
            <summary>Number of total Led cycle</summary>
        </member>
        <member name="F:STIL.LineSensor.LightSourceParameters.nbCyclesOnLed">
            <summary>Number of ON Led cycle</summary>
        </member>
        <member name="F:STIL.LineSensor.LightSourceParameters.autoControlNbCyclesTotal">
            <summary>Automatic calculation of LED cycle</summary>
        </member>
        <member name="F:STIL.LineSensor.LightSourceParameters.halogenLampOn">
            <summary>Halogen lamp status</summary>
        </member>
        <member name="T:STIL.LineSensor.LineSensorParams">
            <summary>
            Line sensor configuration parameters.
            </summary>
        </member>
        <member name="F:STIL.LineSensor.LineSensorParams.deviceType">
            <summary>Define the device type parameter <see cref="T:STIL.LineSensor.SensorType"/></summary>
        </member>
        <member name="F:STIL.LineSensor.LineSensorParams.TypeOfPeak1">
            <summary>Define the Peak type to detect (Strong, First, ..., Last)</summary>
        </member>
        <member name="F:STIL.LineSensor.LineSensorParams.TypeOfPeak2">
            <summary>Define the second Peak type to detect (Strong, First, ..., Last)</summary>
        </member>
        <member name="F:STIL.LineSensor.LineSensorParams.PixelResolution">
            <summary>Define the pixel resolution  (8bits, 10 Bits, ..., 12Bits)</summary>
        </member>
        <member name="F:STIL.LineSensor.LineSensorParams.MeasurementMode">
            <summary>Define the Measurement type  (Altitude, Thickness)</summary>
        </member>
        <member name="F:STIL.LineSensor.LineSensorParams.dRefractiveIndex">
            <summary>Refractiv index for Thickness measurement</summary>
        </member>
        <member name="F:STIL.LineSensor.LineSensorParams.physicalWidth">
            <summary>Define the frame physical width</summary>
        </member>
        <member name="F:STIL.LineSensor.LineSensorParams.physicalHeight">
            <summary>Define the frame physical Height</summary>
        </member>
        <member name="F:STIL.LineSensor.LineSensorParams.realFormat">
            <summary>Define the real value format for read/write configuration files</summary>
        </member>
        <member name="F:STIL.LineSensor.LineSensorParams.sEndPointToWriteCmd">
            <summary>Define the EndPoint number to write Command on sensor</summary>
        </member>
        <member name="F:STIL.LineSensor.LineSensorParams.ccdSensors">
            <summary>CCD Sensor parameters <see cref="T:STIL.LineSensor.CcdParams"/></summary>
        </member>
        <member name="F:STIL.LineSensor.LineSensorParams.correctionX">
            <summary>Axis correction parameters for X axis <see cref="T:STIL.LineSensor.Correction"/></summary>
        </member>
        <member name="F:STIL.LineSensor.LineSensorParams.correctionY">
            <summary>Axis correction parameters for Y axis <see cref="T:STIL.LineSensor.Correction"/></summary>
        </member>
        <member name="F:STIL.LineSensor.LineSensorParams.rotationParameters">
            <summary>Rotation parameters <see cref="T:STIL.LineSensor.RotationParams"/></summary>
        </member>
        <member name="F:STIL.LineSensor.LineSensorParams.lightSourceParameters">
            <summary>Light source parameters <see cref="T:STIL.LineSensor.LightSourceParameters"/></summary>
        </member>
        <member name="F:STIL.LineSensor.LineSensorParams.displayErrorMessages">
            <summary>the Error Messages dialog box Enabled</summary>
        </member>
        <member name="F:STIL.LineSensor.LineSensorParams.fillDisabledFibers">
            <summary>private parameter</summary>
        </member>
        <member name="F:STIL.LineSensor.LineSensorParams.pixelOffset">
            <summary>private parameter</summary>
        </member>
        <member name="F:STIL.LineSensor.LineSensorParams.matricCameraOffsetY">
            <summary>private parameter</summary>
        </member>
        <member name="F:STIL.LineSensor.LineSensorParams.triggerEnableWaitTime">
            <summary>private parameter</summary>
        </member>
        <member name="F:STIL.LineSensor.LineSensorParams.protocoleAcqBuffSize">
            <summary>not used</summary>
        </member>
        <member name="F:STIL.LineSensor.LineSensorParams.nbFibersPerLine">
            <summary>Used for matrix camera where fibers are aligned in differents lines. Used mainly for X -Y position calculation</summary>
        </member>
        <member name="F:STIL.LineSensor.LineSensorParams.saveUsingOldFormat">
            <summary>private parameter</summary>
        </member>
        <member name="F:STIL.LineSensor.LineSensorParams.enableBinning">
            <summary>Binning mode enabled</summary>
        </member>
        <member name="F:STIL.LineSensor.LineSensorParams.binningFactor">
            <summary>Set the binning factor value (2, 4, 8, 16)</summary>
        </member>
        <member name="F:STIL.LineSensor.LineSensorParams.peakDetectionAlgo">
            <summary>Select the peak detection algorithme <see cref="T:STIL.LineSensor.PeakDetectionAlgo"/></summary>
        </member>
        <member name="F:STIL.LineSensor.LineSensorParams.firmwareDetectionThreshold">
            <summary>The firmware detection threshold value</summary>
        </member>
        <member name="F:STIL.LineSensor.LineSensorParams.bEnableRawIntensity">
            <summary>private parameter</summary>
        </member>
        <member name="F:STIL.LineSensor.LineSensorParams.fMaxValleyToPeakRatio">
            <summary>private parameter</summary>
        </member>
        <member name="F:STIL.LineSensor.LineSensorParams.whiteRefClippingThreshold">
            <summary>The whiteref clipping threshold</summary>
        </member>
        <member name="F:STIL.LineSensor.LineSensorParams.exposureTime">
            <summary>the sensor exposure time value</summary>
        </member>
        <member name="F:STIL.LineSensor.LineSensorParams.AutoNormalizeDark">
            <summary>Normalize automaticaly dark on modify intensity Led or exposure time </summary>
        </member>
        <member name="T:LineSensorDotNet.AxisControl">
            <summary>
            Control that display a scale for graph
            </summary>
        </member>
        <member name="F:LineSensorDotNet.AxisControl.m_oAxisOrientation">
            <summary>
            Component axis orientation
            </summary>
        </member>
        <member name="F:LineSensorDotNet.AxisControl.m_dbStartPosition">
            <summary>
            Start position (in pixel) on current representation
            </summary>
        </member>
        <member name="F:LineSensorDotNet.AxisControl.m_dbEndPosition">
            <summary>
            End position (in pixel) on current representation
            </summary>
        </member>
        <member name="F:LineSensorDotNet.AxisControl.m_dbCursorPosition">
            <summary>
            Cursor position (in pixel) on current representation
            </summary>
        </member>
        <member name="F:LineSensorDotNet.AxisControl.m_pBorder">
            <summary>
            Pen for border
            </summary>
        </member>
        <member name="F:LineSensorDotNet.AxisControl.m_slbText">
            <summary>
            Brush for text
            </summary>
        </member>
        <member name="F:LineSensorDotNet.AxisControl.m_slbCursor">
            <summary>
            Brush for cursors
            </summary>
        </member>
        <member name="F:LineSensorDotNet.AxisControl.m_bfcGraphicsContext">
            <summary>
            Graphic context
            </summary>
        </member>
        <member name="F:LineSensorDotNet.AxisControl.m_bgGraphics">
            <summary>
            Graphic object
            </summary>
        </member>
        <member name="F:LineSensorDotNet.AxisControl.m_rDrawZone">
            <summary>
            Draw zone
            </summary>
        </member>
        <member name="F:LineSensorDotNet.AxisControl.m_dbPreviousPixelSize">
            <summary>
            KL_21-05-2015 add param for store previous pixel size
            </summary>
        </member>
        <member name="F:LineSensorDotNet.AxisControl.m_dbCurrentPixelSize">
            <summary>
            KL_21-05-2015 add param for store current pixel size
            </summary>
        </member>
        <member name="F:LineSensorDotNet.AxisControl.m_dbPreviousMajorStepSize">
            <summary>
            KL_21-05-2015 add param for store previous majorStep size
            </summary>
        </member>
        <member name="F:LineSensorDotNet.AxisControl.m_dbCurrentMajorStepSize">
            <summary>
            KL_21-05-2015 add param for store current majorStep size
            </summary>
        </member>
        <member name="F:LineSensorDotNet.AxisControl.m_dbMousePositionX">
            <summary>
            KL_21-05-2015 [temp declared public ] Mouse position on X
            </summary>
        </member>
        <member name="F:LineSensorDotNet.AxisControl.m_dbMousePositionY">
            <summary>
            KL_21-05-2015 [temp declared public ] Mouse position on Y
            </summary>
        </member>
        <member name="F:LineSensorDotNet.AxisControl.m_dbMousePositionX2">
            <summary>
            KL_21-05-2015 [temp declared public ] Mouse position on X
            </summary>
        </member>
        <member name="F:LineSensorDotNet.AxisControl.m_dbMousePositionY2">
            <summary>
            KL_21-05-2015 [temp declared public ] Mouse position on Y
            </summary>
        </member>
        <member name="F:LineSensorDotNet.AxisControl.m_dbPrevMousePositionX">
            <summary>
            KL_22-05-2015 [temp declared public ] Mouse position on X
            </summary>
        </member>
        <member name="F:LineSensorDotNet.AxisControl.m_dbPrevMousePositionY">
            <summary>
            KL_22-05-2015 [temp declared public ] Mouse position on Y
            </summary>
        </member>
        <member name="F:LineSensorDotNet.AxisControl.m_dbPrevCursorPosition">
            <summary>
            KL_22-05-2015 [temp declared public ] Mouse position on Y
            </summary>
        </member>
        <member name="F:LineSensorDotNet.AxisControl.m_LastError">
            <summary>
            Error event
            </summary>        
        </member>
        <member name="M:LineSensorDotNet.AxisControl.m_tmrRefresh_Tick(System.Object,System.EventArgs)">
            <summary>
            On refresh timer
            </summary>
        </member>
        <member name="M:LineSensorDotNet.AxisControl.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <summary>
            On component refresh
            </summary>
        </member>
        <member name="M:LineSensorDotNet.AxisControl.Axis2DControl_Resize(System.Object,System.EventArgs)">
            <summary>
            On component resize
            </summary>
        </member>
        <member name="M:LineSensorDotNet.AxisControl.InitializeBuffer">
            <summary>
            Initialize graphics buffer
            </summary>
        </member>
        <member name="M:LineSensorDotNet.AxisControl.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="F:LineSensorDotNet.AxisControl.components">
            <summary> 
            Variable nécessaire au concepteur.
            </summary>
        </member>
        <member name="M:LineSensorDotNet.AxisControl.Dispose(System.Boolean)">
            <summary> 
            Nettoyage des ressources utilisées.
            </summary>
            <param name="disposing">true si les ressources managées doivent être supprimées ; sinon, false.</param>
        </member>
        <member name="M:LineSensorDotNet.AxisControl.InitializeComponent">
            <summary> 
            Méthode requise pour la prise en charge du concepteur - ne modifiez pas 
            le contenu de cette méthode avec l'éditeur de code.
            </summary>
        </member>
        <member name="P:LineSensorDotNet.AxisControl.AxisOrientation">
            <summary>
            Component axis orientation
            </summary>  
        </member>
        <member name="P:LineSensorDotNet.AxisControl.StartPosition">
            <summary>
            Start position (in pixel) on current representation
            </summary>
        </member>
        <member name="P:LineSensorDotNet.AxisControl.EndPosition">
            <summary>
            End position (in pixel) on current representation
            </summary>
        </member>
        <member name="P:LineSensorDotNet.AxisControl.CursorPosition">
            <summary>
            Cursor position (in pixel) on current representation
            </summary>
        </member>
        <member name="T:LineSensorDotNet.AxisControl.Orientation">
            <summary>
            Component orientation
            </summary>
        </member>
        <member name="F:LineSensorDotNet.AxisControl.Orientation.VERTICAL_RIGHT">
            <summary>
            Component vertical right
            </summary>
        </member>
        <member name="F:LineSensorDotNet.AxisControl.Orientation.HORIZONTAL_TOP">
            <summary>
            Component horizontal top
            </summary>
        </member>
        <member name="F:LineSensorDotNet.AxisControl.Orientation.VERTICAL_LEFT">
            <summary>
            Component vertical left
            </summary>
        </member>
        <member name="F:LineSensorDotNet.AxisControl.Orientation.HORIZONTAL_BOTTOM">
            <summary>
            Component horizontal bottom
            </summary>
        </member>
        <member name="T:LineSensorDotNet.CommonSensorQuickSetupControl">
            <summary>
            class CommonSensorQuickSetupControl
            </summary>
        </member>
        <member name="F:LineSensorDotNet.CommonSensorQuickSetupControl.m_eConnectionType">
            <summary>
            Current sensor connection type
            </summary>
        </member>
        <member name="F:LineSensorDotNet.CommonSensorQuickSetupControl.m_SensorInterface">
            <summary>
            Connection with SensorInterface
            </summary>
        </member>
        <member name="F:LineSensorDotNet.CommonSensorQuickSetupControl.m_CurrentSensorDefinition">
            <summary>
            Current sensor definition (parameters saved in .XML file)
            </summary>
        </member>
        <member name="F:LineSensorDotNet.CommonSensorQuickSetupControl.m_CurrentSensorParameters">
            <summary>
            Current sensor parameters (mapping of parameters saved in .INI file)
            </summary>
        </member>
        <member name="F:LineSensorDotNet.CommonSensorQuickSetupControl.m_eCurrentLevelUser">
            <summary>
            Current user level
            </summary>
        </member>
        <member name="M:LineSensorDotNet.CommonSensorQuickSetupControl.#ctor">
            <summary>
            constructor
            </summary>
        </member>
        <member name="M:LineSensorDotNet.CommonSensorQuickSetupControl.registerSensorInterface(LineSensorDotNet.CSensorInterface)">
            <summary>
            connection to SensorInterface
            </summary>
            <param name="_cSensorInterface">SensorInterface instance</param>
        </member>
        <member name="M:LineSensorDotNet.CommonSensorQuickSetupControl.OnSensorDefinitionChange(LineSensorDotNet.CSensorDefinition,LineSensorDotNet.CSensorParameters)">
            <summary>
            Sensor definition change event notification 
            </summary>
            <param name="_cDefinition">new sensor definition</param>
            <param name="_cParameters">new sensor parameters</param>
        </member>
        <member name="M:LineSensorDotNet.CommonSensorQuickSetupControl.OnUserLevelChange(STIL_UserLevelControl.CUserLevelDefinition.E_USER_LEVEL)">
            <summary>
            user level change notification
            </summary>
            <param name="_userLevel">new user level</param>
        </member>
        <member name="M:LineSensorDotNet.CommonSensorQuickSetupControl.AcquisitionStarted">
            <summary>
            notification: sensor acquisition started
            </summary>
        </member>
        <member name="M:LineSensorDotNet.CommonSensorQuickSetupControl.AcquisitionStopped">
            <summary>
            notification: sensor acquisition stopped
            </summary>
        </member>
        <member name="M:LineSensorDotNet.CommonSensorQuickSetupControl.OnLanguageChange(STIL_LanguageControl.CLanguageDefinition.E_CULTURE_INFO)">
            <summary>
            change language notification
            </summary>
            <param name="eNewCulture">new language</param>
        </member>
        <member name="M:LineSensorDotNet.CommonSensorQuickSetupControl.bConnect_Click(System.Object,System.EventArgs)">
            <summary>
            Event "Connect" button pressed
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:LineSensorDotNet.CommonSensorQuickSetupControl.bDisconnect_Click(System.Object,System.EventArgs)">
            <summary>
            Event "Disconnect" button pressed
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:LineSensorDotNet.CommonSensorQuickSetupControl.cbSource_SelectedIndexChanged(System.Object,System.EventArgs)">
            <summary>
            event modification connection type (USB, simulation)
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:LineSensorDotNet.CommonSensorQuickSetupControl.bSave_Click(System.Object,System.EventArgs)">
            <summary>
            Save current modifications => save .INI and .XML files
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:LineSensorDotNet.CommonSensorQuickSetupControl.CommonSensorQuickSetupControl_Load(System.Object,System.EventArgs)">
            <summary>
            Loading user control => get last saved sensor configuration
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:LineSensorDotNet.CommonSensorQuickSetupControl.UpdateGUI">
            <summary>
            refresh input fields with last saved configuration values
            </summary>
        </member>
        <member name="F:LineSensorDotNet.CommonSensorQuickSetupControl.components">
            <summary> 
            Variable nécessaire au concepteur.
            </summary>
        </member>
        <member name="M:LineSensorDotNet.CommonSensorQuickSetupControl.Dispose(System.Boolean)">
            <summary>  
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:LineSensorDotNet.CommonSensorQuickSetupControl.InitializeComponent">
            <summary> 
            Méthode requise pour la prise en charge du concepteur - ne modifiez pas 
            le contenu de cette méthode avec l'éditeur de code.
            </summary>
        </member>
        <member name="T:LineSensorDotNet.CommonSensorSetupUserControl">
            <summary>
            class CommonSensorSetupUserControl
            </summary>
        </member>
        <member name="F:LineSensorDotNet.CommonSensorSetupUserControl.m_LastError">
            <summary>Last error occured</summary>
        </member>
        <member name="F:LineSensorDotNet.CommonSensorSetupUserControl.m_eUserLevel">
            <summary>Current user level</summary>
        </member>
        <member name="F:LineSensorDotNet.CommonSensorSetupUserControl.m_CurrentCulture">
            <summary>current language used on appication (french by default)</summary>
        </member>
        <member name="F:LineSensorDotNet.CommonSensorSetupUserControl.m_SensorManager">
            <summary>connection with SensorManager</summary>
        </member>
        <member name="F:LineSensorDotNet.CommonSensorSetupUserControl.m_bSensorConnected">
            <summary>true if sensor is connected, false if disconnected</summary>
        </member>
        <member name="M:LineSensorDotNet.CommonSensorSetupUserControl.#ctor">
            <summary>
            constructor
            </summary>
        </member>
        <member name="M:LineSensorDotNet.CommonSensorSetupUserControl.registerSensorManager(LineSensorDotNet.CSensorManager)">
            <summary>
            connection with SensorManager
            </summary>
            <param name="_sensorMgr">SensorManager instance</param>
        </member>
        <member name="M:LineSensorDotNet.CommonSensorSetupUserControl.setUserLevel(STIL_UserLevelControl.CUserLevelDefinition.E_USER_LEVEL)">
            <summary>
            Notification du niveau utilisateur en cours
            </summary>
            <param name="eUser">Niveau utilisateur</param>
        </member>
        <member name="M:LineSensorDotNet.CommonSensorSetupUserControl.OnLanguageChange(STIL_LanguageControl.CLanguageDefinition.E_CULTURE_INFO)">
            <summary>Mise-à-jour des libellés de l'IHM suite à modification de la langue</summary>
            <param name="eCulture">nouvelle langue</param>
        </member>
        <member name="M:LineSensorDotNet.CommonSensorSetupUserControl.UpdateLabels">
            <summary>
            Mise-à-jour IHM suite à changement de langue
            </summary>
        </member>
        <member name="M:LineSensorDotNet.CommonSensorSetupUserControl.OnOpen">
            <summary>
            Ouverture UserControl => chargement dernière config. sauvegardée sur disque
            </summary>
            <returns>true si chargement config ok, false sinon</returns>
        </member>
        <member name="M:LineSensorDotNet.CommonSensorSetupUserControl.tabControl1_Selected(System.Object,System.Windows.Forms.TabControlEventArgs)">
            <summary>
            Sélection d'un nouvel onglet en cours; 
                - notifie l'onglet qu'on quitte qu'il va être fermé, pour éventuellement indiquer à l'utilisateur
                  si les modifs en cours sont conservées ou non
                - notifie le nouvel onglet qu'il va avoir la main... 
            </summary>
        </member>
        <member name="M:LineSensorDotNet.CommonSensorSetupUserControl.ValidateTabExit(System.Int32)">
            <summary>Sortie de l'onglet => validation sauvegarde si modifs effectuées</summary>
            <param name="iTab">onglet qui perd le focus</param>
        </member>
        <member name="M:LineSensorDotNet.CommonSensorSetupUserControl.ChangeDone(System.Int32)">
            <summary>Validation si modifications effectuées par l'opérateur</summary>
            <param name="iTab">onglet à valider</param>
            <returns>true si modifications réalisées dans l'onglet, false sinon</returns>
        </member>
        <member name="M:LineSensorDotNet.CommonSensorSetupUserControl.bSaveSetup_Click(System.Object,System.EventArgs)">
            <summary>
            Save Modes / parameters
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:LineSensorDotNet.CommonSensorSetupUserControl.bCancelSetup_Click(System.Object,System.EventArgs)">
            <summary>
            Cancel modification
            </summary>
        </member>
        <member name="M:LineSensorDotNet.CommonSensorSetupUserControl.chkModeFirstPeak_CheckedChanged(System.Object,System.EventArgs)">
            <summary>
            event modification mode First_Peak
            </summary>
        </member>
        <member name="M:LineSensorDotNet.CommonSensorSetupUserControl.chkModeRawIntensity_CheckedChanged(System.Object,System.EventArgs)">
            <summary>
            event modification mode Raw intensity
            </summary>
        </member>
        <member name="M:LineSensorDotNet.CommonSensorSetupUserControl.chkModeWhiteRefFirm_CheckedChanged(System.Object,System.EventArgs)">
            <summary>
            event modification mode White-reference firmware
            </summary>
        </member>
        <member name="M:LineSensorDotNet.CommonSensorSetupUserControl.chkModeThermalCorrection_CheckedChanged(System.Object,System.EventArgs)">
            <summary>
            event modification mode Thermal correction
            </summary>
        </member>
        <member name="M:LineSensorDotNet.CommonSensorSetupUserControl.chkModeIntensityNorm_CheckedChanged(System.Object,System.EventArgs)">
            <summary>
            event modification mode intensity normalization
            </summary>
        </member>
        <member name="M:LineSensorDotNet.CommonSensorSetupUserControl.chkModeWhiteRefNorm_CheckedChanged(System.Object,System.EventArgs)">
            <summary>
            event modification mode white reference normalization
            </summary>
        </member>
        <member name="M:LineSensorDotNet.CommonSensorSetupUserControl.nExposureTime_ValueChanged(System.Object,System.EventArgs)">
            <summary>
            event modification exposure time value
            </summary>
        </member>
        <member name="M:LineSensorDotNet.CommonSensorSetupUserControl.nLEDbrightness_ValueChanged(System.Object,System.EventArgs)">
            <summary>
            event modification LED brightness value
            </summary>
        </member>
        <member name="M:LineSensorDotNet.CommonSensorSetupUserControl.nDetectionThreshold_ValueChanged(System.Object,System.EventArgs)">
            <summary>
            event modification Detection threshold value
            </summary>
        </member>
        <member name="M:LineSensorDotNet.CommonSensorSetupUserControl.nValleyToPeak_ValueChanged(System.Object,System.EventArgs)">
            <summary>
            event modification Valley-to-Peak value
            </summary>
        </member>
        <member name="M:LineSensorDotNet.CommonSensorSetupUserControl.nNbPointsTrigger_ValueChanged(System.Object,System.EventArgs)">
            <summary>
            event modification Nb points per trigger pulse value
            </summary>
        </member>
        <member name="M:LineSensorDotNet.CommonSensorSetupUserControl.cbTriggerMode_SelectedIndexChanged(System.Object,System.EventArgs)">
            <summary>
            event modification sélection combo-box Trigger mode
            </summary>
        </member>
        <member name="M:LineSensorDotNet.CommonSensorSetupUserControl.bDark_Click(System.Object,System.EventArgs)">
            <summary>
            event Dark button pressed
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:LineSensorDotNet.CommonSensorSetupUserControl.bThermal_Click(System.Object,System.EventArgs)">
            <summary>
            event "Thermal correction" button pressed
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:LineSensorDotNet.CommonSensorSetupUserControl.bIntensity_Click(System.Object,System.EventArgs)">
            <summary>
            event "Intensity normalization" button pressed
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:LineSensorDotNet.CommonSensorSetupUserControl.EnableSaveCancel">
            <summary>
            Update accessibilité boutons Save/Cancel suite à modification 
            </summary>
        </member>
        <member name="M:LineSensorDotNet.CommonSensorSetupUserControl.SaveConfiguration">
            <summary>
            Sauvegarde configuration (serialization)
            </summary>
            <returns>true if success, false if failed (error detail in m_LastError)</returns>
        </member>
        <member name="M:LineSensorDotNet.CommonSensorSetupUserControl.SaveConfigurationDone">
            <summary>
            nouvelle configuration sauvegardée => maj diverses...
            </summary>
        </member>
        <member name="M:LineSensorDotNet.CommonSensorSetupUserControl.CopyCurrentToPrevious">
            <summary>
            Recopie config courante dans config mémorisée à l'ouverture (à faire suite à sauvegarde config)
            </summary>
        </member>
        <member name="M:LineSensorDotNet.CommonSensorSetupUserControl.CopyPreviousToCurrent">
            <summary>
            Ecrase enregistrement en cours par dernier enregistrement sauvegardé (appui sur bouton Cancel)
            </summary>
        </member>
        <member name="M:LineSensorDotNet.CommonSensorSetupUserControl.OnSensorDefinitionChange(LineSensorDotNet.CSensorDefinition)">
            <summary>
            New sensor definition notification
            </summary>
            <param name="_sensorDefinition">Contains modified: sensor connection type, sensor configuration file path, sensor configuration file name, last error occured on class</param>
        </member>
        <member name="F:LineSensorDotNet.CommonSensorSetupUserControl.components">
            <summary> 
            Variable nécessaire au concepteur.
            </summary>
        </member>
        <member name="M:LineSensorDotNet.CommonSensorSetupUserControl.Dispose(System.Boolean)">
            <summary>  
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:LineSensorDotNet.CommonSensorSetupUserControl.InitializeComponent">
            <summary> 
            Méthode requise pour la prise en charge du concepteur - ne modifiez pas 
            le contenu de cette méthode avec l'éditeur de code.
            </summary>
        </member>
        <member name="T:LineSensorDotNet.FormSensorSetup">
            <summary>
            class FormSensorSetup
            </summary>
        </member>
        <member name="M:LineSensorDotNet.FormSensorSetup.#ctor">
            <summary>
            constructor
            </summary>
        </member>
        <member name="M:LineSensorDotNet.FormSensorSetup.getCommonSetupUserControl">
            <summary>
            renvoie l'instance du UserControl générique (CommonSetupUserControl)
            </summary>
            <returns>returns the common setup user control</returns>
        </member>
        <member name="M:LineSensorDotNet.FormSensorSetup.setUserLevel(STIL_UserLevelControl.CUserLevelDefinition.E_USER_LEVEL)">
            <summary>
            notification modification niveau utilisateur
            </summary>
            <param name="eUser">nouveau niveau utilisateur</param>
        </member>
        <member name="M:LineSensorDotNet.FormSensorSetup.setLanguage(STIL_LanguageControl.CLanguageDefinition.E_CULTURE_INFO)">
            <summary>
            Notification changement langue
            </summary>
            <param name="eCulture">nouvelle langue</param>
        </member>
        <member name="M:LineSensorDotNet.FormSensorSetup.FormSensorSetup_Load(System.Object,System.EventArgs)">
            <summary>
            Open dialog => notify UserControl
            </summary>
        </member>
        <member name="M:LineSensorDotNet.FormSensorSetup.registerSensorManager(LineSensorDotNet.CSensorManager)">
            <summary>
            connection with current SensorManager
            </summary>
            <param name="_sensorMgr">SensorManager instance</param>
        </member>
        <member name="F:LineSensorDotNet.FormSensorSetup.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:LineSensorDotNet.FormSensorSetup.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:LineSensorDotNet.FormSensorSetup.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:LineSensorDotNet.GLControlAA">
            <summary>
            Personnalized anti aliased 2D GL control
            </summary>
        </member>
        <member name="M:LineSensorDotNet.GLControlAA.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="T:LineSensorDotNet.CommonSensorLiveDisplayUserControl">
            <summary>
            user control Live Sensor Measures Display
            </summary>
        </member>
        <member name="M:LineSensorDotNet.CommonSensorLiveDisplayUserControl.#ctor">
            <summary>
            standard constructor
            </summary>
        </member>
        <member name="M:LineSensorDotNet.CommonSensorLiveDisplayUserControl.Finalize">
            <summary>
            standard destructor
            </summary>
        </member>
        <member name="M:LineSensorDotNet.CommonSensorLiveDisplayUserControl.registerSensorManager(LineSensorDotNet.CSensorManager)">
            <summary>
            register Sensor Manager
            </summary>
            <param name="_sensorMgr">sensor manager instance</param>
        </member>
        <member name="M:LineSensorDotNet.CommonSensorLiveDisplayUserControl.ResetDisplay">
            <summary>
            Reset current display (set all values to 0)
            </summary>
        </member>
        <member name="F:LineSensorDotNet.CommonSensorLiveDisplayUserControl.components">
            <summary> 
            Variable nécessaire au concepteur.
            </summary>
        </member>
        <member name="M:LineSensorDotNet.CommonSensorLiveDisplayUserControl.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:LineSensorDotNet.CommonSensorLiveDisplayUserControl.InitializeComponent">
            <summary> 
            Méthode requise pour la prise en charge du concepteur - ne modifiez pas 
            le contenu de cette méthode avec l'éditeur de code.
            </summary>
        </member>
        <member name="T:LineSensorDotNet.Properties.Resources">
            <summary>
              Une classe de ressource fortement typée destinée, entre autres, à la consultation des chaînes localisées.
            </summary>
        </member>
        <member name="P:LineSensorDotNet.Properties.Resources.ResourceManager">
            <summary>
              Retourne l'instance ResourceManager mise en cache utilisée par cette classe.
            </summary>
        </member>
        <member name="P:LineSensorDotNet.Properties.Resources.Culture">
            <summary>
              Remplace la propriété CurrentUICulture du thread actuel pour toutes
              les recherches de ressources à l'aide de cette classe de ressource fortement typée.
            </summary>
        </member>
        <member name="P:LineSensorDotNet.Properties.Resources.connect_cadre_bleu">
            <summary>
              Recherche une ressource localisée de type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:LineSensorDotNet.Properties.Resources.dark_cadre_bleu">
            <summary>
              Recherche une ressource localisée de type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:LineSensorDotNet.Properties.Resources.dark_cadre_bleu_with_info">
            <summary>
              Recherche une ressource localisée de type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:LineSensorDotNet.Properties.Resources.disconnect_cadre_bleu">
            <summary>
              Recherche une ressource localisée de type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:LineSensorDotNet.Properties.Resources.plus_de_parametre_cadre_bleu">
            <summary>
              Recherche une ressource localisée de type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="T:LineSensorDotNet.CommonSensorSetupCtrl">
            <summary>
            class CommonSensorSetupUserControl
            </summary>
        </member>
        <member name="F:LineSensorDotNet.CommonSensorSetupCtrl.m_LastError">
            <summary>
            Last error occured
            </summary>
        </member>
        <member name="F:LineSensorDotNet.CommonSensorSetupCtrl.m_eUserLevel">
            <summary>
            Current user level
            </summary>
        </member>
        <member name="F:LineSensorDotNet.CommonSensorSetupCtrl.m_CurrentCulture">
            <summary>
            Current language used on application (french by default)
            </summary>
        </member>
        <member name="F:LineSensorDotNet.CommonSensorSetupCtrl.m_PreviousSensorDefinition">
            <summary>
            Previous sensor definition
            </summary>
        </member>
        <member name="F:LineSensorDotNet.CommonSensorSetupCtrl.m_CurrentSensorDefinition">
            <summary>
            Current sensor definition
            </summary>
        </member>
        <member name="F:LineSensorDotNet.CommonSensorSetupCtrl.m_CurrentSensorSetupParameters">
            <summary>
            Previous sensor parameters
            </summary>
        </member>
        <member name="F:LineSensorDotNet.CommonSensorSetupCtrl.m_PreviousSensorSetupParameters">
            <summary>
            Current sensor parameters
            </summary>
        </member>
        <member name="F:LineSensorDotNet.CommonSensorSetupCtrl.m_SensorManager">
            <summary>
            Connection with SensorManager
            </summary>
        </member>
        <member name="F:LineSensorDotNet.CommonSensorSetupCtrl.m_SensorInterface">
            <summary>
            Connection with SensorInterface
            </summary>
        </member>
        <member name="F:LineSensorDotNet.CommonSensorSetupCtrl.m_RM">
            <summary>
            Resource manager
            </summary>
        </member>
        <member name="F:LineSensorDotNet.CommonSensorSetupCtrl.m_bSensorConnected">
            <summary>
            true if sensor is connected, false if disconnected
            </summary>
        </member>
        <member name="F:LineSensorDotNet.CommonSensorSetupCtrl.m_lExposureTimeMax">
            <summary>
            Maximum exposure time
            </summary>
        </member>
        <member name="F:LineSensorDotNet.CommonSensorSetupCtrl.m_lExposureTimeMin">
            <summary>
            Minimum exposure time
            </summary>
        </member>
        <member name="F:LineSensorDotNet.CommonSensorSetupCtrl.m_lPreviousTabIndex">
            <summary>
            Previous tab index
            </summary>
        </member>
        <member name="M:LineSensorDotNet.CommonSensorSetupCtrl.OnLanguageChange(STIL_LanguageControl.CLanguageDefinition.E_CULTURE_INFO)">
            <summary>
            On language change
            </summary>
            <param name="eCulture">New culture</param>
        </member>
        <member name="M:LineSensorDotNet.CommonSensorSetupCtrl.CommonSensorSetupUserControl_Load(System.Object,System.EventArgs)">
            <summary>
            On component load
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:LineSensorDotNet.CommonSensorSetupCtrl.OnSensorDefinitionChange(LineSensorDotNet.CSensorDefinition)">
            <summary>
            New sensor definition notification
            </summary>
            <param name="_sensorDefinition">Contains sensor connection type, sensor configuration file path, sensor configuration file name, last error occured on class</param>
        </member>
        <member name="M:LineSensorDotNet.CommonSensorSetupCtrl.OnOpen">
            <summary>
            On open, load last config
            </summary>
            <returns>True on succes, false otherwise</returns>
        </member>
        <member name="M:LineSensorDotNet.CommonSensorSetupCtrl.m_cbxModeFirstPeak_CheckedChanged(System.Object,System.EventArgs)">
            <summary>
            event modification mode First_Peak
            </summary>
        </member>
        <member name="M:LineSensorDotNet.CommonSensorSetupCtrl.m_cbxModeRawIntensity_CheckedChanged(System.Object,System.EventArgs)">
            <summary>
            event modification mode Raw intensity
            </summary>
        </member>
        <member name="M:LineSensorDotNet.CommonSensorSetupCtrl.m_cbxModeWhiteRefFirm_CheckedChanged(System.Object,System.EventArgs)">
            <summary>
            event modification mode White-reference firmware
            </summary>
        </member>
        <member name="M:LineSensorDotNet.CommonSensorSetupCtrl.m_cbxModeThermalCorrection_CheckedChanged(System.Object,System.EventArgs)">
            <summary>
            event modification mode Thermal correction
            </summary>
        </member>
        <member name="M:LineSensorDotNet.CommonSensorSetupCtrl.m_cbxModeIntensityNorm_CheckedChanged(System.Object,System.EventArgs)">
            <summary>
            event modification mode intensity normalization
            </summary>
        </member>
        <member name="M:LineSensorDotNet.CommonSensorSetupCtrl.m_cbxModeWhiteRefNorm_CheckedChanged(System.Object,System.EventArgs)">
            <summary>
            event modification mode white reference normalization
            </summary>
        </member>
        <member name="M:LineSensorDotNet.CommonSensorSetupCtrl.m_txtExposureTime_KeyDown(System.Object,System.Windows.Forms.KeyEventArgs)">
            <summary>
            event modification exposure time value
            </summary>
        </member>
        <member name="M:LineSensorDotNet.CommonSensorSetupCtrl.m_txtExposureTime_TextChanged(System.Object,System.EventArgs)">
            <summary>
            Exposure time text changed
            </summary>
        </member>
        <member name="M:LineSensorDotNet.CommonSensorSetupCtrl.m_LEDBrightness_KeyDown(System.Object,System.Windows.Forms.KeyEventArgs)">
            <summary>
            event modification LED brightness value
            </summary>
        </member>
        <member name="M:LineSensorDotNet.CommonSensorSetupCtrl.m_LEDBrightness_TextChanged(System.Object,System.EventArgs)">
            <summary>
            LED brightness text changed
            </summary>
        </member>
        <member name="M:LineSensorDotNet.CommonSensorSetupCtrl.m_nudDetectionThreshold_ValueChanged(System.Object,System.EventArgs)">
            <summary>
            event modification Detection threshold value
            </summary>
        </member>
        <member name="M:LineSensorDotNet.CommonSensorSetupCtrl.m_nudValleyToPeak_ValueChanged(System.Object,System.EventArgs)">
            <summary>
            event modification Valley-to-Peak value
            </summary>
        </member>
        <member name="M:LineSensorDotNet.CommonSensorSetupCtrl.m_nudNbPointsTrigger_ValueChanged(System.Object,System.EventArgs)">
            <summary>
            event modification Nb points per trigger pulse value
            </summary>
        </member>
        <member name="M:LineSensorDotNet.CommonSensorSetupCtrl.m_cbxTriggerMode_SelectedIndexChanged(System.Object,System.EventArgs)">
            <summary>
            event modification sélection combo-box Trigger mode
            </summary>
        </member>
        <member name="M:LineSensorDotNet.CommonSensorSetupCtrl.m_tbcMenu_Selected(System.Object,System.Windows.Forms.TabControlEventArgs)">
            <summary>
            On tab selected
            </summary>
        </member>
        <member name="M:LineSensorDotNet.CommonSensorSetupCtrl.m_cmdSaveSetup_Click(System.Object,System.EventArgs)">
            <summary>
            Save Modes / parameters
            </summary>
        </member>
        <member name="M:LineSensorDotNet.CommonSensorSetupCtrl.m_cmdCancelSetup_Click(System.Object,System.EventArgs)">
            <summary>
            Cancel modification
            </summary>
        </member>
        <member name="M:LineSensorDotNet.CommonSensorSetupCtrl.m_cmdDark_Click(System.Object,System.EventArgs)">
            <summary>
            event Dark button pressed
            </summary>
        </member>
        <member name="M:LineSensorDotNet.CommonSensorSetupCtrl.m_cmdThermalCorrection_Click(System.Object,System.EventArgs)">
            <summary>
            event "Thermal correction" button pressed
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:LineSensorDotNet.CommonSensorSetupCtrl.m_cmdIntensityNormalization_Click(System.Object,System.EventArgs)">
            <summary>
            event "Intensity normalization" button pressed
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:LineSensorDotNet.CommonSensorSetupCtrl.m_cmdConfirm_Click(System.Object,System.EventArgs)">
            <summary>
            Click on confirm button
            </summary>
        </member>
        <member name="M:LineSensorDotNet.CommonSensorSetupCtrl.registerSensorManager(LineSensorDotNet.CSensorManager)">
            <summary>
            connection with SensorManager
            </summary>
            <param name="_sensorMgr">SensorManager instance</param>
        </member>
        <member name="M:LineSensorDotNet.CommonSensorSetupCtrl.registerSensorInterface(LineSensorDotNet.CSensorInterface)">
            <summary>
            connection with SensorInterface
            </summary>
            <param name="_cSensorInterface">Gateway between UserControl and SensorManager and Sensors</param>
        </member>
        <member name="M:LineSensorDotNet.CommonSensorSetupCtrl.setUserLevel(STIL_UserLevelControl.CUserLevelDefinition.E_USER_LEVEL)">
            <summary>
            Set user level
            </summary>
            <param name="eUser">User level</param>
        </member>
        <member name="M:LineSensorDotNet.CommonSensorSetupCtrl.UpdateUserAccess">
            <summary>
            Update user access depending on level
            </summary>
        </member>
        <member name="M:LineSensorDotNet.CommonSensorSetupCtrl.UpdateCulture">
            <summary>
            Load resource manager
            </summary>
        </member>
        <member name="M:LineSensorDotNet.CommonSensorSetupCtrl.UpdateLabels">
            <summary>
            Update labels
            </summary>
        </member>
        <member name="M:LineSensorDotNet.CommonSensorSetupCtrl.OnSelectingTab(System.Int32)">
            <summary>
            Select tab
            </summary>
            <param name="iTab"></param>
        </member>
        <member name="M:LineSensorDotNet.CommonSensorSetupCtrl.ValidateTabExit(System.Int32)">
            <summary>Sortie de l'onglet => validation sauvegarde si modifs effectuées</summary>
            <param name="iTab">onglet qui perd le focus</param>
        </member>
        <member name="M:LineSensorDotNet.CommonSensorSetupCtrl.ChangeDone(System.Int32)">
            <summary>Validation si modifications effectuées par l'opérateur</summary>
            <param name="iTab">onglet à valider</param>
            <returns>true si modifications réalisées dans l'onglet, false sinon</returns>
        </member>
        <member name="M:LineSensorDotNet.CommonSensorSetupCtrl.getMessageText(System.String,System.String)">
            <summary>
            Get a message from resource file
            </summary>
            <param name="sErrLabel"></param>
            <param name="sDefaultText"></param>
            <returns></returns>
        </member>
        <member name="M:LineSensorDotNet.CommonSensorSetupCtrl.EnableSave">
            <summary>
            Enable Save/Cancel button
            </summary>
        </member>
        <member name="M:LineSensorDotNet.CommonSensorSetupCtrl.DisableSave">
            <summary>
            Disbale Save/Cancel button
            </summary>
        </member>
        <member name="M:LineSensorDotNet.CommonSensorSetupCtrl.sendeventbCloseP">
            <summary>
            Send button close click event 
            </summary>
        </member>
        <member name="M:LineSensorDotNet.CommonSensorSetupCtrl.SaveConfiguration">
            <summary>
            Save configuration (serialization)
            </summary>
            <returns>true if success, false if failed (error detail in m_LastError)</returns>
        </member>
        <member name="M:LineSensorDotNet.CommonSensorSetupCtrl.SaveOrApplyConfigurationDone">
            <summary>
            nouvelle configuration sauvegardée => maj diverses...
            </summary>
        </member>
        <member name="M:LineSensorDotNet.CommonSensorSetupCtrl.CopyCurrentToPrevious">
            <summary>
            Copy current configuration in previous
            </summary>
        </member>
        <member name="M:LineSensorDotNet.CommonSensorSetupCtrl.CopyPreviousToCurrent">
            <summary>
            Restore previous configuration
            </summary>
        </member>
        <member name="M:LineSensorDotNet.CommonSensorSetupCtrl.getSensorParamToString">
            <summary>
            Return formatted string of sensor parameters
            </summary>
            <returns>string of sensor parameters :
            <para>- First Peak Mode (Enabled/Disabled)</para>
            <para>- Raw Intensity (Enabled/Disabled)</para>
            <para>- Firmware White Reference (Enabled/Disabled)</para>
            <para>- Thermal Correction Mode (Enabled/Disabled)</para>
            <para>- Intensity Normalization Mode (Enabled/Disabled)</para>
            <para> - White Reference Normalization Mode (Enabled/Disabled)</para>
            <para>- Detection Threshold Level [%]</para>
            - Valley to Peak Ratio [%]</returns>
        </member>
        <member name="M:LineSensorDotNet.CommonSensorSetupCtrl.setExposureTimeMinMax(System.Int32,System.Int32)">
            <summary>
            Set exposure min and max
            </summary>
            <param name="iETMin">Minimum exposure time</param>
            <param name="iETMax">Maximum exposure time</param>
        </member>
        <member name="M:LineSensorDotNet.CommonSensorSetupCtrl.setExposureTimeAndLed(System.Int32,System.Int32)">
            <summary>
            Set exposure time and LED brightness
            </summary>
            <param name="iExposureTime">Exposure time</param>
            <param name="iLed">LED brightness level</param>
        </member>
        <member name="M:LineSensorDotNet.CommonSensorSetupCtrl.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="F:LineSensorDotNet.CommonSensorSetupCtrl.components">
            <summary> 
            Variable nécessaire au concepteur.
            </summary>
        </member>
        <member name="M:LineSensorDotNet.CommonSensorSetupCtrl.Dispose(System.Boolean)">
            <summary>  
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:LineSensorDotNet.CommonSensorSetupCtrl.InitializeComponent">
            <summary> 
            Méthode requise pour la prise en charge du concepteur - ne modifiez pas 
            le contenu de cette méthode avec l'éditeur de code.
            </summary>
        </member>
        <member name="F:LineSensorDotNet.CommonSensorSetupCtrl.m_cmdClose">
            <summary>
            buttonclose 
            </summary>
        </member>
        <member name="F:LineSensorDotNet.CommonSensorSetupCtrl.m_cmdClose2">
            <summary>
            buttonclose 
            </summary>
        </member>
        <member name="E:LineSensorDotNet.CommonSensorSetupCtrl.eventbCloseP">
            <summary>
            event button close en click after check 
            </summary>
        </member>
        <member name="T:LineSensorDotNet.CommonSensorSetupCtrl.enableORnot">
            <summary>
            Enable or disable button
            </summary>
        </member>
        <member name="T:LineSensorDotNet.CommonSensorUserControl">
            <summary>
            class for Sensor parameters
            </summary>
        </member>
        <member name="F:LineSensorDotNet.CommonSensorUserControl.m_eConnectionType">
            <summary>
            Current sensor connection type
            </summary>
        </member>
        <member name="F:LineSensorDotNet.CommonSensorUserControl.m_SensorInterface">
            <summary>
            Connection with SensorInterface
            </summary>
        </member>
        <member name="F:LineSensorDotNet.CommonSensorUserControl.m_SensorManager">
            <summary>
            Sensor manager
            </summary>
        </member>
        <member name="F:LineSensorDotNet.CommonSensorUserControl.m_CurrentSensorDefinition">
            <summary>
            Current sensor definition (parameters saved in .XML file)
            </summary>
        </member>
        <member name="F:LineSensorDotNet.CommonSensorUserControl.m_CurrentSensorParameters">
            <summary>
            Current sensor parameters (mapping of parameters saved in .INI file)
            </summary>
        </member>
        <member name="F:LineSensorDotNet.CommonSensorUserControl.m_eCurrentLevelUser">
            <summary>
            Current user level
            </summary>
        </member>
        <member name="F:LineSensorDotNet.CommonSensorUserControl.m_eCurrentCulture">
            <summary>
            Culture in use
            </summary>
        </member>
        <member name="F:LineSensorDotNet.CommonSensorUserControl.m_LastError">
            <summary>
            Error
            </summary>
        </member>
        <member name="F:LineSensorDotNet.CommonSensorUserControl.m_RM">
            <summary>
            Resource manager
            </summary>
        </member>
        <member name="F:LineSensorDotNet.CommonSensorUserControl.m_bSensorConnected">
            <summary>
            Sensor connected state
            </summary>
        </member>
        <member name="F:LineSensorDotNet.CommonSensorUserControl.m_iFreqMax">
            <summary>
            Max frequency value
            </summary>
        </member>
        <member name="F:LineSensorDotNet.CommonSensorUserControl.m_iFreqMin">
            <summary>
            Min frequency value
            </summary>
        </member>
        <member name="M:LineSensorDotNet.CommonSensorUserControl.OnclickClose(System.Object,System.EventArgs)">
            <summary>
            Click on close button
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:LineSensorDotNet.CommonSensorUserControl.OnLanguageChange(STIL_LanguageControl.CLanguageDefinition.E_CULTURE_INFO)">
            <summary>
            change language notification
            </summary>
            <param name="eNewCulture">new language</param>
        </member>
        <member name="M:LineSensorDotNet.CommonSensorUserControl.OnUserLevelChange(STIL_UserLevelControl.CUserLevelDefinition.E_USER_LEVEL)">
            <summary>
            user level change 
            </summary>
            <param name="_userLevel">User level (Operator, User, Maintenance, System) </param>
        </member>
        <member name="M:LineSensorDotNet.CommonSensorUserControl.OnSensorMessage(System.Object,LineSensorDotNet.SensorMessageEventArgs)">
            <summary>
            On message from sensor manager
            </summary>
        </member>
        <member name="M:LineSensorDotNet.CommonSensorUserControl.OnSensorDefinitionChange(LineSensorDotNet.CSensorDefinition,LineSensorDotNet.CSensorParameters)">
            <summary>
            Sensor definition change event notification 
            </summary>
            <param name="_cDefinition">new sensor definition</param>
            <param name="_cParameters">new sensor parameters</param>
        </member>
        <member name="M:LineSensorDotNet.CommonSensorUserControl.m_cbxSource_SelectedIndexChanged(System.Object,System.EventArgs)">
            <summary>
            On selected source changed
            </summary>
        </member>
        <member name="M:LineSensorDotNet.CommonSensorUserControl.CommonSensorUserControl_Load(System.Object,System.EventArgs)">
            <summary>
            On form load
            </summary>
        </member>
        <member name="M:LineSensorDotNet.CommonSensorUserControl.ExposureFrequency_TextChanged(System.Object,System.EventArgs)">
            <summary>
            On text changed for exposure time or frequency
            </summary>
        </member>
        <member name="M:LineSensorDotNet.CommonSensorUserControl.ExposureFrequency_KeyPressed(System.Object,System.Windows.Forms.KeyEventArgs)">
            <summary>
            On key pressed for exposure time or frequency
            </summary>
        </member>
        <member name="M:LineSensorDotNet.CommonSensorUserControl.m_txtLEDBrightness_TextChanged(System.Object,System.EventArgs)">
            <summary>
            On LED brightness text changed
            </summary>
        </member>
        <member name="M:LineSensorDotNet.CommonSensorUserControl.tbLEDbrightness_KeyDown(System.Object,System.Windows.Forms.KeyEventArgs)">
            <summary>
            On LED brightness key down
            </summary>
        </member>
        <member name="M:LineSensorDotNet.CommonSensorUserControl.m_cmdConnectDisconnect_Click(System.Object,System.EventArgs)">
            <summary>
            On click on connect / disconnect button
            </summary>
        </member>
        <member name="M:LineSensorDotNet.CommonSensorUserControl.m_cmdMoreParameters_Click(System.Object,System.EventArgs)">
            <summary>
            Click on more parameters button
            </summary>
        </member>
        <member name="M:LineSensorDotNet.CommonSensorUserControl.m_cmdDark_Click(System.Object,System.EventArgs)">
            <summary>
            On click on dark button
            </summary>
        </member>
        <member name="M:LineSensorDotNet.CommonSensorUserControl.All_Mouse_HoverForToolTips(System.Object,System.EventArgs)">
            <summary>
            On mouse hovering
            </summary>
        </member>
        <member name="M:LineSensorDotNet.CommonSensorUserControl.UpdateCulture">
            <summary>
            Load resource file
            </summary>
        </member>
        <member name="M:LineSensorDotNet.CommonSensorUserControl.UpdateLabels">
            <summary>
            Update labels
            </summary>
        </member>
        <member name="M:LineSensorDotNet.CommonSensorUserControl.UpdateGUI">
            <summary>
            Set current sensor parameters
            </summary>
        </member>
        <member name="M:LineSensorDotNet.CommonSensorUserControl.registerSensorInterface(LineSensorDotNet.CSensorInterface)">
            <summary>
            connection to SensorInterface
            </summary>
            <param name="_cSensorInterface">SensorInterface instance</param>
        </member>
        <member name="M:LineSensorDotNet.CommonSensorUserControl.registerSensorManager(LineSensorDotNet.CSensorManager)">
            <summary>
            connection to SensorManager
            </summary>
            <param name="_cSensorManager">Sensormanager instance</param>
        </member>
        <member name="M:LineSensorDotNet.CommonSensorUserControl.ConnectToSensor">
            <summary>
            Open connection with sensor
            </summary>
            <returns>True on succes, false otherwise</returns>
        </member>
        <member name="M:LineSensorDotNet.CommonSensorUserControl.LoadLastSavedSensorConfiguration">
            <summary>
            Load last sensor configuration
            </summary>
        </member>
        <member name="M:LineSensorDotNet.CommonSensorUserControl.UpdateButtonsAccess(System.Boolean)">
            <summary>
            Update access button
            </summary>
        </member>
        <member name="M:LineSensorDotNet.CommonSensorUserControl.UpdateStatus(System.String)">
            <summary>
            Update status
            </summary>
            <param name="message">Sensor status (Connected, disconnected, ...)</param>
        </member>
        <member name="M:LineSensorDotNet.CommonSensorUserControl.getMessageText(System.String,System.String)">
            <summary>
            Get a text from resource file
            </summary>
            <returns></returns>
        </member>
        <member name="M:LineSensorDotNet.CommonSensorUserControl.getSensorParamToString">
            <summary>
            Return sensor parameters as a formatted string
            </summary>
            <returns>Sensor parameters</returns>
        </member>
        <member name="M:LineSensorDotNet.CommonSensorUserControl.setSensorFrame(System.Int32)">
            <summary>
            Set sensor exposure time
            </summary>
            <param name="frame">frame (exposure time)</param>
        </member>
        <member name="M:LineSensorDotNet.CommonSensorUserControl.setDefaultConnectionType(LineSensorDotNet.CSensorConstantsEnumDefinition.E_SENSOR_CONNECTION_TYPE)">
            <summary>
            Set the default Connection type for the first time
            </summary>
            <param name="ConnectionType">Constant for connection type [E_SENSOR_CONNECTION_TYPE]</param>
        </member>
        <member name="M:LineSensorDotNet.CommonSensorUserControl.setSensorLed(System.Int32)">
            <summary>
            Set sensor LED brightness
            </summary>
            <param name="led">LED level [%]</param>
        </member>
        <member name="M:LineSensorDotNet.CommonSensorUserControl.setControlerAndOpticalType(System.String,System.String)">
            <summary>
            Set controller informations
            </summary>
            <param name="control">Controller type ( MPLS 180, MPLS DM, ...)</param>
            <param name="optical">Optical head (Nanoview, Microview, Deepview, ...)</param>
        </member>
        <member name="M:LineSensorDotNet.CommonSensorUserControl.setFreqMinMax(System.Int32,System.Int32)">
            <summary>
            Set min and max frequency
            </summary>
            <param name="iFMin">Mininum frequency</param>
            <param name="iFMax">Maxinum frequency</param>
        </member>
        <member name="M:LineSensorDotNet.CommonSensorUserControl.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="F:LineSensorDotNet.CommonSensorUserControl.components">
            <summary> 
            Variable nécessaire au concepteur.
            </summary>
        </member>
        <member name="M:LineSensorDotNet.CommonSensorUserControl.Dispose(System.Boolean)">
            <summary>  
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:LineSensorDotNet.CommonSensorUserControl.InitializeComponent">
            <summary> 
            Méthode requise pour la prise en charge du concepteur - ne modifiez pas 
            le contenu de cette méthode avec l'éditeur de code.
            </summary>
        </member>
        <member name="T:LineSensorDotNet.CommonSensorUserControl.DUpdateButtonsAccess">
            <summary>
            delegate for buton Access
            </summary>
            <param name="tru"></param>
        </member>
        <member name="T:LineSensorDotNet.CommonSensorUserControl.DUpdatdeStatus">
            <summary>
            delegate for update button 
            </summary>
            <param name="message"></param>
        </member>
        <member name="F:LineSensorDotNet.CommonSensorDataUserControl.m_Data">
            <summary>
            Data flow to which to refer
            </summary>
        </member>
        <member name="F:LineSensorDotNet.CommonSensorDataUserControl.m_lNbPixelX">
            <summary>
            Count of display pixel for X axis (width)
            </summary>
        </member>
        <member name="F:LineSensorDotNet.CommonSensorDataUserControl.m_lNbPixelY">
            <summary>
            Count of display pixel for Y axis (height)
            </summary>
        </member>
        <member name="F:LineSensorDotNet.CommonSensorDataUserControl.m_lXScaled">
            <summary>
            List on X indexes scaled
            </summary>
        </member>
        <member name="F:LineSensorDotNet.CommonSensorDataUserControl.m_lYScaled">
            <summary>
            List on Y indexes scaled
            </summary>
        </member>
        <member name="F:LineSensorDotNet.CommonSensorDataUserControl.m_bOK">
            <summary>
            GL is OK
            </summary>
        </member>
        <member name="F:LineSensorDotNet.CommonSensorDataUserControl.m_dbPositionZ">
            <summary>
            Position on Z axis (distance)
            </summary>
        </member>
        <member name="F:LineSensorDotNet.CommonSensorDataUserControl.m_dbMoveX">
            <summary>
            Translation on X axis
            </summary>
        </member>
        <member name="F:LineSensorDotNet.CommonSensorDataUserControl.m_dbMoveY">
            <summary>
            Translation on Y axis
            </summary>
        </member>
        <member name="F:LineSensorDotNet.CommonSensorDataUserControl.m_lIndices">
            <summary>
            Indices tab
            </summary>
        </member>
        <member name="F:LineSensorDotNet.CommonSensorDataUserControl.m_vVector">
            <summary>
            Vectors tab
            </summary>
        </member>
        <member name="F:LineSensorDotNet.CommonSensorDataUserControl.m_lColor">
            <summary>
            Colors tab
            </summary>
        </member>
        <member name="F:LineSensorDotNet.CommonSensorDataUserControl.m_lBufferIndices">
            <summary>
            Index of indexes buffer
            </summary>
        </member>
        <member name="F:LineSensorDotNet.CommonSensorDataUserControl.m_lBufferVector">
            <summary>
            Index of vectors buffer
            </summary>
        </member>
        <member name="F:LineSensorDotNet.CommonSensorDataUserControl.m_lBufferColor">
            <summary>
            Index of colors buffer
            </summary>
        </member>
        <member name="F:LineSensorDotNet.CommonSensorDataUserControl.m_pCurrentMousePosition">
            <summary>
            Current mouse position
            </summary>
        </member>
        <member name="F:LineSensorDotNet.CommonSensorDataUserControl.m_LastError">
            <summary>
            Last error occured
            </summary>
        </member>
        <member name="M:LineSensorDotNet.CommonSensorDataUserControl.m_tmrRefresh_Tick(System.Object,System.EventArgs)">
            <summary>
            On timer refresh
            </summary>
        </member>
        <member name="M:LineSensorDotNet.CommonSensorDataUserControl.CommonSensorDataUserControl_SizeChanged(System.Object,System.EventArgs)">
            <summary>
            On control size changed
            </summary>
        </member>
        <member name="M:LineSensorDotNet.CommonSensorDataUserControl.ColorSystemToColorGL(System.Drawing.Color)">
            <summary>
            Convert system color to GL format
            </summary>
            <param name="l_clr">System color</param>
            <returns>GL color</returns>
        </member>
        <member name="M:LineSensorDotNet.CommonSensorDataUserControl.Initialize">
            <summary>
            Initialize GL control
            </summary>
        </member>
        <member name="M:LineSensorDotNet.CommonSensorDataUserControl.SetBackColor(System.Drawing.Color)">
            <summary>
            Set back color
            </summary>
        </member>
        <member name="M:LineSensorDotNet.CommonSensorDataUserControl.registerSensorManager(LineSensorDotNet.CSensorManager)">
            <summary>
            register Sensor Manager
            </summary>
            <param name="_sensorMgr">sensor manager instance</param>
        </member>
        <member name="M:LineSensorDotNet.CommonSensorDataUserControl.ScreenToWorld3D(System.Int32,System.Int32)">
            <summary>
            Convert screen coordinates to world coordinates
            </summary>
            <param name="l_lX">Screen X</param>
            <param name="l_lY">Screen Y</param>
            <returns>Point in world</returns>
        </member>
        <member name="M:LineSensorDotNet.CommonSensorDataUserControl.World3DToScreen(OpenTK.Vector3)">
            <summary>
            Convert screen coordinates to world coordinates
            </summary>
            <param name="l_lX">Screen X</param>
            <param name="l_lY">Screen Y</param>
            <returns>Point in world</returns>
        </member>
        <member name="M:LineSensorDotNet.CommonSensorDataUserControl.GLDrawLine(OpenTK.Vector3[],System.Drawing.Color,System.Int32)">
            <summary>
            KL_03-11-2015 add AxisType for stipple line
            </summary>
            <param name="l_vPoints">Vectors that define the line</param>
            <param name="l_cColor">Line color</param>
        </member>
        <member name="M:LineSensorDotNet.CommonSensorDataUserControl.GLDrawTriangle(OpenTK.Vector3[],System.Drawing.Color,System.Boolean)">
            <summary>
            Draw a triangle in GL control
            </summary>
            <param name="l_vPoints">Vectors that define the triangle</param>
            <param name="l_cColor">Triangle color</param>
            <param name="l_bFill">Fill the triangle ?</param>
        </member>
        <member name="M:LineSensorDotNet.CommonSensorDataUserControl.Finalize">
            <summary>
            standard destructor
            </summary>
        </member>
        <member name="M:LineSensorDotNet.CommonSensorDataUserControl.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="F:LineSensorDotNet.CommonSensorDataUserControl.components">
            <summary> 
            Variable nécessaire au concepteur.
            </summary>
        </member>
        <member name="M:LineSensorDotNet.CommonSensorDataUserControl.Dispose(System.Boolean)">
            <summary> 
            Nettoyage des ressources utilisées.
            </summary>
            <param name="disposing">true si les ressources managées doivent être supprimées ; sinon, false.</param>
        </member>
        <member name="M:LineSensorDotNet.CommonSensorDataUserControl.InitializeComponent">
            <summary> 
            Méthode requise pour la prise en charge du concepteur - ne modifiez pas 
            le contenu de cette méthode avec l'éditeur de code.
            </summary>
        </member>
        <member name="P:LineSensorDotNet.CommonSensorDataUserControl.MaximumIntensity">
            <summary>
            Container
            </summary>
        </member>
        <member name="P:LineSensorDotNet.CommonSensorDataUserControl.MaximumDistance">
            <summary>
            Container
            </summary>
        </member>
        <member name="P:LineSensorDotNet.CommonSensorDataUserControl.NominalPitch">
            <summary>
            Container
            </summary>
        </member>
    </members>
</doc>
